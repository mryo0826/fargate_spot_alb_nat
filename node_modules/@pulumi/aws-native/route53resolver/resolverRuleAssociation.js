"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResolverRuleAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * In the response to an [AssociateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html), [DisassociateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html), or [ListResolverRuleAssociations](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html) request, provides information about an association between a resolver rule and a VPC. The association determines which DNS queries that originate in the VPC are forwarded to your network.
 */
class ResolverRuleAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ResolverRuleAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ResolverRuleAssociation(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResolverRuleAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResolverRuleAssociation.__pulumiType;
    }
    /**
     * Create a ResolverRuleAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resolverRuleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolverRuleId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resolverRuleId"] = args ? args.resolverRuleId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["resolverRuleAssociationId"] = undefined /*out*/;
        }
        else {
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resolverRuleAssociationId"] = undefined /*out*/;
            resourceInputs["resolverRuleId"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "resolverRuleId", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ResolverRuleAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ResolverRuleAssociation = ResolverRuleAssociation;
/** @internal */
ResolverRuleAssociation.__pulumiType = 'aws-native:route53resolver:ResolverRuleAssociation';
//# sourceMappingURL=resolverRuleAssociation.js.map