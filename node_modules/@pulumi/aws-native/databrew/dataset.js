"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dataset = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::DataBrew::Dataset.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testDataBrewDataset = new aws_native.databrew.Dataset("testDataBrewDataset", {
 *     name: "cf-test-dataset1",
 *     input: {
 *         s3InputDefinition: {
 *             bucket: "test-location",
 *             key: "test.xlsx",
 *         },
 *     },
 *     formatOptions: {
 *         excel: {
 *             sheetNames: ["test"],
 *         },
 *     },
 *     tags: [{
 *         key: "key00AtCreate",
 *         value: "value001AtCreate",
 *     }],
 * });
 *
 * ```
 */
class Dataset extends pulumi.CustomResource {
    /**
     * Get an existing Dataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Dataset(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Dataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dataset.__pulumiType;
    }
    /**
     * Create a Dataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.input === undefined) && !opts.urn) {
                throw new Error("Missing required property 'input'");
            }
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["formatOptions"] = args ? args.formatOptions : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathOptions"] = args ? args.pathOptions : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        else {
            resourceInputs["format"] = undefined /*out*/;
            resourceInputs["formatOptions"] = undefined /*out*/;
            resourceInputs["input"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pathOptions"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Dataset.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Dataset = Dataset;
/** @internal */
Dataset.__pulumiType = 'aws-native:databrew:Dataset';
//# sourceMappingURL=dataset.js.map