import * as pulumi from "@pulumi/pulumi";
/**
 * Resource Type definition for AWS::Lightsail::LoadBalancerTlsCertificate
 */
export declare class LoadBalancerTlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerTlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LoadBalancerTlsCertificate;
    /**
     * Returns true if the given object is an instance of LoadBalancerTlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoadBalancerTlsCertificate;
    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    readonly certificateAlternativeNames: pulumi.Output<string[] | undefined>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    readonly certificateDomainName: pulumi.Output<string>;
    /**
     * The SSL/TLS certificate name.
     */
    readonly certificateName: pulumi.Output<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    readonly httpsRedirectionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    readonly isAttached: pulumi.Output<boolean | undefined>;
    /**
     * The name of your load balancer.
     */
    readonly loadBalancerName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the SSL/TLS certificate.
     */
    readonly loadBalancerTlsCertificateArn: pulumi.Output<string>;
    /**
     * The validation status of the SSL/TLS certificate.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Create a LoadBalancerTlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerTlsCertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LoadBalancerTlsCertificate resource.
 */
export interface LoadBalancerTlsCertificateArgs {
    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    certificateAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    certificateDomainName: pulumi.Input<string>;
    /**
     * The SSL/TLS certificate name.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    httpsRedirectionEnabled?: pulumi.Input<boolean>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName: pulumi.Input<string>;
}
