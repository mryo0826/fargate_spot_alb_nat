import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Wisdom::KnowledgeBase Resource Type
 */
export declare class KnowledgeBase extends pulumi.CustomResource {
    /**
     * Get an existing KnowledgeBase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KnowledgeBase;
    /**
     * Returns true if the given object is an instance of KnowledgeBase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KnowledgeBase;
    /**
     * The description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the knowledge base.
     */
    readonly knowledgeBaseArn: pulumi.Output<string>;
    /**
     * The ID of the knowledge base.
     */
    readonly knowledgeBaseId: pulumi.Output<string>;
    /**
     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.
     */
    readonly knowledgeBaseType: pulumi.Output<enums.wisdom.KnowledgeBaseType>;
    /**
     * The name of the knowledge base.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Information about how to render the content.
     */
    readonly renderingConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseRenderingConfiguration | undefined>;
    /**
     * This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
     */
    readonly serverSideEncryptionConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseServerSideEncryptionConfiguration | undefined>;
    /**
     * The source of the knowledge base content. Only set this argument for EXTERNAL or Managed knowledge bases.
     */
    readonly sourceConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseSourceConfiguration0Properties | outputs.wisdom.KnowledgeBaseSourceConfiguration1Properties | undefined>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    readonly tags: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;
    /**
     * Contains details about how to ingest the documents in a data source.
     */
    readonly vectorIngestionConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseVectorIngestionConfiguration | undefined>;
    /**
     * Create a KnowledgeBase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KnowledgeBaseArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a KnowledgeBase resource.
 */
export interface KnowledgeBaseArgs {
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.
     */
    knowledgeBaseType: pulumi.Input<enums.wisdom.KnowledgeBaseType>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * Information about how to render the content.
     */
    renderingConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseRenderingConfigurationArgs>;
    /**
     * This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseServerSideEncryptionConfigurationArgs>;
    /**
     * The source of the knowledge base content. Only set this argument for EXTERNAL or Managed knowledge bases.
     */
    sourceConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseSourceConfiguration0PropertiesArgs | inputs.wisdom.KnowledgeBaseSourceConfiguration1PropertiesArgs>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
    /**
     * Contains details about how to ingest the documents in a data source.
     */
    vectorIngestionConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseVectorIngestionConfigurationArgs>;
}
