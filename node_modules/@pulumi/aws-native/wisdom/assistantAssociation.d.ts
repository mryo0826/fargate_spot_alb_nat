import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Wisdom::AssistantAssociation Resource Type
 */
export declare class AssistantAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AssistantAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AssistantAssociation;
    /**
     * Returns true if the given object is an instance of AssistantAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AssistantAssociation;
    /**
     * The Amazon Resource Name (ARN) of the Wisdom assistant.
     */
    readonly assistantArn: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the assistant association.
     */
    readonly assistantAssociationArn: pulumi.Output<string>;
    /**
     * The ID of the association.
     */
    readonly assistantAssociationId: pulumi.Output<string>;
    /**
     * The identifier of the Wisdom assistant.
     */
    readonly assistantId: pulumi.Output<string>;
    /**
     * The identifier of the associated resource.
     */
    readonly association: pulumi.Output<outputs.wisdom.AssistantAssociationAssociationData>;
    /**
     * The type of association.
     */
    readonly associationType: pulumi.Output<enums.wisdom.AssistantAssociationAssociationType>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    readonly tags: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;
    /**
     * Create a AssistantAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssistantAssociationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a AssistantAssociation resource.
 */
export interface AssistantAssociationArgs {
    /**
     * The identifier of the Wisdom assistant.
     */
    assistantId: pulumi.Input<string>;
    /**
     * The identifier of the associated resource.
     */
    association: pulumi.Input<inputs.wisdom.AssistantAssociationAssociationDataArgs>;
    /**
     * The type of association.
     */
    associationType: pulumi.Input<enums.wisdom.AssistantAssociationAssociationType>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
}
