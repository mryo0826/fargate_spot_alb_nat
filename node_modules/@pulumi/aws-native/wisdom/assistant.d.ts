import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Wisdom::Assistant Resource Type
 */
export declare class Assistant extends pulumi.CustomResource {
    /**
     * Get an existing Assistant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Assistant;
    /**
     * Returns true if the given object is an instance of Assistant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Assistant;
    /**
     * The Amazon Resource Name (ARN) of the assistant.
     */
    readonly assistantArn: pulumi.Output<string>;
    /**
     * The ID of the Wisdom assistant.
     */
    readonly assistantId: pulumi.Output<string>;
    /**
     * The description of the assistant.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the assistant.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The configuration information for the customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) .
     */
    readonly serverSideEncryptionConfiguration: pulumi.Output<outputs.wisdom.AssistantServerSideEncryptionConfiguration | undefined>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    readonly tags: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;
    /**
     * The type of assistant.
     */
    readonly type: pulumi.Output<enums.wisdom.AssistantType>;
    /**
     * Create a Assistant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssistantArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Assistant resource.
 */
export interface AssistantArgs {
    /**
     * The description of the assistant.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the assistant.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration information for the customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) .
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.wisdom.AssistantServerSideEncryptionConfigurationArgs>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
    /**
     * The type of assistant.
     */
    type: pulumi.Input<enums.wisdom.AssistantType>;
}
