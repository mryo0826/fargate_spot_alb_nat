import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::ElastiCache::User
 */
export declare class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User;
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is User;
    /**
     * Access permissions string used for this user account.
     */
    readonly accessString: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the user account.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Specifies the authentication mode to use. Below is an example of the possible JSON values:
     *
     * ```
     * { Passwords: ["*****", "******"] // If Type is password.
     * }
     * ```
     */
    readonly authenticationMode: pulumi.Output<outputs.elasticache.AuthenticationModeProperties | undefined>;
    /**
     * The target cache engine for the user.
     */
    readonly engine: pulumi.Output<enums.elasticache.UserEngine>;
    /**
     * Indicates a password is not required for this user account.
     */
    readonly noPasswordRequired: pulumi.Output<boolean | undefined>;
    /**
     * Passwords used for this user account. You can create up to two passwords for each user.
     */
    readonly passwords: pulumi.Output<string[] | undefined>;
    /**
     * Indicates the user status. Can be "active", "modifying" or "deleting".
     */
    readonly status: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The ID of the user.
     */
    readonly userId: pulumi.Output<string>;
    /**
     * The username of the user.
     */
    readonly userName: pulumi.Output<string>;
    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Access permissions string used for this user account.
     */
    accessString?: pulumi.Input<string>;
    /**
     * Specifies the authentication mode to use. Below is an example of the possible JSON values:
     *
     * ```
     * { Passwords: ["*****", "******"] // If Type is password.
     * }
     * ```
     */
    authenticationMode?: pulumi.Input<inputs.elasticache.AuthenticationModePropertiesArgs>;
    /**
     * The target cache engine for the user.
     */
    engine: pulumi.Input<enums.elasticache.UserEngine>;
    /**
     * Indicates a password is not required for this user account.
     */
    noPasswordRequired?: pulumi.Input<boolean>;
    /**
     * Passwords used for this user account. You can create up to two passwords for each user.
     */
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of key-value pairs to apply to this user.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The ID of the user.
     */
    userId: pulumi.Input<string>;
    /**
     * The username of the user.
     */
    userName?: pulumi.Input<string>;
}
