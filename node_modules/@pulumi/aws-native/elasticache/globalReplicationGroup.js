"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalReplicationGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::ElastiCache::GlobalReplicationGroup resource creates an Amazon ElastiCache Global Replication Group.
 */
class GlobalReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new GlobalReplicationGroup(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalReplicationGroup.__pulumiType;
    }
    /**
     * Create a GlobalReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = args ? args.cacheNodeType : undefined;
            resourceInputs["cacheParameterGroupName"] = args ? args.cacheParameterGroupName : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["globalNodeGroupCount"] = args ? args.globalNodeGroupCount : undefined;
            resourceInputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["regionalConfigurations"] = args ? args.regionalConfigurations : undefined;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["automaticFailoverEnabled"] = undefined /*out*/;
            resourceInputs["cacheNodeType"] = undefined /*out*/;
            resourceInputs["cacheParameterGroupName"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["globalNodeGroupCount"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupDescription"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupIdSuffix"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["regionalConfigurations"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalReplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GlobalReplicationGroup = GlobalReplicationGroup;
/** @internal */
GlobalReplicationGroup.__pulumiType = 'aws-native:elasticache:GlobalReplicationGroup';
//# sourceMappingURL=globalReplicationGroup.js.map