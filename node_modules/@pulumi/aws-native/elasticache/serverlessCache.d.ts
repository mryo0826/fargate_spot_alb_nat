import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
 */
export declare class ServerlessCache extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServerlessCache;
    /**
     * Returns true if the given object is an instance of ServerlessCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServerlessCache;
    /**
     * The ARN of the Serverless Cache.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The cache usage limit for the serverless cache.
     */
    readonly cacheUsageLimits: pulumi.Output<outputs.elasticache.ServerlessCacheCacheUsageLimits | undefined>;
    /**
     * The creation time of the Serverless Cache.
     */
    readonly createTime: pulumi.Output<string>;
    /**
     * The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
     */
    readonly dailySnapshotTime: pulumi.Output<string | undefined>;
    /**
     * The description of the Serverless Cache.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Represents the information required for client programs to connect to a cache node. This value is read-only.
     */
    readonly endpoint: pulumi.Output<outputs.elasticache.ServerlessCacheEndpoint | undefined>;
    /**
     * The engine name of the Serverless Cache.
     */
    readonly engine: pulumi.Output<string>;
    /**
     * The final snapshot name which is taken before Serverless Cache is deleted.
     */
    readonly finalSnapshotName: pulumi.Output<string | undefined>;
    /**
     * The full engine version of the Serverless Cache.
     */
    readonly fullEngineVersion: pulumi.Output<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * The major engine version of the Serverless Cache.
     */
    readonly majorEngineVersion: pulumi.Output<string | undefined>;
    /**
     * Represents the information required for client programs to connect to a cache node. This value is read-only.
     */
    readonly readerEndpoint: pulumi.Output<outputs.elasticache.ServerlessCacheEndpoint | undefined>;
    /**
     * One or more Amazon VPC security groups associated with this Serverless Cache.
     */
    readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Serverless Cache. This value must be unique.
     */
    readonly serverlessCacheName: pulumi.Output<string>;
    /**
     * The ARN's of snapshot to restore Serverless Cache.
     */
    readonly snapshotArnsToRestore: pulumi.Output<string[] | undefined>;
    /**
     * The snapshot retention limit of the Serverless Cache.
     */
    readonly snapshotRetentionLimit: pulumi.Output<number | undefined>;
    /**
     * The status of the Serverless Cache.
     */
    readonly status: pulumi.Output<string>;
    /**
     * The subnet id's of the Serverless Cache.
     */
    readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * An array of key-value pairs to apply to this Serverless Cache.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The ID of the user group.
     */
    readonly userGroupId: pulumi.Output<string | undefined>;
    /**
     * Create a ServerlessCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessCacheArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ServerlessCache resource.
 */
export interface ServerlessCacheArgs {
    /**
     * The cache usage limit for the serverless cache.
     */
    cacheUsageLimits?: pulumi.Input<inputs.elasticache.ServerlessCacheCacheUsageLimitsArgs>;
    /**
     * The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
     */
    dailySnapshotTime?: pulumi.Input<string>;
    /**
     * The description of the Serverless Cache.
     */
    description?: pulumi.Input<string>;
    /**
     * Represents the information required for client programs to connect to a cache node. This value is read-only.
     */
    endpoint?: pulumi.Input<inputs.elasticache.ServerlessCacheEndpointArgs>;
    /**
     * The engine name of the Serverless Cache.
     */
    engine: pulumi.Input<string>;
    /**
     * The final snapshot name which is taken before Serverless Cache is deleted.
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The major engine version of the Serverless Cache.
     */
    majorEngineVersion?: pulumi.Input<string>;
    /**
     * Represents the information required for client programs to connect to a cache node. This value is read-only.
     */
    readerEndpoint?: pulumi.Input<inputs.elasticache.ServerlessCacheEndpointArgs>;
    /**
     * One or more Amazon VPC security groups associated with this Serverless Cache.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Serverless Cache. This value must be unique.
     */
    serverlessCacheName?: pulumi.Input<string>;
    /**
     * The ARN's of snapshot to restore Serverless Cache.
     */
    snapshotArnsToRestore?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The snapshot retention limit of the Serverless Cache.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The subnet id's of the Serverless Cache.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of key-value pairs to apply to this Serverless Cache.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The ID of the user group.
     */
    userGroupId?: pulumi.Input<string>;
}
