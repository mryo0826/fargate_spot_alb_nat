import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::Transfer::Certificate
 */
export declare function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult>;
export interface GetCertificateArgs {
    /**
     * A unique identifier for the certificate.
     */
    certificateId: string;
}
export interface GetCertificateResult {
    /**
     * Specifies the active date for the certificate.
     */
    readonly activeDate?: string;
    /**
     * Specifies the unique Amazon Resource Name (ARN) for the agreement.
     */
    readonly arn?: string;
    /**
     * A unique identifier for the certificate.
     */
    readonly certificateId?: string;
    /**
     * A textual description for the certificate.
     */
    readonly description?: string;
    /**
     * Specifies the inactive date for the certificate.
     */
    readonly inactiveDate?: string;
    /**
     * Specifies the not after date for the certificate.
     */
    readonly notAfterDate?: string;
    /**
     * Specifies the not before date for the certificate.
     */
    readonly notBeforeDate?: string;
    /**
     * Specifies Certificate's serial.
     */
    readonly serial?: string;
    /**
     * A status description for the certificate.
     */
    readonly status?: enums.transfer.CertificateStatus;
    /**
     * Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
     */
    readonly tags?: outputs.Tag[];
    /**
     * Describing the type of certificate. With or without a private key.
     */
    readonly type?: enums.transfer.CertificateType;
    /**
     * Specifies the usage type for the certificate.
     */
    readonly usage?: enums.transfer.CertificateUsage;
}
/**
 * Resource Type definition for AWS::Transfer::Certificate
 */
export declare function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCertificateResult>;
export interface GetCertificateOutputArgs {
    /**
     * A unique identifier for the certificate.
     */
    certificateId: pulumi.Input<string>;
}
