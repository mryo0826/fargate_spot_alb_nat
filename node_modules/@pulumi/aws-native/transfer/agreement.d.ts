import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::Transfer::Agreement
 */
export declare class Agreement extends pulumi.CustomResource {
    /**
     * Get an existing Agreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Agreement;
    /**
     * Returns true if the given object is an instance of Agreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Agreement;
    /**
     * Specifies the access role for the agreement.
     */
    readonly accessRole: pulumi.Output<string>;
    /**
     * A unique identifier for the agreement.
     */
    readonly agreementId: pulumi.Output<string>;
    /**
     * Specifies the unique Amazon Resource Name (ARN) for the agreement.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Specifies the base directory for the agreement.
     */
    readonly baseDirectory: pulumi.Output<string>;
    /**
     * A textual description for the agreement.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A unique identifier for the local profile.
     */
    readonly localProfileId: pulumi.Output<string>;
    /**
     * A unique identifier for the partner profile.
     */
    readonly partnerProfileId: pulumi.Output<string>;
    /**
     * A unique identifier for the server.
     */
    readonly serverId: pulumi.Output<string>;
    /**
     * Specifies the status of the agreement.
     */
    readonly status: pulumi.Output<enums.transfer.AgreementStatus | undefined>;
    /**
     * Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Agreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgreementArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Agreement resource.
 */
export interface AgreementArgs {
    /**
     * Specifies the access role for the agreement.
     */
    accessRole: pulumi.Input<string>;
    /**
     * Specifies the base directory for the agreement.
     */
    baseDirectory: pulumi.Input<string>;
    /**
     * A textual description for the agreement.
     */
    description?: pulumi.Input<string>;
    /**
     * A unique identifier for the local profile.
     */
    localProfileId: pulumi.Input<string>;
    /**
     * A unique identifier for the partner profile.
     */
    partnerProfileId: pulumi.Input<string>;
    /**
     * A unique identifier for the server.
     */
    serverId: pulumi.Input<string>;
    /**
     * Specifies the status of the agreement.
     */
    status?: pulumi.Input<enums.transfer.AgreementStatus>;
    /**
     * Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
