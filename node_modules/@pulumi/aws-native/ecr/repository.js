"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ``AWS::ECR::Repository`` resource specifies an Amazon Elastic Container Registry (Amazon ECR) repository, where users can push and pull Docker images, Open Container Initiative (OCI) images, and OCI compatible artifacts. For more information, see [Amazon ECR private repositories](https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html) in the *Amazon ECR User Guide*.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const lifecyclePolicyText = config.require("lifecyclePolicyText");
 * const repositoryName = config.require("repositoryName");
 * const registryId = config.require("registryId");
 * const myRepository = new aws_native.ecr.Repository("myRepository", {
 *     lifecyclePolicy: {
 *         lifecyclePolicyText: lifecyclePolicyText,
 *         registryId: registryId,
 *     },
 *     repositoryName: repositoryName,
 * });
 * export const arn = myRepository.arn;
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const lifecyclePolicyText = config.require("lifecyclePolicyText");
 * const repositoryName = config.require("repositoryName");
 * const registryId = config.require("registryId");
 * const myRepository = new aws_native.ecr.Repository("myRepository", {
 *     lifecyclePolicy: {
 *         lifecyclePolicyText: lifecyclePolicyText,
 *         registryId: registryId,
 *     },
 *     repositoryName: repositoryName,
 * });
 * export const arn = myRepository.arn;
 *
 * ```
 */
class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Repository(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }
    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["emptyOnDelete"] = args ? args.emptyOnDelete : undefined;
            resourceInputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            resourceInputs["imageScanningConfiguration"] = args ? args.imageScanningConfiguration : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["repositoryPolicyText"] = args ? args.repositoryPolicyText : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["repositoryUri"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["emptyOnDelete"] = undefined /*out*/;
            resourceInputs["encryptionConfiguration"] = undefined /*out*/;
            resourceInputs["imageScanningConfiguration"] = undefined /*out*/;
            resourceInputs["imageTagMutability"] = undefined /*out*/;
            resourceInputs["lifecyclePolicy"] = undefined /*out*/;
            resourceInputs["repositoryName"] = undefined /*out*/;
            resourceInputs["repositoryPolicyText"] = undefined /*out*/;
            resourceInputs["repositoryUri"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["encryptionConfiguration", "repositoryName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Repository = Repository;
/** @internal */
Repository.__pulumiType = 'aws-native:ecr:Repository';
//# sourceMappingURL=repository.js.map