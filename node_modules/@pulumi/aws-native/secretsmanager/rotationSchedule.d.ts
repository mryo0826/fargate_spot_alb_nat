import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::SecretsManager::RotationSchedule
 */
export declare class RotationSchedule extends pulumi.CustomResource {
    /**
     * Get an existing RotationSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RotationSchedule;
    /**
     * Returns true if the given object is an instance of RotationSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RotationSchedule;
    /**
     * The ARN of the secret.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * Creates a new Lambda rotation function based on one of the Secrets Manager rotation function templates. To use a rotation function that already exists, specify RotationLambdaARN instead.
     */
    readonly hostedRotationLambda: pulumi.Output<outputs.secretsmanager.RotationScheduleHostedRotationLambda | undefined>;
    /**
     * Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window.
     */
    readonly rotateImmediatelyOnUpdate: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of an existing Lambda rotation function. To specify a rotation function that is also defined in this template, use the Ref function.
     */
    readonly rotationLambdaArn: pulumi.Output<string | undefined>;
    /**
     * A structure that defines the rotation configuration for this secret.
     */
    readonly rotationRules: pulumi.Output<outputs.secretsmanager.RotationScheduleRotationRules | undefined>;
    /**
     * The ARN or name of the secret to rotate.
     */
    readonly secretId: pulumi.Output<string>;
    /**
     * Create a RotationSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RotationScheduleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a RotationSchedule resource.
 */
export interface RotationScheduleArgs {
    /**
     * Creates a new Lambda rotation function based on one of the Secrets Manager rotation function templates. To use a rotation function that already exists, specify RotationLambdaARN instead.
     */
    hostedRotationLambda?: pulumi.Input<inputs.secretsmanager.RotationScheduleHostedRotationLambdaArgs>;
    /**
     * Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window.
     */
    rotateImmediatelyOnUpdate?: pulumi.Input<boolean>;
    /**
     * The ARN of an existing Lambda rotation function. To specify a rotation function that is also defined in this template, use the Ref function.
     */
    rotationLambdaArn?: pulumi.Input<string>;
    /**
     * A structure that defines the rotation configuration for this secret.
     */
    rotationRules?: pulumi.Input<inputs.secretsmanager.RotationScheduleRotationRulesArgs>;
    /**
     * The ARN or name of the secret to rotate.
     */
    secretId: pulumi.Input<string>;
}
