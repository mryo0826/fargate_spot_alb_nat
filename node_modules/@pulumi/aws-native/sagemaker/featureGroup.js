"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::SageMaker::FeatureGroup
 */
class FeatureGroup extends pulumi.CustomResource {
    /**
     * Get an existing FeatureGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new FeatureGroup(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FeatureGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureGroup.__pulumiType;
    }
    /**
     * Create a FeatureGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.eventTimeFeatureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTimeFeatureName'");
            }
            if ((!args || args.featureDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureDefinitions'");
            }
            if ((!args || args.recordIdentifierFeatureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordIdentifierFeatureName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventTimeFeatureName"] = args ? args.eventTimeFeatureName : undefined;
            resourceInputs["featureDefinitions"] = args ? args.featureDefinitions : undefined;
            resourceInputs["featureGroupName"] = args ? args.featureGroupName : undefined;
            resourceInputs["offlineStoreConfig"] = args ? args.offlineStoreConfig : undefined;
            resourceInputs["onlineStoreConfig"] = args ? args.onlineStoreConfig : undefined;
            resourceInputs["recordIdentifierFeatureName"] = args ? args.recordIdentifierFeatureName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throughputConfig"] = args ? args.throughputConfig : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["featureGroupStatus"] = undefined /*out*/;
        }
        else {
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["eventTimeFeatureName"] = undefined /*out*/;
            resourceInputs["featureDefinitions"] = undefined /*out*/;
            resourceInputs["featureGroupName"] = undefined /*out*/;
            resourceInputs["featureGroupStatus"] = undefined /*out*/;
            resourceInputs["offlineStoreConfig"] = undefined /*out*/;
            resourceInputs["onlineStoreConfig"] = undefined /*out*/;
            resourceInputs["recordIdentifierFeatureName"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["throughputConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["description", "eventTimeFeatureName", "featureGroupName", "offlineStoreConfig", "recordIdentifierFeatureName", "roleArn", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FeatureGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FeatureGroup = FeatureGroup;
/** @internal */
FeatureGroup.__pulumiType = 'aws-native:sagemaker:FeatureGroup';
//# sourceMappingURL=featureGroup.js.map