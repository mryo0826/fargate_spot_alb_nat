"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::SageMaker::ImageVersion
 */
class ImageVersion extends pulumi.CustomResource {
    /**
     * Get an existing ImageVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ImageVersion(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ImageVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageVersion.__pulumiType;
    }
    /**
     * Create a ImageVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.baseImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseImage'");
            }
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["baseImage"] = args ? args.baseImage : undefined;
            resourceInputs["horovod"] = args ? args.horovod : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["mlFramework"] = args ? args.mlFramework : undefined;
            resourceInputs["processor"] = args ? args.processor : undefined;
            resourceInputs["programmingLang"] = args ? args.programmingLang : undefined;
            resourceInputs["releaseNotes"] = args ? args.releaseNotes : undefined;
            resourceInputs["vendorGuidance"] = args ? args.vendorGuidance : undefined;
            resourceInputs["containerImage"] = undefined /*out*/;
            resourceInputs["imageArn"] = undefined /*out*/;
            resourceInputs["imageVersionArn"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        else {
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["aliases"] = undefined /*out*/;
            resourceInputs["baseImage"] = undefined /*out*/;
            resourceInputs["containerImage"] = undefined /*out*/;
            resourceInputs["horovod"] = undefined /*out*/;
            resourceInputs["imageArn"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["imageVersionArn"] = undefined /*out*/;
            resourceInputs["jobType"] = undefined /*out*/;
            resourceInputs["mlFramework"] = undefined /*out*/;
            resourceInputs["processor"] = undefined /*out*/;
            resourceInputs["programmingLang"] = undefined /*out*/;
            resourceInputs["releaseNotes"] = undefined /*out*/;
            resourceInputs["vendorGuidance"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["baseImage", "imageName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ImageVersion.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ImageVersion = ImageVersion;
/** @internal */
ImageVersion.__pulumiType = 'aws-native:sagemaker:ImageVersion';
//# sourceMappingURL=imageVersion.js.map