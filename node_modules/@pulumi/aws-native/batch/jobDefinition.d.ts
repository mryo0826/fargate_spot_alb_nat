import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::Batch::JobDefinition
 */
export declare class JobDefinition extends pulumi.CustomResource {
    /**
     * Get an existing JobDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): JobDefinition;
    /**
     * Returns true if the given object is an instance of JobDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is JobDefinition;
    /**
     * An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
     */
    readonly containerProperties: pulumi.Output<outputs.batch.JobDefinitionContainerProperties | undefined>;
    /**
     * An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
     */
    readonly ecsProperties: pulumi.Output<outputs.batch.JobDefinitionEcsProperties | undefined>;
    /**
     * An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
     */
    readonly eksProperties: pulumi.Output<outputs.batch.JobDefinitionEksProperties | undefined>;
    /**
     * The name of the job definition.
     */
    readonly jobDefinitionName: pulumi.Output<string | undefined>;
    /**
     * An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
     *
     * > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
     */
    readonly nodeProperties: pulumi.Output<outputs.batch.JobDefinitionNodeProperties | undefined>;
    /**
     * Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
     */
    readonly parameters: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
     */
    readonly platformCapabilities: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
     */
    readonly propagateTags: pulumi.Output<boolean | undefined>;
    /**
     * The retry strategy to use for failed jobs that are submitted with this job definition.
     */
    readonly retryStrategy: pulumi.Output<outputs.batch.JobDefinitionRetryStrategy | undefined>;
    /**
     * The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
     */
    readonly schedulingPriority: pulumi.Output<number | undefined>;
    /**
     * A key-value pair to associate with a resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
     */
    readonly timeout: pulumi.Output<outputs.batch.JobDefinitionJobTimeout | undefined>;
    /**
     * The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
     *
     * - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
     * - If the value is `multinode` , then `nodeProperties` is required.
     *
     * > If the job is run on Fargate resources, then `multinode` isn't supported.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a JobDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a JobDefinition resource.
 */
export interface JobDefinitionArgs {
    /**
     * An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
     */
    containerProperties?: pulumi.Input<inputs.batch.JobDefinitionContainerPropertiesArgs>;
    /**
     * An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
     */
    ecsProperties?: pulumi.Input<inputs.batch.JobDefinitionEcsPropertiesArgs>;
    /**
     * An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
     */
    eksProperties?: pulumi.Input<inputs.batch.JobDefinitionEksPropertiesArgs>;
    /**
     * The name of the job definition.
     */
    jobDefinitionName?: pulumi.Input<string>;
    /**
     * An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
     *
     * > If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
     */
    nodeProperties?: pulumi.Input<inputs.batch.JobDefinitionNodePropertiesArgs>;
    /**
     * Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
     */
    parameters?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
     */
    platformCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
     */
    propagateTags?: pulumi.Input<boolean>;
    /**
     * The retry strategy to use for failed jobs that are submitted with this job definition.
     */
    retryStrategy?: pulumi.Input<inputs.batch.JobDefinitionRetryStrategyArgs>;
    /**
     * The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
     */
    schedulingPriority?: pulumi.Input<number>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
     */
    timeout?: pulumi.Input<inputs.batch.JobDefinitionJobTimeoutArgs>;
    /**
     * The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
     *
     * - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
     * - If the value is `multinode` , then `nodeProperties` is required.
     *
     * > If the job is run on Fargate resources, then `multinode` isn't supported.
     */
    type: pulumi.Input<string>;
}
