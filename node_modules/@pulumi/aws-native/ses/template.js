"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Template = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::SES::Template
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const templateName = config.require("templateName");
 * const subjectPart = config.require("subjectPart");
 * const textPart = config.require("textPart");
 * const htmlPart = config.require("htmlPart");
 * const template = new aws_native.ses.Template("template", {template: {
 *     templateName: templateName,
 *     subjectPart: subjectPart,
 *     textPart: textPart,
 *     htmlPart: htmlPart,
 * }});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const templateName = config.require("templateName");
 * const subjectPart = config.require("subjectPart");
 * const textPart = config.require("textPart");
 * const htmlPart = config.require("htmlPart");
 * const template = new aws_native.ses.Template("template", {template: {
 *     templateName: templateName,
 *     subjectPart: subjectPart,
 *     textPart: textPart,
 *     htmlPart: htmlPart,
 * }});
 *
 * ```
 */
class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Template(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }
    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
        }
        else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["template"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["template.templateName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Template.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Template = Template;
/** @internal */
Template.__pulumiType = 'aws-native:ses:Template';
//# sourceMappingURL=template.js.map