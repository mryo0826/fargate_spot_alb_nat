"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::SES::ConfigurationSet.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const eventDestinationName = config.require("eventDestinationName");
 * const eventType1 = config.require("eventType1");
 * const eventType2 = config.require("eventType2");
 * const eventType3 = config.require("eventType3");
 * const dimensionName1 = config.require("dimensionName1");
 * const dimensionValueSource1 = config.require("dimensionValueSource1");
 * const defaultDimensionValue1 = config.require("defaultDimensionValue1");
 * const dimensionName2 = config.require("dimensionName2");
 * const dimensionValueSource2 = config.require("dimensionValueSource2");
 * const defaultDimensionValue2 = config.require("defaultDimensionValue2");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 * const cwEventDestination = new aws_native.ses.ConfigurationSetEventDestination("cwEventDestination", {
 *     configurationSetName: configSet.id,
 *     eventDestination: {
 *         name: eventDestinationName,
 *         enabled: true,
 *         matchingEventTypes: [
 *             eventType1,
 *             eventType2,
 *             eventType3,
 *         ],
 *         cloudWatchDestination: {
 *             dimensionConfigurations: [
 *                 {
 *                     dimensionName: dimensionName1,
 *                     dimensionValueSource: dimensionValueSource1,
 *                     defaultDimensionValue: defaultDimensionValue1,
 *                 },
 *                 {
 *                     dimensionName: dimensionName2,
 *                     dimensionValueSource: dimensionValueSource2,
 *                     defaultDimensionValue: defaultDimensionValue2,
 *                 },
 *             ],
 *         },
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const eventDestinationName = config.require("eventDestinationName");
 * const eventType1 = config.require("eventType1");
 * const eventType2 = config.require("eventType2");
 * const eventType3 = config.require("eventType3");
 * const dimensionName1 = config.require("dimensionName1");
 * const dimensionValueSource1 = config.require("dimensionValueSource1");
 * const defaultDimensionValue1 = config.require("defaultDimensionValue1");
 * const dimensionName2 = config.require("dimensionName2");
 * const dimensionValueSource2 = config.require("dimensionValueSource2");
 * const defaultDimensionValue2 = config.require("defaultDimensionValue2");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 * const cwEventDestination = new aws_native.ses.ConfigurationSetEventDestination("cwEventDestination", {
 *     configurationSetName: configSet.id,
 *     eventDestination: {
 *         name: eventDestinationName,
 *         enabled: true,
 *         matchingEventTypes: [
 *             eventType1,
 *             eventType2,
 *             eventType3,
 *         ],
 *         cloudWatchDestination: {
 *             dimensionConfigurations: [
 *                 {
 *                     dimensionName: dimensionName1,
 *                     dimensionValueSource: dimensionValueSource1,
 *                     defaultDimensionValue: defaultDimensionValue1,
 *                 },
 *                 {
 *                     dimensionName: dimensionName2,
 *                     dimensionValueSource: dimensionValueSource2,
 *                     defaultDimensionValue: defaultDimensionValue2,
 *                 },
 *             ],
 *         },
 *     },
 * });
 *
 * ```
 */
class ConfigurationSet extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ConfigurationSet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConfigurationSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationSet.__pulumiType;
    }
    /**
     * Create a ConfigurationSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["deliveryOptions"] = args ? args.deliveryOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reputationOptions"] = args ? args.reputationOptions : undefined;
            resourceInputs["sendingOptions"] = args ? args.sendingOptions : undefined;
            resourceInputs["suppressionOptions"] = args ? args.suppressionOptions : undefined;
            resourceInputs["trackingOptions"] = args ? args.trackingOptions : undefined;
            resourceInputs["vdmOptions"] = args ? args.vdmOptions : undefined;
        }
        else {
            resourceInputs["deliveryOptions"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reputationOptions"] = undefined /*out*/;
            resourceInputs["sendingOptions"] = undefined /*out*/;
            resourceInputs["suppressionOptions"] = undefined /*out*/;
            resourceInputs["trackingOptions"] = undefined /*out*/;
            resourceInputs["vdmOptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConfigurationSet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConfigurationSet = ConfigurationSet;
/** @internal */
ConfigurationSet.__pulumiType = 'aws-native:ses:ConfigurationSet';
//# sourceMappingURL=configurationSet.js.map