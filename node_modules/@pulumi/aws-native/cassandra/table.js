"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::Cassandra::Table
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "id",
 *         columnType: "ASCII",
 *     }],
 *     clusteringKeyColumns: [{
 *         column: {
 *             columnName: "division",
 *             columnType: "ASCII",
 *         },
 *         orderBy: aws_native.cassandra.TableClusteringKeyColumnOrderBy.Asc,
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 *     billingMode: {
 *         mode: aws_native.cassandra.TableMode.Provisioned,
 *         provisionedThroughput: {
 *             readCapacityUnits: 5,
 *             writeCapacityUnits: 5,
 *         },
 *     },
 *     clientSideTimestampsEnabled: true,
 *     defaultTimeToLive: 63072000,
 *     pointInTimeRecoveryEnabled: true,
 *     tags: [
 *         {
 *             key: "tag1",
 *             value: "val1",
 *         },
 *         {
 *             key: "tag2",
 *             value: "val2",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "id",
 *         columnType: "ASCII",
 *     }],
 *     clusteringKeyColumns: [{
 *         column: {
 *             columnName: "division",
 *             columnType: "ASCII",
 *         },
 *         orderBy: aws_native.cassandra.TableClusteringKeyColumnOrderBy.Asc,
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 *     billingMode: {
 *         mode: aws_native.cassandra.TableMode.Provisioned,
 *         provisionedThroughput: {
 *             readCapacityUnits: 5,
 *             writeCapacityUnits: 5,
 *         },
 *     },
 *     clientSideTimestampsEnabled: true,
 *     defaultTimeToLive: 63072000,
 *     pointInTimeRecoveryEnabled: true,
 *     tags: [
 *         {
 *             key: "tag1",
 *             value: "val1",
 *         },
 *         {
 *             key: "tag2",
 *             value: "val2",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "id",
 *         columnType: "ASCII",
 *     }],
 *     clusteringKeyColumns: [{
 *         column: {
 *             columnName: "division",
 *             columnType: "ASCII",
 *         },
 *         orderBy: aws_native.cassandra.TableClusteringKeyColumnOrderBy.Asc,
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 *     billingMode: {
 *         mode: aws_native.cassandra.TableMode.Provisioned,
 *         provisionedThroughput: {
 *             readCapacityUnits: 5,
 *             writeCapacityUnits: 5,
 *         },
 *     },
 *     defaultTimeToLive: 63072000,
 *     encryptionSpecification: {
 *         encryptionType: aws_native.cassandra.TableEncryptionType.CustomerManagedKmsKey,
 *         kmsKeyIdentifier: "arn:aws:kms:eu-west-1:5555555555555:key/11111111-1111-111-1111-111111111111",
 *     },
 *     pointInTimeRecoveryEnabled: true,
 *     tags: [
 *         {
 *             key: "tag1",
 *             value: "val1",
 *         },
 *         {
 *             key: "tag2",
 *             value: "val2",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myNewTable = new aws_native.cassandra.Table("myNewTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "id",
 *         columnType: "ASCII",
 *     }],
 *     clusteringKeyColumns: [{
 *         column: {
 *             columnName: "division",
 *             columnType: "ASCII",
 *         },
 *         orderBy: aws_native.cassandra.TableClusteringKeyColumnOrderBy.Asc,
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 *     billingMode: {
 *         mode: aws_native.cassandra.TableMode.Provisioned,
 *         provisionedThroughput: {
 *             readCapacityUnits: 5,
 *             writeCapacityUnits: 5,
 *         },
 *     },
 *     defaultTimeToLive: 63072000,
 *     encryptionSpecification: {
 *         encryptionType: aws_native.cassandra.TableEncryptionType.CustomerManagedKmsKey,
 *         kmsKeyIdentifier: "arn:aws:kms:eu-west-1:5555555555555:key/11111111-1111-111-1111-111111111111",
 *     },
 *     pointInTimeRecoveryEnabled: true,
 *     tags: [
 *         {
 *             key: "tag1",
 *             value: "val1",
 *         },
 *         {
 *             key: "tag2",
 *             value: "val2",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myTable = new aws_native.cassandra.Table("myTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myTable = new aws_native.cassandra.Table("myTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myTable = new aws_native.cassandra.Table("myTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myTable = new aws_native.cassandra.Table("myTable", {
 *     keyspaceName: "my_keyspace",
 *     tableName: "my_table",
 *     partitionKeyColumns: [{
 *         columnName: "Message",
 *         columnType: "ASCII",
 *     }],
 *     regularColumns: [
 *         {
 *             columnName: "name",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "region",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "project",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "role",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "pay_scale",
 *             columnType: "TEXT",
 *         },
 *         {
 *             columnName: "vacation_hrs",
 *             columnType: "FLOAT",
 *         },
 *         {
 *             columnName: "manager_id",
 *             columnType: "TEXT",
 *         },
 *     ],
 * });
 *
 * ```
 */
class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Table(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }
    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.keyspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyspaceName'");
            }
            if ((!args || args.partitionKeyColumns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionKeyColumns'");
            }
            resourceInputs["autoScalingSpecifications"] = args ? args.autoScalingSpecifications : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["clientSideTimestampsEnabled"] = args ? args.clientSideTimestampsEnabled : undefined;
            resourceInputs["clusteringKeyColumns"] = args ? args.clusteringKeyColumns : undefined;
            resourceInputs["defaultTimeToLive"] = args ? args.defaultTimeToLive : undefined;
            resourceInputs["encryptionSpecification"] = args ? args.encryptionSpecification : undefined;
            resourceInputs["keyspaceName"] = args ? args.keyspaceName : undefined;
            resourceInputs["partitionKeyColumns"] = args ? args.partitionKeyColumns : undefined;
            resourceInputs["pointInTimeRecoveryEnabled"] = args ? args.pointInTimeRecoveryEnabled : undefined;
            resourceInputs["regularColumns"] = args ? args.regularColumns : undefined;
            resourceInputs["replicaSpecifications"] = args ? args.replicaSpecifications : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        else {
            resourceInputs["autoScalingSpecifications"] = undefined /*out*/;
            resourceInputs["billingMode"] = undefined /*out*/;
            resourceInputs["clientSideTimestampsEnabled"] = undefined /*out*/;
            resourceInputs["clusteringKeyColumns"] = undefined /*out*/;
            resourceInputs["defaultTimeToLive"] = undefined /*out*/;
            resourceInputs["encryptionSpecification"] = undefined /*out*/;
            resourceInputs["keyspaceName"] = undefined /*out*/;
            resourceInputs["partitionKeyColumns"] = undefined /*out*/;
            resourceInputs["pointInTimeRecoveryEnabled"] = undefined /*out*/;
            resourceInputs["regularColumns"] = undefined /*out*/;
            resourceInputs["replicaSpecifications"] = undefined /*out*/;
            resourceInputs["tableName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clientSideTimestampsEnabled", "clusteringKeyColumns[*]", "keyspaceName", "partitionKeyColumns[*]", "tableName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Table = Table;
/** @internal */
Table.__pulumiType = 'aws-native:cassandra:Table';
//# sourceMappingURL=table.js.map