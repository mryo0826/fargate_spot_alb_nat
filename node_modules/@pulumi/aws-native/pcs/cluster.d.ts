import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * AWS::PCS::Cluster resource creates an AWS PCS cluster.
 */
export declare class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster;
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Cluster;
    /**
     * The unique Amazon Resource Name (ARN) of the cluster.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The generated unique ID of the cluster.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * The list of endpoints available for interaction with the scheduler.
     */
    readonly endpoints: pulumi.Output<outputs.pcs.ClusterEndpoint[]>;
    /**
     * The list of errors that occurred during cluster provisioning.
     */
    readonly errorInfo: pulumi.Output<outputs.pcs.ClusterErrorInfo[]>;
    /**
     * The name that identifies the cluster.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The networking configuration for the cluster's control plane.
     */
    readonly networking: pulumi.Output<outputs.pcs.NetworkingProperties>;
    /**
     * The cluster management and job scheduling software associated with the cluster.
     */
    readonly scheduler: pulumi.Output<outputs.pcs.SchedulerProperties>;
    /**
     * The size of the cluster.
     */
    readonly size: pulumi.Output<enums.pcs.ClusterSize>;
    /**
     * Additional options related to the Slurm scheduler.
     */
    readonly slurmConfiguration: pulumi.Output<outputs.pcs.SlurmConfigurationProperties | undefined>;
    /**
     * The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
     */
    readonly status: pulumi.Output<enums.pcs.ClusterStatus>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The name that identifies the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The networking configuration for the cluster's control plane.
     */
    networking: pulumi.Input<inputs.pcs.NetworkingPropertiesArgs>;
    /**
     * The cluster management and job scheduling software associated with the cluster.
     */
    scheduler: pulumi.Input<inputs.pcs.SchedulerPropertiesArgs>;
    /**
     * The size of the cluster.
     */
    size: pulumi.Input<enums.pcs.ClusterSize>;
    /**
     * Additional options related to the Slurm scheduler.
     */
    slurmConfiguration?: pulumi.Input<inputs.pcs.SlurmConfigurationPropertiesArgs>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
