import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * AWS::PCS::Queue resource creates an AWS PCS queue.
 */
export declare class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Queue;
    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Queue;
    /**
     * The unique Amazon Resource Name (ARN) of the queue.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The generated unique ID of the queue.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * The ID of the cluster of the queue.
     */
    readonly clusterId: pulumi.Output<string>;
    /**
     * The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
     */
    readonly computeNodeGroupConfigurations: pulumi.Output<outputs.pcs.QueueComputeNodeGroupConfiguration[] | undefined>;
    /**
     * The list of errors that occurred during queue provisioning.
     */
    readonly errorInfo: pulumi.Output<outputs.pcs.QueueErrorInfo[]>;
    /**
     * The name that identifies the queue.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
     */
    readonly status: pulumi.Output<enums.pcs.QueueStatus>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    /**
     * The ID of the cluster of the queue.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
     */
    computeNodeGroupConfigurations?: pulumi.Input<pulumi.Input<inputs.pcs.QueueComputeNodeGroupConfigurationArgs>[]>;
    /**
     * The name that identifies the queue.
     */
    name?: pulumi.Input<string>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
