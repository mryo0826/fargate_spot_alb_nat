"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeySigningKey = exports.HostedZone = exports.HealthCheck = exports.getKeySigningKeyOutput = exports.getKeySigningKey = exports.getHostedZoneOutput = exports.getHostedZone = exports.getHealthCheckOutput = exports.getHealthCheck = exports.getCidrCollectionOutput = exports.getCidrCollection = exports.Dnssec = exports.CidrCollection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CidrCollection = null;
utilities.lazyLoad(exports, ["CidrCollection"], () => require("./cidrCollection"));
exports.Dnssec = null;
utilities.lazyLoad(exports, ["Dnssec"], () => require("./dnssec"));
exports.getCidrCollection = null;
exports.getCidrCollectionOutput = null;
utilities.lazyLoad(exports, ["getCidrCollection", "getCidrCollectionOutput"], () => require("./getCidrCollection"));
exports.getHealthCheck = null;
exports.getHealthCheckOutput = null;
utilities.lazyLoad(exports, ["getHealthCheck", "getHealthCheckOutput"], () => require("./getHealthCheck"));
exports.getHostedZone = null;
exports.getHostedZoneOutput = null;
utilities.lazyLoad(exports, ["getHostedZone", "getHostedZoneOutput"], () => require("./getHostedZone"));
exports.getKeySigningKey = null;
exports.getKeySigningKeyOutput = null;
utilities.lazyLoad(exports, ["getKeySigningKey", "getKeySigningKeyOutput"], () => require("./getKeySigningKey"));
exports.HealthCheck = null;
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));
exports.HostedZone = null;
utilities.lazyLoad(exports, ["HostedZone"], () => require("./hostedZone"));
exports.KeySigningKey = null;
utilities.lazyLoad(exports, ["KeySigningKey"], () => require("./keySigningKey"));
// Export enums:
__exportStar(require("../types/enums/route53"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:route53:CidrCollection":
                return new exports.CidrCollection(name, undefined, { urn });
            case "aws-native:route53:Dnssec":
                return new exports.Dnssec(name, undefined, { urn });
            case "aws-native:route53:HealthCheck":
                return new exports.HealthCheck(name, undefined, { urn });
            case "aws-native:route53:HostedZone":
                return new exports.HostedZone(name, undefined, { urn });
            case "aws-native:route53:KeySigningKey":
                return new exports.KeySigningKey(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "route53", _module);
//# sourceMappingURL=index.js.map