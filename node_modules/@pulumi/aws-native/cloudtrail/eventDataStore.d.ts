import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events that you have logged on your account from the last 7 to 2557 or 3653 days (about seven or ten years) depending on the selected BillingMode.
 */
export declare class EventDataStore extends pulumi.CustomResource {
    /**
     * Get an existing EventDataStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventDataStore;
    /**
     * Returns true if the given object is an instance of EventDataStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EventDataStore;
    /**
     * The advanced event selectors that were used to select events for the data store.
     */
    readonly advancedEventSelectors: pulumi.Output<outputs.cloudtrail.EventDataStoreAdvancedEventSelector[] | undefined>;
    /**
     * The mode that the event data store will use to charge for event storage.
     */
    readonly billingMode: pulumi.Output<string | undefined>;
    /**
     * The timestamp of the event data store's creation.
     */
    readonly createdTimestamp: pulumi.Output<string>;
    /**
     * The ARN of the event data store.
     */
    readonly eventDataStoreArn: pulumi.Output<string>;
    /**
     * Indicates whether federation is enabled on an event data store.
     */
    readonly federationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of the role used for event data store federation.
     */
    readonly federationRoleArn: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the event data store is ingesting events.
     */
    readonly ingestionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
     */
    readonly insightSelectors: pulumi.Output<outputs.cloudtrail.EventDataStoreInsightSelector[] | undefined>;
    /**
     * Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
     */
    readonly insightsDestination: pulumi.Output<string | undefined>;
    /**
     * Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
     */
    readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
     */
    readonly multiRegionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the event data store.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * Indicates that an event data store is collecting logged events for an organization.
     */
    readonly organizationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The retention period, in days.
     */
    readonly retentionPeriod: pulumi.Output<number | undefined>;
    /**
     * The status of an event data store. Values are STARTING_INGESTION, ENABLED, STOPPING_INGESTION, STOPPED_INGESTION and PENDING_DELETION.
     */
    readonly status: pulumi.Output<string>;
    /**
     * A list of tags.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Indicates whether the event data store is protected from termination.
     */
    readonly terminationProtectionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
     */
    readonly updatedTimestamp: pulumi.Output<string>;
    /**
     * Create a EventDataStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventDataStoreArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a EventDataStore resource.
 */
export interface EventDataStoreArgs {
    /**
     * The advanced event selectors that were used to select events for the data store.
     */
    advancedEventSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.EventDataStoreAdvancedEventSelectorArgs>[]>;
    /**
     * The mode that the event data store will use to charge for event storage.
     */
    billingMode?: pulumi.Input<string>;
    /**
     * Indicates whether federation is enabled on an event data store.
     */
    federationEnabled?: pulumi.Input<boolean>;
    /**
     * The ARN of the role used for event data store federation.
     */
    federationRoleArn?: pulumi.Input<string>;
    /**
     * Indicates whether the event data store is ingesting events.
     */
    ingestionEnabled?: pulumi.Input<boolean>;
    /**
     * Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
     */
    insightSelectors?: pulumi.Input<pulumi.Input<inputs.cloudtrail.EventDataStoreInsightSelectorArgs>[]>;
    /**
     * Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
     */
    insightsDestination?: pulumi.Input<string>;
    /**
     * Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
     */
    multiRegionEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the event data store.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates that an event data store is collecting logged events for an organization.
     */
    organizationEnabled?: pulumi.Input<boolean>;
    /**
     * The retention period, in days.
     */
    retentionPeriod?: pulumi.Input<number>;
    /**
     * A list of tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Indicates whether the event data store is protected from termination.
     */
    terminationProtectionEnabled?: pulumi.Input<boolean>;
}
