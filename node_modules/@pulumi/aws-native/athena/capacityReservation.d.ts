import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::Athena::CapacityReservation
 */
export declare class CapacityReservation extends pulumi.CustomResource {
    /**
     * Get an existing CapacityReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CapacityReservation;
    /**
     * Returns true if the given object is an instance of CapacityReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is CapacityReservation;
    /**
     * The number of DPUs Athena has provisioned and allocated for the reservation
     */
    readonly allocatedDpus: pulumi.Output<number>;
    /**
     * The ARN of the capacity reservation.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Assigns Athena workgroups (and hence their queries) to capacity reservations. A capacity reservation can have only one capacity assignment configuration, but the capacity assignment configuration can be made up of multiple individual assignments. Each assignment specifies how Athena queries can consume capacity from the capacity reservation that their workgroup is mapped to.
     */
    readonly capacityAssignmentConfiguration: pulumi.Output<outputs.athena.CapacityReservationCapacityAssignmentConfiguration | undefined>;
    /**
     * The date and time the reservation was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * The timestamp when the last successful allocated was made
     */
    readonly lastSuccessfulAllocationTime: pulumi.Output<string>;
    /**
     * The reservation name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The status of the reservation.
     */
    readonly status: pulumi.Output<enums.athena.CapacityReservationStatus>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The number of DPUs to request to be allocated to the reservation.
     */
    readonly targetDpus: pulumi.Output<number>;
    /**
     * Create a CapacityReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapacityReservationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a CapacityReservation resource.
 */
export interface CapacityReservationArgs {
    /**
     * Assigns Athena workgroups (and hence their queries) to capacity reservations. A capacity reservation can have only one capacity assignment configuration, but the capacity assignment configuration can be made up of multiple individual assignments. Each assignment specifies how Athena queries can consume capacity from the capacity reservation that their workgroup is mapped to.
     */
    capacityAssignmentConfiguration?: pulumi.Input<inputs.athena.CapacityReservationCapacityAssignmentConfigurationArgs>;
    /**
     * The reservation name.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The number of DPUs to request to be allocated to the reservation.
     */
    targetDpus: pulumi.Input<number>;
}
