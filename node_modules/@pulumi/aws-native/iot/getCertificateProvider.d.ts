import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Use the AWS::IoT::CertificateProvider resource to declare an AWS IoT Certificate Provider.
 */
export declare function getCertificateProvider(args: GetCertificateProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateProviderResult>;
export interface GetCertificateProviderArgs {
    /**
     * The name of the certificate provider.
     */
    certificateProviderName: string;
}
export interface GetCertificateProviderResult {
    /**
     * A list of the operations that the certificate provider will use to generate certificates. Valid value: `CreateCertificateFromCsr` .
     */
    readonly accountDefaultForOperations?: enums.iot.CertificateProviderOperation[];
    /**
     * Returns the Amazon Resource Name (ARN) for the certificate. For example:
     *
     * `{ "Fn::GetAtt": ["MyCertificateProvider", "Arn"] }`
     *
     * A value similar to the following is returned:
     *
     * `arn:aws:iot:ap-southeast-2:123456789012:certprovider/my-certificate-provider`
     */
    readonly arn?: string;
    /**
     * The ARN of the Lambda function.
     */
    readonly lambdaFunctionArn?: string;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Use the AWS::IoT::CertificateProvider resource to declare an AWS IoT Certificate Provider.
 */
export declare function getCertificateProviderOutput(args: GetCertificateProviderOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCertificateProviderResult>;
export interface GetCertificateProviderOutputArgs {
    /**
     * The name of the certificate provider.
     */
    certificateProviderName: pulumi.Input<string>;
}
