import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Create and manage a Domain Configuration
 */
export declare class DomainConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing DomainConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DomainConfiguration;
    /**
     * Returns true if the given object is an instance of DomainConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DomainConfiguration;
    /**
     * An enumerated string that speciﬁes the application-layer protocol.
     */
    readonly applicationProtocol: pulumi.Output<enums.iot.DomainConfigurationApplicationProtocol | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the domain configuration.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * An enumerated string that speciﬁes the authentication type.
     */
    readonly authenticationType: pulumi.Output<enums.iot.DomainConfigurationAuthenticationType | undefined>;
    /**
     * An object that specifies the authorization service for a domain.
     */
    readonly authorizerConfig: pulumi.Output<outputs.iot.DomainConfigurationAuthorizerConfig | undefined>;
    /**
     * An object that speciﬁes the client certificate conﬁguration for a domain.
     */
    readonly clientCertificateConfig: pulumi.Output<outputs.iot.DomainConfigurationClientCertificateConfig | undefined>;
    /**
     * The name of the domain configuration. This value must be unique to a region.
     */
    readonly domainConfigurationName: pulumi.Output<string | undefined>;
    /**
     * The status to which the domain configuration should be updated.
     *
     * Valid values: `ENABLED` | `DISABLED`
     */
    readonly domainConfigurationStatus: pulumi.Output<enums.iot.DomainConfigurationStatus | undefined>;
    /**
     * The name of the domain.
     */
    readonly domainName: pulumi.Output<string | undefined>;
    /**
     * The type of service delivered by the domain.
     */
    readonly domainType: pulumi.Output<enums.iot.DomainConfigurationDomainType>;
    /**
     * The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
     */
    readonly serverCertificateArns: pulumi.Output<string[] | undefined>;
    /**
     * The server certificate configuration.
     *
     * For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
     */
    readonly serverCertificateConfig: pulumi.Output<outputs.iot.DomainConfigurationServerCertificateConfig | undefined>;
    /**
     * The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
     */
    readonly serverCertificates: pulumi.Output<outputs.iot.DomainConfigurationServerCertificateSummary[]>;
    /**
     * The type of service delivered by the endpoint.
     *
     * > AWS IoT Core currently supports only the `DATA` service type.
     */
    readonly serviceType: pulumi.Output<enums.iot.DomainConfigurationServiceType | undefined>;
    /**
     * Metadata which can be used to manage the domain configuration.
     *
     * > For URI Request parameters use format: ...key1=value1&key2=value2...
     * >
     * > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
     * >
     * > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * An object that specifies the TLS configuration for a domain.
     */
    readonly tlsConfig: pulumi.Output<outputs.iot.DomainConfigurationTlsConfig | undefined>;
    /**
     * The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
     */
    readonly validationCertificateArn: pulumi.Output<string | undefined>;
    /**
     * Create a DomainConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DomainConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DomainConfiguration resource.
 */
export interface DomainConfigurationArgs {
    /**
     * An enumerated string that speciﬁes the application-layer protocol.
     */
    applicationProtocol?: pulumi.Input<enums.iot.DomainConfigurationApplicationProtocol>;
    /**
     * An enumerated string that speciﬁes the authentication type.
     */
    authenticationType?: pulumi.Input<enums.iot.DomainConfigurationAuthenticationType>;
    /**
     * An object that specifies the authorization service for a domain.
     */
    authorizerConfig?: pulumi.Input<inputs.iot.DomainConfigurationAuthorizerConfigArgs>;
    /**
     * An object that speciﬁes the client certificate conﬁguration for a domain.
     */
    clientCertificateConfig?: pulumi.Input<inputs.iot.DomainConfigurationClientCertificateConfigArgs>;
    /**
     * The name of the domain configuration. This value must be unique to a region.
     */
    domainConfigurationName?: pulumi.Input<string>;
    /**
     * The status to which the domain configuration should be updated.
     *
     * Valid values: `ENABLED` | `DISABLED`
     */
    domainConfigurationStatus?: pulumi.Input<enums.iot.DomainConfigurationStatus>;
    /**
     * The name of the domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
     */
    serverCertificateArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The server certificate configuration.
     *
     * For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
     */
    serverCertificateConfig?: pulumi.Input<inputs.iot.DomainConfigurationServerCertificateConfigArgs>;
    /**
     * The type of service delivered by the endpoint.
     *
     * > AWS IoT Core currently supports only the `DATA` service type.
     */
    serviceType?: pulumi.Input<enums.iot.DomainConfigurationServiceType>;
    /**
     * Metadata which can be used to manage the domain configuration.
     *
     * > For URI Request parameters use format: ...key1=value1&key2=value2...
     * >
     * > For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..."
     * >
     * > For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * An object that specifies the TLS configuration for a domain.
     */
    tlsConfig?: pulumi.Input<inputs.iot.DomainConfigurationTlsConfigArgs>;
    /**
     * The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
     */
    validationCertificateArn?: pulumi.Input<string>;
}
