import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::Cognito::UserPoolDomain
 */
export declare class UserPoolDomain extends pulumi.CustomResource {
    /**
     * Get an existing UserPoolDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): UserPoolDomain;
    /**
     * Returns true if the given object is an instance of UserPoolDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UserPoolDomain;
    /**
     * The resource ID.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
     */
    readonly cloudFrontDistribution: pulumi.Output<string>;
    /**
     * The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
     *
     * When you create a custom domain, the passkey RP ID defaults to the custom domain. If you had a prefix domain active, this will cause passkey integration for your prefix domain to stop working due to a mismatch in RP ID. To keep the prefix domain passkey integration working, you can explicitly set RP ID to the prefix domain. Update the RP ID in a [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) request.
     */
    readonly customDomainConfig: pulumi.Output<outputs.cognito.UserPoolDomainCustomDomainConfigType | undefined>;
    /**
     * The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. One example might be `auth.example.com` .
     *
     * This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.
     */
    readonly domain: pulumi.Output<string>;
    /**
     * A version number that indicates the state of managed login for your domain. Version `1` is hosted UI (classic). Version `2` is the newer managed login with the branding designer. For more information, see [Managed login](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html) .
     */
    readonly managedLoginVersion: pulumi.Output<number | undefined>;
    /**
     * The ID of the user pool that is associated with the custom domain whose certificate you're updating.
     */
    readonly userPoolId: pulumi.Output<string>;
    /**
     * Create a UserPoolDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPoolDomainArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a UserPoolDomain resource.
 */
export interface UserPoolDomainArgs {
    /**
     * The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM.
     *
     * When you create a custom domain, the passkey RP ID defaults to the custom domain. If you had a prefix domain active, this will cause passkey integration for your prefix domain to stop working due to a mismatch in RP ID. To keep the prefix domain passkey integration working, you can explicitly set RP ID to the prefix domain. Update the RP ID in a [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) request.
     */
    customDomainConfig?: pulumi.Input<inputs.cognito.UserPoolDomainCustomDomainConfigTypeArgs>;
    /**
     * The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. One example might be `auth.example.com` .
     *
     * This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.
     */
    domain: pulumi.Input<string>;
    /**
     * A version number that indicates the state of managed login for your domain. Version `1` is hosted UI (classic). Version `2` is the newer managed login with the branding designer. For more information, see [Managed login](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html) .
     */
    managedLoginVersion?: pulumi.Input<number>;
    /**
     * The ID of the user pool that is associated with the custom domain whose certificate you're updating.
     */
    userPoolId: pulumi.Input<string>;
}
