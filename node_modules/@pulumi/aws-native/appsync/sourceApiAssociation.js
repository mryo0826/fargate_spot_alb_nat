"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceApiAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::AppSync::SourceApiAssociation
 */
class SourceApiAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SourceApiAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new SourceApiAssociation(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceApiAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceApiAssociation.__pulumiType;
    }
    /**
     * Create a SourceApiAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["mergedApiIdentifier"] = args ? args.mergedApiIdentifier : undefined;
            resourceInputs["sourceApiAssociationConfig"] = args ? args.sourceApiAssociationConfig : undefined;
            resourceInputs["sourceApiIdentifier"] = args ? args.sourceApiIdentifier : undefined;
            resourceInputs["associationArn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["lastSuccessfulMergeDate"] = undefined /*out*/;
            resourceInputs["mergedApiArn"] = undefined /*out*/;
            resourceInputs["mergedApiId"] = undefined /*out*/;
            resourceInputs["sourceApiArn"] = undefined /*out*/;
            resourceInputs["sourceApiAssociationStatus"] = undefined /*out*/;
            resourceInputs["sourceApiAssociationStatusDetail"] = undefined /*out*/;
            resourceInputs["sourceApiId"] = undefined /*out*/;
        }
        else {
            resourceInputs["associationArn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["lastSuccessfulMergeDate"] = undefined /*out*/;
            resourceInputs["mergedApiArn"] = undefined /*out*/;
            resourceInputs["mergedApiId"] = undefined /*out*/;
            resourceInputs["mergedApiIdentifier"] = undefined /*out*/;
            resourceInputs["sourceApiArn"] = undefined /*out*/;
            resourceInputs["sourceApiAssociationConfig"] = undefined /*out*/;
            resourceInputs["sourceApiAssociationStatus"] = undefined /*out*/;
            resourceInputs["sourceApiAssociationStatusDetail"] = undefined /*out*/;
            resourceInputs["sourceApiId"] = undefined /*out*/;
            resourceInputs["sourceApiIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["mergedApiIdentifier", "sourceApiIdentifier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SourceApiAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SourceApiAssociation = SourceApiAssociation;
/** @internal */
SourceApiAssociation.__pulumiType = 'aws-native:appsync:SourceApiAssociation';
//# sourceMappingURL=sourceApiAssociation.js.map