import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::MSK::Cluster
 */
export declare class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster;
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Cluster;
    readonly arn: pulumi.Output<string>;
    readonly brokerNodeGroupInfo: pulumi.Output<outputs.msk.ClusterBrokerNodeGroupInfo>;
    readonly clientAuthentication: pulumi.Output<outputs.msk.ClusterClientAuthentication | undefined>;
    readonly clusterName: pulumi.Output<string>;
    readonly configurationInfo: pulumi.Output<outputs.msk.ClusterConfigurationInfo | undefined>;
    /**
     * The current version of the MSK cluster
     */
    readonly currentVersion: pulumi.Output<string | undefined>;
    readonly encryptionInfo: pulumi.Output<outputs.msk.ClusterEncryptionInfo | undefined>;
    readonly enhancedMonitoring: pulumi.Output<enums.msk.ClusterEnhancedMonitoring | undefined>;
    readonly kafkaVersion: pulumi.Output<string>;
    readonly loggingInfo: pulumi.Output<outputs.msk.ClusterLoggingInfo | undefined>;
    readonly numberOfBrokerNodes: pulumi.Output<number>;
    readonly openMonitoring: pulumi.Output<outputs.msk.ClusterOpenMonitoring | undefined>;
    readonly storageMode: pulumi.Output<enums.msk.ClusterStorageMode | undefined>;
    /**
     * A key-value pair to associate with a resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    brokerNodeGroupInfo: pulumi.Input<inputs.msk.ClusterBrokerNodeGroupInfoArgs>;
    clientAuthentication?: pulumi.Input<inputs.msk.ClusterClientAuthenticationArgs>;
    clusterName?: pulumi.Input<string>;
    configurationInfo?: pulumi.Input<inputs.msk.ClusterConfigurationInfoArgs>;
    /**
     * The current version of the MSK cluster
     */
    currentVersion?: pulumi.Input<string>;
    encryptionInfo?: pulumi.Input<inputs.msk.ClusterEncryptionInfoArgs>;
    enhancedMonitoring?: pulumi.Input<enums.msk.ClusterEnhancedMonitoring>;
    kafkaVersion: pulumi.Input<string>;
    loggingInfo?: pulumi.Input<inputs.msk.ClusterLoggingInfoArgs>;
    numberOfBrokerNodes: pulumi.Input<number>;
    openMonitoring?: pulumi.Input<inputs.msk.ClusterOpenMonitoringArgs>;
    storageMode?: pulumi.Input<enums.msk.ClusterStorageMode>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
