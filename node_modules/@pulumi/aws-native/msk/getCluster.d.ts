import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::MSK::Cluster
 */
export declare function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult>;
export interface GetClusterArgs {
    arn: string;
}
export interface GetClusterResult {
    readonly arn?: string;
    readonly brokerNodeGroupInfo?: outputs.msk.ClusterBrokerNodeGroupInfo;
    readonly clientAuthentication?: outputs.msk.ClusterClientAuthentication;
    readonly configurationInfo?: outputs.msk.ClusterConfigurationInfo;
    /**
     * The current version of the MSK cluster
     */
    readonly currentVersion?: string;
    readonly encryptionInfo?: outputs.msk.ClusterEncryptionInfo;
    readonly enhancedMonitoring?: enums.msk.ClusterEnhancedMonitoring;
    readonly kafkaVersion?: string;
    readonly loggingInfo?: outputs.msk.ClusterLoggingInfo;
    readonly numberOfBrokerNodes?: number;
    readonly openMonitoring?: outputs.msk.ClusterOpenMonitoring;
    readonly storageMode?: enums.msk.ClusterStorageMode;
    /**
     * A key-value pair to associate with a resource.
     */
    readonly tags?: {
        [key: string]: string;
    };
}
/**
 * Resource Type definition for AWS::MSK::Cluster
 */
export declare function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterResult>;
export interface GetClusterOutputArgs {
    arn: pulumi.Input<string>;
}
