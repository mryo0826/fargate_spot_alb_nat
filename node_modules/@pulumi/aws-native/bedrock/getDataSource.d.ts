import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Bedrock::DataSource Resource Type
 */
export declare function getDataSource(args: GetDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSourceResult>;
export interface GetDataSourceArgs {
    /**
     * Identifier for a resource.
     */
    dataSourceId: string;
    /**
     * The unique identifier of the knowledge base to which to add the data source.
     */
    knowledgeBaseId: string;
}
export interface GetDataSourceResult {
    /**
     * The time at which the data source was created.
     */
    readonly createdAt?: string;
    /**
     * The data deletion policy for the data source.
     */
    readonly dataDeletionPolicy?: enums.bedrock.DataSourceDataDeletionPolicy;
    /**
     * The connection configuration for the data source.
     */
    readonly dataSourceConfiguration?: outputs.bedrock.DataSourceConfiguration;
    /**
     * Identifier for a resource.
     */
    readonly dataSourceId?: string;
    /**
     * The status of the data source. The following statuses are possible:
     *
     * - Available – The data source has been created and is ready for ingestion into the knowledge base.
     * - Deleting – The data source is being deleted.
     */
    readonly dataSourceStatus?: enums.bedrock.DataSourceStatus;
    /**
     * Description of the Resource.
     */
    readonly description?: string;
    /**
     * The details of the failure reasons related to the data source.
     */
    readonly failureReasons?: string[];
    /**
     * The name of the data source.
     */
    readonly name?: string;
    /**
     * Contains details about the configuration of the server-side encryption.
     */
    readonly serverSideEncryptionConfiguration?: outputs.bedrock.DataSourceServerSideEncryptionConfiguration;
    /**
     * The time at which the knowledge base was last updated.
     */
    readonly updatedAt?: string;
    /**
     * Contains details about how to ingest the documents in the data source.
     */
    readonly vectorIngestionConfiguration?: outputs.bedrock.DataSourceVectorIngestionConfiguration;
}
/**
 * Definition of AWS::Bedrock::DataSource Resource Type
 */
export declare function getDataSourceOutput(args: GetDataSourceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDataSourceResult>;
export interface GetDataSourceOutputArgs {
    /**
     * Identifier for a resource.
     */
    dataSourceId: pulumi.Input<string>;
    /**
     * The unique identifier of the knowledge base to which to add the data source.
     */
    knowledgeBaseId: pulumi.Input<string>;
}
