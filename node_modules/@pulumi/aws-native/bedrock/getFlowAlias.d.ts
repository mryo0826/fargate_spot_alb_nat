import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Definition of AWS::Bedrock::FlowAlias Resource Type
 */
export declare function getFlowAlias(args: GetFlowAliasArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowAliasResult>;
export interface GetFlowAliasArgs {
    /**
     * Arn of the Flow Alias
     */
    arn: string;
    /**
     * Arn representation of the Flow
     */
    flowArn: string;
}
export interface GetFlowAliasResult {
    /**
     * Arn of the Flow Alias
     */
    readonly arn?: string;
    /**
     * Time Stamp.
     */
    readonly createdAt?: string;
    /**
     * Description of the Resource.
     */
    readonly description?: string;
    /**
     * Identifier for a flow resource.
     */
    readonly flowId?: string;
    /**
     * Id for a Flow Alias generated at the server side.
     */
    readonly id?: string;
    /**
     * Name for a resource.
     */
    readonly name?: string;
    /**
     * Routing configuration for a Flow alias.
     */
    readonly routingConfiguration?: outputs.bedrock.FlowAliasRoutingConfigurationListItem[];
    /**
     * Metadata that you can assign to a resource as key-value pairs. For more information, see the following resources:
     *
     * - [Tag naming limits and requirements](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-conventions)
     * - [Tagging best practices](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-best-practices)
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * Time Stamp.
     */
    readonly updatedAt?: string;
}
/**
 * Definition of AWS::Bedrock::FlowAlias Resource Type
 */
export declare function getFlowAliasOutput(args: GetFlowAliasOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFlowAliasResult>;
export interface GetFlowAliasOutputArgs {
    /**
     * Arn of the Flow Alias
     */
    arn: pulumi.Input<string>;
    /**
     * Arn representation of the Flow
     */
    flowArn: pulumi.Input<string>;
}
