"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 */
class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Domain(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            resourceInputs["advancedSecurityOptions"] = args ? args.advancedSecurityOptions : undefined;
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["cognitoOptions"] = args ? args.cognitoOptions : undefined;
            resourceInputs["domainEndpointOptions"] = args ? args.domainEndpointOptions : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["ebsOptions"] = args ? args.ebsOptions : undefined;
            resourceInputs["encryptionAtRestOptions"] = args ? args.encryptionAtRestOptions : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["identityCenterOptions"] = args ? args.identityCenterOptions : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["logPublishingOptions"] = args ? args.logPublishingOptions : undefined;
            resourceInputs["nodeToNodeEncryptionOptions"] = args ? args.nodeToNodeEncryptionOptions : undefined;
            resourceInputs["offPeakWindowOptions"] = args ? args.offPeakWindowOptions : undefined;
            resourceInputs["skipShardMigrationWait"] = args ? args.skipShardMigrationWait : undefined;
            resourceInputs["snapshotOptions"] = args ? args.snapshotOptions : undefined;
            resourceInputs["softwareUpdateOptions"] = args ? args.softwareUpdateOptions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["domainArn"] = undefined /*out*/;
            resourceInputs["domainEndpoint"] = undefined /*out*/;
            resourceInputs["domainEndpointV2"] = undefined /*out*/;
            resourceInputs["domainEndpoints"] = undefined /*out*/;
            resourceInputs["serviceSoftwareOptions"] = undefined /*out*/;
        }
        else {
            resourceInputs["accessPolicies"] = undefined /*out*/;
            resourceInputs["advancedOptions"] = undefined /*out*/;
            resourceInputs["advancedSecurityOptions"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["clusterConfig"] = undefined /*out*/;
            resourceInputs["cognitoOptions"] = undefined /*out*/;
            resourceInputs["domainArn"] = undefined /*out*/;
            resourceInputs["domainEndpoint"] = undefined /*out*/;
            resourceInputs["domainEndpointOptions"] = undefined /*out*/;
            resourceInputs["domainEndpointV2"] = undefined /*out*/;
            resourceInputs["domainEndpoints"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["ebsOptions"] = undefined /*out*/;
            resourceInputs["encryptionAtRestOptions"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["identityCenterOptions"] = undefined /*out*/;
            resourceInputs["ipAddressType"] = undefined /*out*/;
            resourceInputs["logPublishingOptions"] = undefined /*out*/;
            resourceInputs["nodeToNodeEncryptionOptions"] = undefined /*out*/;
            resourceInputs["offPeakWindowOptions"] = undefined /*out*/;
            resourceInputs["serviceSoftwareOptions"] = undefined /*out*/;
            resourceInputs["skipShardMigrationWait"] = undefined /*out*/;
            resourceInputs["snapshotOptions"] = undefined /*out*/;
            resourceInputs["softwareUpdateOptions"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcOptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws-native:opensearchservice:Domain';
//# sourceMappingURL=domain.js.map