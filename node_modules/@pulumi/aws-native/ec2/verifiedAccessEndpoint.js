"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifiedAccessEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::EC2::VerifiedAccessEndpoint resource creates an AWS EC2 Verified Access Endpoint.
 */
class VerifiedAccessEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing VerifiedAccessEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new VerifiedAccessEndpoint(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VerifiedAccessEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VerifiedAccessEndpoint.__pulumiType;
    }
    /**
     * Create a VerifiedAccessEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationDomain'");
            }
            if ((!args || args.attachmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachmentType'");
            }
            if ((!args || args.domainCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainCertificateArn'");
            }
            if ((!args || args.endpointDomainPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointDomainPrefix'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.verifiedAccessGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'verifiedAccessGroupId'");
            }
            resourceInputs["applicationDomain"] = args ? args.applicationDomain : undefined;
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainCertificateArn"] = args ? args.domainCertificateArn : undefined;
            resourceInputs["endpointDomainPrefix"] = args ? args.endpointDomainPrefix : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["loadBalancerOptions"] = args ? args.loadBalancerOptions : undefined;
            resourceInputs["networkInterfaceOptions"] = args ? args.networkInterfaceOptions : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["policyEnabled"] = args ? args.policyEnabled : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["sseSpecification"] = args ? args.sseSpecification : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["verifiedAccessGroupId"] = args ? args.verifiedAccessGroupId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deviceValidationDomain"] = undefined /*out*/;
            resourceInputs["endpointDomain"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["verifiedAccessEndpointId"] = undefined /*out*/;
            resourceInputs["verifiedAccessInstanceId"] = undefined /*out*/;
        }
        else {
            resourceInputs["applicationDomain"] = undefined /*out*/;
            resourceInputs["attachmentType"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["deviceValidationDomain"] = undefined /*out*/;
            resourceInputs["domainCertificateArn"] = undefined /*out*/;
            resourceInputs["endpointDomain"] = undefined /*out*/;
            resourceInputs["endpointDomainPrefix"] = undefined /*out*/;
            resourceInputs["endpointType"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["loadBalancerOptions"] = undefined /*out*/;
            resourceInputs["networkInterfaceOptions"] = undefined /*out*/;
            resourceInputs["policyDocument"] = undefined /*out*/;
            resourceInputs["policyEnabled"] = undefined /*out*/;
            resourceInputs["securityGroupIds"] = undefined /*out*/;
            resourceInputs["sseSpecification"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["verifiedAccessEndpointId"] = undefined /*out*/;
            resourceInputs["verifiedAccessGroupId"] = undefined /*out*/;
            resourceInputs["verifiedAccessInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applicationDomain", "attachmentType", "domainCertificateArn", "endpointDomainPrefix", "endpointType", "loadBalancerOptions.loadBalancerArn", "networkInterfaceOptions.networkInterfaceId", "securityGroupIds[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VerifiedAccessEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VerifiedAccessEndpoint = VerifiedAccessEndpoint;
/** @internal */
VerifiedAccessEndpoint.__pulumiType = 'aws-native:ec2:VerifiedAccessEndpoint';
//# sourceMappingURL=verifiedAccessEndpoint.js.map