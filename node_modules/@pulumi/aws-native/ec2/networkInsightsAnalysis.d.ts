import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::EC2::NetworkInsightsAnalysis
 */
export declare class NetworkInsightsAnalysis extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInsightsAnalysis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NetworkInsightsAnalysis;
    /**
     * Returns true if the given object is an instance of NetworkInsightsAnalysis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NetworkInsightsAnalysis;
    /**
     * The member accounts that contain resources that the path can traverse.
     */
    readonly additionalAccounts: pulumi.Output<string[] | undefined>;
    /**
     * Potential intermediate components.
     */
    readonly alternatePathHints: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisAlternatePathHint[]>;
    /**
     * The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
     */
    readonly explanations: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisExplanation[]>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must traverse.
     */
    readonly filterInArns: pulumi.Output<string[] | undefined>;
    /**
     * The components in the path from source to destination.
     */
    readonly forwardPathComponents: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisPathComponent[]>;
    /**
     * The Amazon Resource Name (ARN) of the network insights analysis.
     */
    readonly networkInsightsAnalysisArn: pulumi.Output<string>;
    /**
     * The ID of the network insights analysis.
     */
    readonly networkInsightsAnalysisId: pulumi.Output<string>;
    /**
     * The ID of the path.
     */
    readonly networkInsightsPathId: pulumi.Output<string>;
    /**
     * Indicates whether the destination is reachable from the source.
     */
    readonly networkPathFound: pulumi.Output<boolean>;
    /**
     * The components in the path from destination to source.
     */
    readonly returnPathComponents: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisPathComponent[]>;
    /**
     * The time the analysis started.
     */
    readonly startDate: pulumi.Output<string>;
    /**
     * The status of the network insights analysis.
     */
    readonly status: pulumi.Output<enums.ec2.NetworkInsightsAnalysisStatus>;
    /**
     * The status message, if the status is `failed` .
     */
    readonly statusMessage: pulumi.Output<string>;
    /**
     * The IDs of potential intermediate accounts.
     */
    readonly suggestedAccounts: pulumi.Output<string[]>;
    /**
     * The tags to apply.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a NetworkInsightsAnalysis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInsightsAnalysisArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a NetworkInsightsAnalysis resource.
 */
export interface NetworkInsightsAnalysisArgs {
    /**
     * The member accounts that contain resources that the path can traverse.
     */
    additionalAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must traverse.
     */
    filterInArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the path.
     */
    networkInsightsPathId: pulumi.Input<string>;
    /**
     * The tags to apply.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
