"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransitGatewayMulticastGroupMemberOutput = exports.getTransitGatewayMulticastGroupMember = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::EC2::TransitGatewayMulticastGroupMember registers and deregisters members and sources (network interfaces) with the transit gateway multicast group
 */
function getTransitGatewayMulticastGroupMember(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ec2:getTransitGatewayMulticastGroupMember", {
        "groupIpAddress": args.groupIpAddress,
        "networkInterfaceId": args.networkInterfaceId,
        "transitGatewayMulticastDomainId": args.transitGatewayMulticastDomainId,
    }, opts);
}
exports.getTransitGatewayMulticastGroupMember = getTransitGatewayMulticastGroupMember;
/**
 * The AWS::EC2::TransitGatewayMulticastGroupMember registers and deregisters members and sources (network interfaces) with the transit gateway multicast group
 */
function getTransitGatewayMulticastGroupMemberOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:ec2:getTransitGatewayMulticastGroupMember", {
        "groupIpAddress": args.groupIpAddress,
        "networkInterfaceId": args.networkInterfaceId,
        "transitGatewayMulticastDomainId": args.transitGatewayMulticastDomainId,
    }, opts);
}
exports.getTransitGatewayMulticastGroupMemberOutput = getTransitGatewayMulticastGroupMemberOutput;
//# sourceMappingURL=getTransitGatewayMulticastGroupMember.js.map