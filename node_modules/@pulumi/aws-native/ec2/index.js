"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIpamPoolOutput = exports.getIpamPool = exports.getIpamAllocationOutput = exports.getIpamAllocation = exports.getIpamOutput = exports.getIpam = exports.getInternetGatewayOutput = exports.getInternetGateway = exports.getInstanceConnectEndpointOutput = exports.getInstanceConnectEndpoint = exports.getInstanceOutput = exports.getInstance = exports.getHostOutput = exports.getHost = exports.getGatewayRouteTableAssociationOutput = exports.getGatewayRouteTableAssociation = exports.getFlowLogOutput = exports.getFlowLog = exports.getEnclaveCertificateIamRoleAssociationOutput = exports.getEnclaveCertificateIamRoleAssociation = exports.getEipAssociationOutput = exports.getEipAssociation = exports.getEipOutput = exports.getEip = exports.getEgressOnlyInternetGatewayOutput = exports.getEgressOnlyInternetGateway = exports.getEc2FleetOutput = exports.getEc2Fleet = exports.getDhcpOptionsOutput = exports.getDhcpOptions = exports.getCustomerGatewayOutput = exports.getCustomerGateway = exports.getCarrierGatewayOutput = exports.getCarrierGateway = exports.getCapacityReservationFleetOutput = exports.getCapacityReservationFleet = exports.getCapacityReservationOutput = exports.getCapacityReservation = exports.GatewayRouteTableAssociation = exports.FlowLog = exports.EnclaveCertificateIamRoleAssociation = exports.EipAssociation = exports.Eip = exports.EgressOnlyInternetGateway = exports.Ec2Fleet = exports.DhcpOptions = exports.CustomerGateway = exports.CarrierGateway = exports.CapacityReservationFleet = exports.CapacityReservation = void 0;
exports.getSecurityGroupIngressOutput = exports.getSecurityGroupIngress = exports.getSecurityGroupEgressOutput = exports.getSecurityGroupEgress = exports.getSecurityGroupOutput = exports.getSecurityGroup = exports.getRouteTableOutput = exports.getRouteTable = exports.getRouteOutput = exports.getRoute = exports.getPrefixListOutput = exports.getPrefixList = exports.getPlacementGroupOutput = exports.getPlacementGroup = exports.getNetworkInterfaceAttachmentOutput = exports.getNetworkInterfaceAttachment = exports.getNetworkInterfaceOutput = exports.getNetworkInterface = exports.getNetworkInsightsPathOutput = exports.getNetworkInsightsPath = exports.getNetworkInsightsAnalysisOutput = exports.getNetworkInsightsAnalysis = exports.getNetworkInsightsAccessScopeAnalysisOutput = exports.getNetworkInsightsAccessScopeAnalysis = exports.getNetworkInsightsAccessScopeOutput = exports.getNetworkInsightsAccessScope = exports.getNetworkAclOutput = exports.getNetworkAcl = exports.getNatGatewayOutput = exports.getNatGateway = exports.getLocalGatewayRouteTableVpcAssociationOutput = exports.getLocalGatewayRouteTableVpcAssociation = exports.getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput = exports.getLocalGatewayRouteTableVirtualInterfaceGroupAssociation = exports.getLocalGatewayRouteTableOutput = exports.getLocalGatewayRouteTable = exports.getLocalGatewayRouteOutput = exports.getLocalGatewayRoute = exports.getLaunchTemplateOutput = exports.getLaunchTemplate = exports.getKeyPairOutput = exports.getKeyPair = exports.getIpamScopeOutput = exports.getIpamScope = exports.getIpamResourceDiscoveryAssociationOutput = exports.getIpamResourceDiscoveryAssociation = exports.getIpamResourceDiscoveryOutput = exports.getIpamResourceDiscovery = exports.getIpamPoolCidrOutput = exports.getIpamPoolCidr = void 0;
exports.getVpcBlockPublicAccessOptionsOutput = exports.getVpcBlockPublicAccessOptions = exports.getVpcBlockPublicAccessExclusionOutput = exports.getVpcBlockPublicAccessExclusion = exports.getVpcOutput = exports.getVpc = exports.getVolumeOutput = exports.getVolume = exports.getVerifiedAccessTrustProviderOutput = exports.getVerifiedAccessTrustProvider = exports.getVerifiedAccessInstanceOutput = exports.getVerifiedAccessInstance = exports.getVerifiedAccessGroupOutput = exports.getVerifiedAccessGroup = exports.getVerifiedAccessEndpointOutput = exports.getVerifiedAccessEndpoint = exports.getTransitGatewayVpcAttachmentOutput = exports.getTransitGatewayVpcAttachment = exports.getTransitGatewayRouteTableOutput = exports.getTransitGatewayRouteTable = exports.getTransitGatewayPeeringAttachmentOutput = exports.getTransitGatewayPeeringAttachment = exports.getTransitGatewayMulticastGroupSourceOutput = exports.getTransitGatewayMulticastGroupSource = exports.getTransitGatewayMulticastGroupMemberOutput = exports.getTransitGatewayMulticastGroupMember = exports.getTransitGatewayMulticastDomainAssociationOutput = exports.getTransitGatewayMulticastDomainAssociation = exports.getTransitGatewayMulticastDomainOutput = exports.getTransitGatewayMulticastDomain = exports.getTransitGatewayConnectOutput = exports.getTransitGatewayConnect = exports.getTransitGatewayAttachmentOutput = exports.getTransitGatewayAttachment = exports.getTransitGatewayOutput = exports.getTransitGateway = exports.getSubnetRouteTableAssociationOutput = exports.getSubnetRouteTableAssociation = exports.getSubnetNetworkAclAssociationOutput = exports.getSubnetNetworkAclAssociation = exports.getSubnetCidrBlockOutput = exports.getSubnetCidrBlock = exports.getSubnetOutput = exports.getSubnet = exports.getSpotFleetOutput = exports.getSpotFleet = exports.getSnapshotBlockPublicAccessOutput = exports.getSnapshotBlockPublicAccess = exports.getSecurityGroupVpcAssociationOutput = exports.getSecurityGroupVpcAssociation = void 0;
exports.SecurityGroupEgress = exports.SecurityGroup = exports.RouteTable = exports.Route = exports.PrefixList = exports.PlacementGroup = exports.NetworkPerformanceMetricSubscription = exports.NetworkInterfaceAttachment = exports.NetworkInterface = exports.NetworkInsightsPath = exports.NetworkInsightsAnalysis = exports.NetworkInsightsAccessScopeAnalysis = exports.NetworkInsightsAccessScope = exports.NetworkAcl = exports.NatGateway = exports.LocalGatewayRouteTableVpcAssociation = exports.LocalGatewayRouteTableVirtualInterfaceGroupAssociation = exports.LocalGatewayRouteTable = exports.LocalGatewayRoute = exports.LaunchTemplate = exports.KeyPair = exports.IpamScope = exports.IpamResourceDiscoveryAssociation = exports.IpamResourceDiscovery = exports.IpamPoolCidr = exports.IpamPool = exports.IpamAllocation = exports.Ipam = exports.InternetGateway = exports.InstanceConnectEndpoint = exports.Instance = exports.Host = exports.getVpnGatewayOutput = exports.getVpnGateway = exports.getVpnConnectionOutput = exports.getVpnConnection = exports.getVpcPeeringConnectionOutput = exports.getVpcPeeringConnection = exports.getVpcGatewayAttachmentOutput = exports.getVpcGatewayAttachment = exports.getVpcEndpointServicePermissionsOutput = exports.getVpcEndpointServicePermissions = exports.getVpcEndpointServiceOutput = exports.getVpcEndpointService = exports.getVpcEndpointConnectionNotificationOutput = exports.getVpcEndpointConnectionNotification = exports.getVpcEndpointOutput = exports.getVpcEndpoint = exports.getVpcCidrBlockOutput = exports.getVpcCidrBlock = void 0;
exports.VpnGateway = exports.VpnConnectionRoute = exports.VpnConnection = exports.VpcdhcpOptionsAssociation = exports.VpcPeeringConnection = exports.VpcGatewayAttachment = exports.VpcEndpointServicePermissions = exports.VpcEndpointService = exports.VpcEndpointConnectionNotification = exports.VpcEndpoint = exports.VpcCidrBlock = exports.VpcBlockPublicAccessOptions = exports.VpcBlockPublicAccessExclusion = exports.Vpc = exports.VolumeAttachment = exports.Volume = exports.VerifiedAccessTrustProvider = exports.VerifiedAccessInstance = exports.VerifiedAccessGroup = exports.VerifiedAccessEndpoint = exports.TransitGatewayVpcAttachment = exports.TransitGatewayRouteTablePropagation = exports.TransitGatewayRouteTableAssociation = exports.TransitGatewayRouteTable = exports.TransitGatewayRoute = exports.TransitGatewayPeeringAttachment = exports.TransitGatewayMulticastGroupSource = exports.TransitGatewayMulticastGroupMember = exports.TransitGatewayMulticastDomainAssociation = exports.TransitGatewayMulticastDomain = exports.TransitGatewayConnect = exports.TransitGatewayAttachment = exports.TransitGateway = exports.SubnetRouteTableAssociation = exports.SubnetNetworkAclAssociation = exports.SubnetCidrBlock = exports.Subnet = exports.SpotFleet = exports.SnapshotBlockPublicAccess = exports.SecurityGroupVpcAssociation = exports.SecurityGroupIngress = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CapacityReservation = null;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));
exports.CapacityReservationFleet = null;
utilities.lazyLoad(exports, ["CapacityReservationFleet"], () => require("./capacityReservationFleet"));
exports.CarrierGateway = null;
utilities.lazyLoad(exports, ["CarrierGateway"], () => require("./carrierGateway"));
exports.CustomerGateway = null;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));
exports.DhcpOptions = null;
utilities.lazyLoad(exports, ["DhcpOptions"], () => require("./dhcpOptions"));
exports.Ec2Fleet = null;
utilities.lazyLoad(exports, ["Ec2Fleet"], () => require("./ec2Fleet"));
exports.EgressOnlyInternetGateway = null;
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));
exports.Eip = null;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));
exports.EipAssociation = null;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));
exports.EnclaveCertificateIamRoleAssociation = null;
utilities.lazyLoad(exports, ["EnclaveCertificateIamRoleAssociation"], () => require("./enclaveCertificateIamRoleAssociation"));
exports.FlowLog = null;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));
exports.GatewayRouteTableAssociation = null;
utilities.lazyLoad(exports, ["GatewayRouteTableAssociation"], () => require("./gatewayRouteTableAssociation"));
exports.getCapacityReservation = null;
exports.getCapacityReservationOutput = null;
utilities.lazyLoad(exports, ["getCapacityReservation", "getCapacityReservationOutput"], () => require("./getCapacityReservation"));
exports.getCapacityReservationFleet = null;
exports.getCapacityReservationFleetOutput = null;
utilities.lazyLoad(exports, ["getCapacityReservationFleet", "getCapacityReservationFleetOutput"], () => require("./getCapacityReservationFleet"));
exports.getCarrierGateway = null;
exports.getCarrierGatewayOutput = null;
utilities.lazyLoad(exports, ["getCarrierGateway", "getCarrierGatewayOutput"], () => require("./getCarrierGateway"));
exports.getCustomerGateway = null;
exports.getCustomerGatewayOutput = null;
utilities.lazyLoad(exports, ["getCustomerGateway", "getCustomerGatewayOutput"], () => require("./getCustomerGateway"));
exports.getDhcpOptions = null;
exports.getDhcpOptionsOutput = null;
utilities.lazyLoad(exports, ["getDhcpOptions", "getDhcpOptionsOutput"], () => require("./getDhcpOptions"));
exports.getEc2Fleet = null;
exports.getEc2FleetOutput = null;
utilities.lazyLoad(exports, ["getEc2Fleet", "getEc2FleetOutput"], () => require("./getEc2Fleet"));
exports.getEgressOnlyInternetGateway = null;
exports.getEgressOnlyInternetGatewayOutput = null;
utilities.lazyLoad(exports, ["getEgressOnlyInternetGateway", "getEgressOnlyInternetGatewayOutput"], () => require("./getEgressOnlyInternetGateway"));
exports.getEip = null;
exports.getEipOutput = null;
utilities.lazyLoad(exports, ["getEip", "getEipOutput"], () => require("./getEip"));
exports.getEipAssociation = null;
exports.getEipAssociationOutput = null;
utilities.lazyLoad(exports, ["getEipAssociation", "getEipAssociationOutput"], () => require("./getEipAssociation"));
exports.getEnclaveCertificateIamRoleAssociation = null;
exports.getEnclaveCertificateIamRoleAssociationOutput = null;
utilities.lazyLoad(exports, ["getEnclaveCertificateIamRoleAssociation", "getEnclaveCertificateIamRoleAssociationOutput"], () => require("./getEnclaveCertificateIamRoleAssociation"));
exports.getFlowLog = null;
exports.getFlowLogOutput = null;
utilities.lazyLoad(exports, ["getFlowLog", "getFlowLogOutput"], () => require("./getFlowLog"));
exports.getGatewayRouteTableAssociation = null;
exports.getGatewayRouteTableAssociationOutput = null;
utilities.lazyLoad(exports, ["getGatewayRouteTableAssociation", "getGatewayRouteTableAssociationOutput"], () => require("./getGatewayRouteTableAssociation"));
exports.getHost = null;
exports.getHostOutput = null;
utilities.lazyLoad(exports, ["getHost", "getHostOutput"], () => require("./getHost"));
exports.getInstance = null;
exports.getInstanceOutput = null;
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
exports.getInstanceConnectEndpoint = null;
exports.getInstanceConnectEndpointOutput = null;
utilities.lazyLoad(exports, ["getInstanceConnectEndpoint", "getInstanceConnectEndpointOutput"], () => require("./getInstanceConnectEndpoint"));
exports.getInternetGateway = null;
exports.getInternetGatewayOutput = null;
utilities.lazyLoad(exports, ["getInternetGateway", "getInternetGatewayOutput"], () => require("./getInternetGateway"));
exports.getIpam = null;
exports.getIpamOutput = null;
utilities.lazyLoad(exports, ["getIpam", "getIpamOutput"], () => require("./getIpam"));
exports.getIpamAllocation = null;
exports.getIpamAllocationOutput = null;
utilities.lazyLoad(exports, ["getIpamAllocation", "getIpamAllocationOutput"], () => require("./getIpamAllocation"));
exports.getIpamPool = null;
exports.getIpamPoolOutput = null;
utilities.lazyLoad(exports, ["getIpamPool", "getIpamPoolOutput"], () => require("./getIpamPool"));
exports.getIpamPoolCidr = null;
exports.getIpamPoolCidrOutput = null;
utilities.lazyLoad(exports, ["getIpamPoolCidr", "getIpamPoolCidrOutput"], () => require("./getIpamPoolCidr"));
exports.getIpamResourceDiscovery = null;
exports.getIpamResourceDiscoveryOutput = null;
utilities.lazyLoad(exports, ["getIpamResourceDiscovery", "getIpamResourceDiscoveryOutput"], () => require("./getIpamResourceDiscovery"));
exports.getIpamResourceDiscoveryAssociation = null;
exports.getIpamResourceDiscoveryAssociationOutput = null;
utilities.lazyLoad(exports, ["getIpamResourceDiscoveryAssociation", "getIpamResourceDiscoveryAssociationOutput"], () => require("./getIpamResourceDiscoveryAssociation"));
exports.getIpamScope = null;
exports.getIpamScopeOutput = null;
utilities.lazyLoad(exports, ["getIpamScope", "getIpamScopeOutput"], () => require("./getIpamScope"));
exports.getKeyPair = null;
exports.getKeyPairOutput = null;
utilities.lazyLoad(exports, ["getKeyPair", "getKeyPairOutput"], () => require("./getKeyPair"));
exports.getLaunchTemplate = null;
exports.getLaunchTemplateOutput = null;
utilities.lazyLoad(exports, ["getLaunchTemplate", "getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));
exports.getLocalGatewayRoute = null;
exports.getLocalGatewayRouteOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRoute", "getLocalGatewayRouteOutput"], () => require("./getLocalGatewayRoute"));
exports.getLocalGatewayRouteTable = null;
exports.getLocalGatewayRouteTableOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTable", "getLocalGatewayRouteTableOutput"], () => require("./getLocalGatewayRouteTable"));
exports.getLocalGatewayRouteTableVirtualInterfaceGroupAssociation = null;
exports.getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTableVirtualInterfaceGroupAssociation", "getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput"], () => require("./getLocalGatewayRouteTableVirtualInterfaceGroupAssociation"));
exports.getLocalGatewayRouteTableVpcAssociation = null;
exports.getLocalGatewayRouteTableVpcAssociationOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTableVpcAssociation", "getLocalGatewayRouteTableVpcAssociationOutput"], () => require("./getLocalGatewayRouteTableVpcAssociation"));
exports.getNatGateway = null;
exports.getNatGatewayOutput = null;
utilities.lazyLoad(exports, ["getNatGateway", "getNatGatewayOutput"], () => require("./getNatGateway"));
exports.getNetworkAcl = null;
exports.getNetworkAclOutput = null;
utilities.lazyLoad(exports, ["getNetworkAcl", "getNetworkAclOutput"], () => require("./getNetworkAcl"));
exports.getNetworkInsightsAccessScope = null;
exports.getNetworkInsightsAccessScopeOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScope", "getNetworkInsightsAccessScopeOutput"], () => require("./getNetworkInsightsAccessScope"));
exports.getNetworkInsightsAccessScopeAnalysis = null;
exports.getNetworkInsightsAccessScopeAnalysisOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScopeAnalysis", "getNetworkInsightsAccessScopeAnalysisOutput"], () => require("./getNetworkInsightsAccessScopeAnalysis"));
exports.getNetworkInsightsAnalysis = null;
exports.getNetworkInsightsAnalysisOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAnalysis", "getNetworkInsightsAnalysisOutput"], () => require("./getNetworkInsightsAnalysis"));
exports.getNetworkInsightsPath = null;
exports.getNetworkInsightsPathOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsPath", "getNetworkInsightsPathOutput"], () => require("./getNetworkInsightsPath"));
exports.getNetworkInterface = null;
exports.getNetworkInterfaceOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterface", "getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));
exports.getNetworkInterfaceAttachment = null;
exports.getNetworkInterfaceAttachmentOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterfaceAttachment", "getNetworkInterfaceAttachmentOutput"], () => require("./getNetworkInterfaceAttachment"));
exports.getPlacementGroup = null;
exports.getPlacementGroupOutput = null;
utilities.lazyLoad(exports, ["getPlacementGroup", "getPlacementGroupOutput"], () => require("./getPlacementGroup"));
exports.getPrefixList = null;
exports.getPrefixListOutput = null;
utilities.lazyLoad(exports, ["getPrefixList", "getPrefixListOutput"], () => require("./getPrefixList"));
exports.getRoute = null;
exports.getRouteOutput = null;
utilities.lazyLoad(exports, ["getRoute", "getRouteOutput"], () => require("./getRoute"));
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
exports.getSecurityGroup = null;
exports.getSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroup", "getSecurityGroupOutput"], () => require("./getSecurityGroup"));
exports.getSecurityGroupEgress = null;
exports.getSecurityGroupEgressOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroupEgress", "getSecurityGroupEgressOutput"], () => require("./getSecurityGroupEgress"));
exports.getSecurityGroupIngress = null;
exports.getSecurityGroupIngressOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroupIngress", "getSecurityGroupIngressOutput"], () => require("./getSecurityGroupIngress"));
exports.getSecurityGroupVpcAssociation = null;
exports.getSecurityGroupVpcAssociationOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroupVpcAssociation", "getSecurityGroupVpcAssociationOutput"], () => require("./getSecurityGroupVpcAssociation"));
exports.getSnapshotBlockPublicAccess = null;
exports.getSnapshotBlockPublicAccessOutput = null;
utilities.lazyLoad(exports, ["getSnapshotBlockPublicAccess", "getSnapshotBlockPublicAccessOutput"], () => require("./getSnapshotBlockPublicAccess"));
exports.getSpotFleet = null;
exports.getSpotFleetOutput = null;
utilities.lazyLoad(exports, ["getSpotFleet", "getSpotFleetOutput"], () => require("./getSpotFleet"));
exports.getSubnet = null;
exports.getSubnetOutput = null;
utilities.lazyLoad(exports, ["getSubnet", "getSubnetOutput"], () => require("./getSubnet"));
exports.getSubnetCidrBlock = null;
exports.getSubnetCidrBlockOutput = null;
utilities.lazyLoad(exports, ["getSubnetCidrBlock", "getSubnetCidrBlockOutput"], () => require("./getSubnetCidrBlock"));
exports.getSubnetNetworkAclAssociation = null;
exports.getSubnetNetworkAclAssociationOutput = null;
utilities.lazyLoad(exports, ["getSubnetNetworkAclAssociation", "getSubnetNetworkAclAssociationOutput"], () => require("./getSubnetNetworkAclAssociation"));
exports.getSubnetRouteTableAssociation = null;
exports.getSubnetRouteTableAssociationOutput = null;
utilities.lazyLoad(exports, ["getSubnetRouteTableAssociation", "getSubnetRouteTableAssociationOutput"], () => require("./getSubnetRouteTableAssociation"));
exports.getTransitGateway = null;
exports.getTransitGatewayOutput = null;
utilities.lazyLoad(exports, ["getTransitGateway", "getTransitGatewayOutput"], () => require("./getTransitGateway"));
exports.getTransitGatewayAttachment = null;
exports.getTransitGatewayAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayAttachment", "getTransitGatewayAttachmentOutput"], () => require("./getTransitGatewayAttachment"));
exports.getTransitGatewayConnect = null;
exports.getTransitGatewayConnectOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayConnect", "getTransitGatewayConnectOutput"], () => require("./getTransitGatewayConnect"));
exports.getTransitGatewayMulticastDomain = null;
exports.getTransitGatewayMulticastDomainOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomain", "getTransitGatewayMulticastDomainOutput"], () => require("./getTransitGatewayMulticastDomain"));
exports.getTransitGatewayMulticastDomainAssociation = null;
exports.getTransitGatewayMulticastDomainAssociationOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomainAssociation", "getTransitGatewayMulticastDomainAssociationOutput"], () => require("./getTransitGatewayMulticastDomainAssociation"));
exports.getTransitGatewayMulticastGroupMember = null;
exports.getTransitGatewayMulticastGroupMemberOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupMember", "getTransitGatewayMulticastGroupMemberOutput"], () => require("./getTransitGatewayMulticastGroupMember"));
exports.getTransitGatewayMulticastGroupSource = null;
exports.getTransitGatewayMulticastGroupSourceOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupSource", "getTransitGatewayMulticastGroupSourceOutput"], () => require("./getTransitGatewayMulticastGroupSource"));
exports.getTransitGatewayPeeringAttachment = null;
exports.getTransitGatewayPeeringAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayPeeringAttachment", "getTransitGatewayPeeringAttachmentOutput"], () => require("./getTransitGatewayPeeringAttachment"));
exports.getTransitGatewayRouteTable = null;
exports.getTransitGatewayRouteTableOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTable", "getTransitGatewayRouteTableOutput"], () => require("./getTransitGatewayRouteTable"));
exports.getTransitGatewayVpcAttachment = null;
exports.getTransitGatewayVpcAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayVpcAttachment", "getTransitGatewayVpcAttachmentOutput"], () => require("./getTransitGatewayVpcAttachment"));
exports.getVerifiedAccessEndpoint = null;
exports.getVerifiedAccessEndpointOutput = null;
utilities.lazyLoad(exports, ["getVerifiedAccessEndpoint", "getVerifiedAccessEndpointOutput"], () => require("./getVerifiedAccessEndpoint"));
exports.getVerifiedAccessGroup = null;
exports.getVerifiedAccessGroupOutput = null;
utilities.lazyLoad(exports, ["getVerifiedAccessGroup", "getVerifiedAccessGroupOutput"], () => require("./getVerifiedAccessGroup"));
exports.getVerifiedAccessInstance = null;
exports.getVerifiedAccessInstanceOutput = null;
utilities.lazyLoad(exports, ["getVerifiedAccessInstance", "getVerifiedAccessInstanceOutput"], () => require("./getVerifiedAccessInstance"));
exports.getVerifiedAccessTrustProvider = null;
exports.getVerifiedAccessTrustProviderOutput = null;
utilities.lazyLoad(exports, ["getVerifiedAccessTrustProvider", "getVerifiedAccessTrustProviderOutput"], () => require("./getVerifiedAccessTrustProvider"));
exports.getVolume = null;
exports.getVolumeOutput = null;
utilities.lazyLoad(exports, ["getVolume", "getVolumeOutput"], () => require("./getVolume"));
exports.getVpc = null;
exports.getVpcOutput = null;
utilities.lazyLoad(exports, ["getVpc", "getVpcOutput"], () => require("./getVpc"));
exports.getVpcBlockPublicAccessExclusion = null;
exports.getVpcBlockPublicAccessExclusionOutput = null;
utilities.lazyLoad(exports, ["getVpcBlockPublicAccessExclusion", "getVpcBlockPublicAccessExclusionOutput"], () => require("./getVpcBlockPublicAccessExclusion"));
exports.getVpcBlockPublicAccessOptions = null;
exports.getVpcBlockPublicAccessOptionsOutput = null;
utilities.lazyLoad(exports, ["getVpcBlockPublicAccessOptions", "getVpcBlockPublicAccessOptionsOutput"], () => require("./getVpcBlockPublicAccessOptions"));
exports.getVpcCidrBlock = null;
exports.getVpcCidrBlockOutput = null;
utilities.lazyLoad(exports, ["getVpcCidrBlock", "getVpcCidrBlockOutput"], () => require("./getVpcCidrBlock"));
exports.getVpcEndpoint = null;
exports.getVpcEndpointOutput = null;
utilities.lazyLoad(exports, ["getVpcEndpoint", "getVpcEndpointOutput"], () => require("./getVpcEndpoint"));
exports.getVpcEndpointConnectionNotification = null;
exports.getVpcEndpointConnectionNotificationOutput = null;
utilities.lazyLoad(exports, ["getVpcEndpointConnectionNotification", "getVpcEndpointConnectionNotificationOutput"], () => require("./getVpcEndpointConnectionNotification"));
exports.getVpcEndpointService = null;
exports.getVpcEndpointServiceOutput = null;
utilities.lazyLoad(exports, ["getVpcEndpointService", "getVpcEndpointServiceOutput"], () => require("./getVpcEndpointService"));
exports.getVpcEndpointServicePermissions = null;
exports.getVpcEndpointServicePermissionsOutput = null;
utilities.lazyLoad(exports, ["getVpcEndpointServicePermissions", "getVpcEndpointServicePermissionsOutput"], () => require("./getVpcEndpointServicePermissions"));
exports.getVpcGatewayAttachment = null;
exports.getVpcGatewayAttachmentOutput = null;
utilities.lazyLoad(exports, ["getVpcGatewayAttachment", "getVpcGatewayAttachmentOutput"], () => require("./getVpcGatewayAttachment"));
exports.getVpcPeeringConnection = null;
exports.getVpcPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getVpcPeeringConnection", "getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));
exports.getVpnConnection = null;
exports.getVpnConnectionOutput = null;
utilities.lazyLoad(exports, ["getVpnConnection", "getVpnConnectionOutput"], () => require("./getVpnConnection"));
exports.getVpnGateway = null;
exports.getVpnGatewayOutput = null;
utilities.lazyLoad(exports, ["getVpnGateway", "getVpnGatewayOutput"], () => require("./getVpnGateway"));
exports.Host = null;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceConnectEndpoint = null;
utilities.lazyLoad(exports, ["InstanceConnectEndpoint"], () => require("./instanceConnectEndpoint"));
exports.InternetGateway = null;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));
exports.Ipam = null;
utilities.lazyLoad(exports, ["Ipam"], () => require("./ipam"));
exports.IpamAllocation = null;
utilities.lazyLoad(exports, ["IpamAllocation"], () => require("./ipamAllocation"));
exports.IpamPool = null;
utilities.lazyLoad(exports, ["IpamPool"], () => require("./ipamPool"));
exports.IpamPoolCidr = null;
utilities.lazyLoad(exports, ["IpamPoolCidr"], () => require("./ipamPoolCidr"));
exports.IpamResourceDiscovery = null;
utilities.lazyLoad(exports, ["IpamResourceDiscovery"], () => require("./ipamResourceDiscovery"));
exports.IpamResourceDiscoveryAssociation = null;
utilities.lazyLoad(exports, ["IpamResourceDiscoveryAssociation"], () => require("./ipamResourceDiscoveryAssociation"));
exports.IpamScope = null;
utilities.lazyLoad(exports, ["IpamScope"], () => require("./ipamScope"));
exports.KeyPair = null;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));
exports.LaunchTemplate = null;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));
exports.LocalGatewayRoute = null;
utilities.lazyLoad(exports, ["LocalGatewayRoute"], () => require("./localGatewayRoute"));
exports.LocalGatewayRouteTable = null;
utilities.lazyLoad(exports, ["LocalGatewayRouteTable"], () => require("./localGatewayRouteTable"));
exports.LocalGatewayRouteTableVirtualInterfaceGroupAssociation = null;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"], () => require("./localGatewayRouteTableVirtualInterfaceGroupAssociation"));
exports.LocalGatewayRouteTableVpcAssociation = null;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVpcAssociation"], () => require("./localGatewayRouteTableVpcAssociation"));
exports.NatGateway = null;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));
exports.NetworkAcl = null;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));
exports.NetworkInsightsAccessScope = null;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScope"], () => require("./networkInsightsAccessScope"));
exports.NetworkInsightsAccessScopeAnalysis = null;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScopeAnalysis"], () => require("./networkInsightsAccessScopeAnalysis"));
exports.NetworkInsightsAnalysis = null;
utilities.lazyLoad(exports, ["NetworkInsightsAnalysis"], () => require("./networkInsightsAnalysis"));
exports.NetworkInsightsPath = null;
utilities.lazyLoad(exports, ["NetworkInsightsPath"], () => require("./networkInsightsPath"));
exports.NetworkInterface = null;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));
exports.NetworkInterfaceAttachment = null;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));
exports.NetworkPerformanceMetricSubscription = null;
utilities.lazyLoad(exports, ["NetworkPerformanceMetricSubscription"], () => require("./networkPerformanceMetricSubscription"));
exports.PlacementGroup = null;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));
exports.PrefixList = null;
utilities.lazyLoad(exports, ["PrefixList"], () => require("./prefixList"));
exports.Route = null;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
exports.RouteTable = null;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
exports.SecurityGroup = null;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));
exports.SecurityGroupEgress = null;
utilities.lazyLoad(exports, ["SecurityGroupEgress"], () => require("./securityGroupEgress"));
exports.SecurityGroupIngress = null;
utilities.lazyLoad(exports, ["SecurityGroupIngress"], () => require("./securityGroupIngress"));
exports.SecurityGroupVpcAssociation = null;
utilities.lazyLoad(exports, ["SecurityGroupVpcAssociation"], () => require("./securityGroupVpcAssociation"));
exports.SnapshotBlockPublicAccess = null;
utilities.lazyLoad(exports, ["SnapshotBlockPublicAccess"], () => require("./snapshotBlockPublicAccess"));
exports.SpotFleet = null;
utilities.lazyLoad(exports, ["SpotFleet"], () => require("./spotFleet"));
exports.Subnet = null;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));
exports.SubnetCidrBlock = null;
utilities.lazyLoad(exports, ["SubnetCidrBlock"], () => require("./subnetCidrBlock"));
exports.SubnetNetworkAclAssociation = null;
utilities.lazyLoad(exports, ["SubnetNetworkAclAssociation"], () => require("./subnetNetworkAclAssociation"));
exports.SubnetRouteTableAssociation = null;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));
exports.TransitGateway = null;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));
exports.TransitGatewayAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayAttachment"], () => require("./transitGatewayAttachment"));
exports.TransitGatewayConnect = null;
utilities.lazyLoad(exports, ["TransitGatewayConnect"], () => require("./transitGatewayConnect"));
exports.TransitGatewayMulticastDomain = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomain"], () => require("./transitGatewayMulticastDomain"));
exports.TransitGatewayMulticastDomainAssociation = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomainAssociation"], () => require("./transitGatewayMulticastDomainAssociation"));
exports.TransitGatewayMulticastGroupMember = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupMember"], () => require("./transitGatewayMulticastGroupMember"));
exports.TransitGatewayMulticastGroupSource = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupSource"], () => require("./transitGatewayMulticastGroupSource"));
exports.TransitGatewayPeeringAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayPeeringAttachment"], () => require("./transitGatewayPeeringAttachment"));
exports.TransitGatewayRoute = null;
utilities.lazyLoad(exports, ["TransitGatewayRoute"], () => require("./transitGatewayRoute"));
exports.TransitGatewayRouteTable = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTable"], () => require("./transitGatewayRouteTable"));
exports.TransitGatewayRouteTableAssociation = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTableAssociation"], () => require("./transitGatewayRouteTableAssociation"));
exports.TransitGatewayRouteTablePropagation = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTablePropagation"], () => require("./transitGatewayRouteTablePropagation"));
exports.TransitGatewayVpcAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayVpcAttachment"], () => require("./transitGatewayVpcAttachment"));
exports.VerifiedAccessEndpoint = null;
utilities.lazyLoad(exports, ["VerifiedAccessEndpoint"], () => require("./verifiedAccessEndpoint"));
exports.VerifiedAccessGroup = null;
utilities.lazyLoad(exports, ["VerifiedAccessGroup"], () => require("./verifiedAccessGroup"));
exports.VerifiedAccessInstance = null;
utilities.lazyLoad(exports, ["VerifiedAccessInstance"], () => require("./verifiedAccessInstance"));
exports.VerifiedAccessTrustProvider = null;
utilities.lazyLoad(exports, ["VerifiedAccessTrustProvider"], () => require("./verifiedAccessTrustProvider"));
exports.Volume = null;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));
exports.VolumeAttachment = null;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));
exports.Vpc = null;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));
exports.VpcBlockPublicAccessExclusion = null;
utilities.lazyLoad(exports, ["VpcBlockPublicAccessExclusion"], () => require("./vpcBlockPublicAccessExclusion"));
exports.VpcBlockPublicAccessOptions = null;
utilities.lazyLoad(exports, ["VpcBlockPublicAccessOptions"], () => require("./vpcBlockPublicAccessOptions"));
exports.VpcCidrBlock = null;
utilities.lazyLoad(exports, ["VpcCidrBlock"], () => require("./vpcCidrBlock"));
exports.VpcEndpoint = null;
utilities.lazyLoad(exports, ["VpcEndpoint"], () => require("./vpcEndpoint"));
exports.VpcEndpointConnectionNotification = null;
utilities.lazyLoad(exports, ["VpcEndpointConnectionNotification"], () => require("./vpcEndpointConnectionNotification"));
exports.VpcEndpointService = null;
utilities.lazyLoad(exports, ["VpcEndpointService"], () => require("./vpcEndpointService"));
exports.VpcEndpointServicePermissions = null;
utilities.lazyLoad(exports, ["VpcEndpointServicePermissions"], () => require("./vpcEndpointServicePermissions"));
exports.VpcGatewayAttachment = null;
utilities.lazyLoad(exports, ["VpcGatewayAttachment"], () => require("./vpcGatewayAttachment"));
exports.VpcPeeringConnection = null;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));
exports.VpcdhcpOptionsAssociation = null;
utilities.lazyLoad(exports, ["VpcdhcpOptionsAssociation"], () => require("./vpcdhcpOptionsAssociation"));
exports.VpnConnection = null;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));
exports.VpnConnectionRoute = null;
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));
exports.VpnGateway = null;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));
// Export enums:
__exportStar(require("../types/enums/ec2"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:ec2:CapacityReservation":
                return new exports.CapacityReservation(name, undefined, { urn });
            case "aws-native:ec2:CapacityReservationFleet":
                return new exports.CapacityReservationFleet(name, undefined, { urn });
            case "aws-native:ec2:CarrierGateway":
                return new exports.CarrierGateway(name, undefined, { urn });
            case "aws-native:ec2:CustomerGateway":
                return new exports.CustomerGateway(name, undefined, { urn });
            case "aws-native:ec2:DhcpOptions":
                return new exports.DhcpOptions(name, undefined, { urn });
            case "aws-native:ec2:Ec2Fleet":
                return new exports.Ec2Fleet(name, undefined, { urn });
            case "aws-native:ec2:EgressOnlyInternetGateway":
                return new exports.EgressOnlyInternetGateway(name, undefined, { urn });
            case "aws-native:ec2:Eip":
                return new exports.Eip(name, undefined, { urn });
            case "aws-native:ec2:EipAssociation":
                return new exports.EipAssociation(name, undefined, { urn });
            case "aws-native:ec2:EnclaveCertificateIamRoleAssociation":
                return new exports.EnclaveCertificateIamRoleAssociation(name, undefined, { urn });
            case "aws-native:ec2:FlowLog":
                return new exports.FlowLog(name, undefined, { urn });
            case "aws-native:ec2:GatewayRouteTableAssociation":
                return new exports.GatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:Host":
                return new exports.Host(name, undefined, { urn });
            case "aws-native:ec2:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "aws-native:ec2:InstanceConnectEndpoint":
                return new exports.InstanceConnectEndpoint(name, undefined, { urn });
            case "aws-native:ec2:InternetGateway":
                return new exports.InternetGateway(name, undefined, { urn });
            case "aws-native:ec2:Ipam":
                return new exports.Ipam(name, undefined, { urn });
            case "aws-native:ec2:IpamAllocation":
                return new exports.IpamAllocation(name, undefined, { urn });
            case "aws-native:ec2:IpamPool":
                return new exports.IpamPool(name, undefined, { urn });
            case "aws-native:ec2:IpamPoolCidr":
                return new exports.IpamPoolCidr(name, undefined, { urn });
            case "aws-native:ec2:IpamResourceDiscovery":
                return new exports.IpamResourceDiscovery(name, undefined, { urn });
            case "aws-native:ec2:IpamResourceDiscoveryAssociation":
                return new exports.IpamResourceDiscoveryAssociation(name, undefined, { urn });
            case "aws-native:ec2:IpamScope":
                return new exports.IpamScope(name, undefined, { urn });
            case "aws-native:ec2:KeyPair":
                return new exports.KeyPair(name, undefined, { urn });
            case "aws-native:ec2:LaunchTemplate":
                return new exports.LaunchTemplate(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRoute":
                return new exports.LocalGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRouteTable":
                return new exports.LocalGatewayRouteTable(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRouteTableVirtualInterfaceGroupAssociation":
                return new exports.LocalGatewayRouteTableVirtualInterfaceGroupAssociation(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRouteTableVpcAssociation":
                return new exports.LocalGatewayRouteTableVpcAssociation(name, undefined, { urn });
            case "aws-native:ec2:NatGateway":
                return new exports.NatGateway(name, undefined, { urn });
            case "aws-native:ec2:NetworkAcl":
                return new exports.NetworkAcl(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAccessScope":
                return new exports.NetworkInsightsAccessScope(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAccessScopeAnalysis":
                return new exports.NetworkInsightsAccessScopeAnalysis(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAnalysis":
                return new exports.NetworkInsightsAnalysis(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsPath":
                return new exports.NetworkInsightsPath(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterface":
                return new exports.NetworkInterface(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterfaceAttachment":
                return new exports.NetworkInterfaceAttachment(name, undefined, { urn });
            case "aws-native:ec2:NetworkPerformanceMetricSubscription":
                return new exports.NetworkPerformanceMetricSubscription(name, undefined, { urn });
            case "aws-native:ec2:PlacementGroup":
                return new exports.PlacementGroup(name, undefined, { urn });
            case "aws-native:ec2:PrefixList":
                return new exports.PrefixList(name, undefined, { urn });
            case "aws-native:ec2:Route":
                return new exports.Route(name, undefined, { urn });
            case "aws-native:ec2:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroup":
                return new exports.SecurityGroup(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupEgress":
                return new exports.SecurityGroupEgress(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupIngress":
                return new exports.SecurityGroupIngress(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupVpcAssociation":
                return new exports.SecurityGroupVpcAssociation(name, undefined, { urn });
            case "aws-native:ec2:SnapshotBlockPublicAccess":
                return new exports.SnapshotBlockPublicAccess(name, undefined, { urn });
            case "aws-native:ec2:SpotFleet":
                return new exports.SpotFleet(name, undefined, { urn });
            case "aws-native:ec2:Subnet":
                return new exports.Subnet(name, undefined, { urn });
            case "aws-native:ec2:SubnetCidrBlock":
                return new exports.SubnetCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:SubnetNetworkAclAssociation":
                return new exports.SubnetNetworkAclAssociation(name, undefined, { urn });
            case "aws-native:ec2:SubnetRouteTableAssociation":
                return new exports.SubnetRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGateway":
                return new exports.TransitGateway(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayAttachment":
                return new exports.TransitGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayConnect":
                return new exports.TransitGatewayConnect(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomain":
                return new exports.TransitGatewayMulticastDomain(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomainAssociation":
                return new exports.TransitGatewayMulticastDomainAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupMember":
                return new exports.TransitGatewayMulticastGroupMember(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupSource":
                return new exports.TransitGatewayMulticastGroupSource(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayPeeringAttachment":
                return new exports.TransitGatewayPeeringAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRoute":
                return new exports.TransitGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTable":
                return new exports.TransitGatewayRouteTable(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTableAssociation":
                return new exports.TransitGatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTablePropagation":
                return new exports.TransitGatewayRouteTablePropagation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayVpcAttachment":
                return new exports.TransitGatewayVpcAttachment(name, undefined, { urn });
            case "aws-native:ec2:VerifiedAccessEndpoint":
                return new exports.VerifiedAccessEndpoint(name, undefined, { urn });
            case "aws-native:ec2:VerifiedAccessGroup":
                return new exports.VerifiedAccessGroup(name, undefined, { urn });
            case "aws-native:ec2:VerifiedAccessInstance":
                return new exports.VerifiedAccessInstance(name, undefined, { urn });
            case "aws-native:ec2:VerifiedAccessTrustProvider":
                return new exports.VerifiedAccessTrustProvider(name, undefined, { urn });
            case "aws-native:ec2:Volume":
                return new exports.Volume(name, undefined, { urn });
            case "aws-native:ec2:VolumeAttachment":
                return new exports.VolumeAttachment(name, undefined, { urn });
            case "aws-native:ec2:Vpc":
                return new exports.Vpc(name, undefined, { urn });
            case "aws-native:ec2:VpcBlockPublicAccessExclusion":
                return new exports.VpcBlockPublicAccessExclusion(name, undefined, { urn });
            case "aws-native:ec2:VpcBlockPublicAccessOptions":
                return new exports.VpcBlockPublicAccessOptions(name, undefined, { urn });
            case "aws-native:ec2:VpcCidrBlock":
                return new exports.VpcCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:VpcEndpoint":
                return new exports.VpcEndpoint(name, undefined, { urn });
            case "aws-native:ec2:VpcEndpointConnectionNotification":
                return new exports.VpcEndpointConnectionNotification(name, undefined, { urn });
            case "aws-native:ec2:VpcEndpointService":
                return new exports.VpcEndpointService(name, undefined, { urn });
            case "aws-native:ec2:VpcEndpointServicePermissions":
                return new exports.VpcEndpointServicePermissions(name, undefined, { urn });
            case "aws-native:ec2:VpcGatewayAttachment":
                return new exports.VpcGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:VpcPeeringConnection":
                return new exports.VpcPeeringConnection(name, undefined, { urn });
            case "aws-native:ec2:VpcdhcpOptionsAssociation":
                return new exports.VpcdhcpOptionsAssociation(name, undefined, { urn });
            case "aws-native:ec2:VpnConnection":
                return new exports.VpnConnection(name, undefined, { urn });
            case "aws-native:ec2:VpnConnectionRoute":
                return new exports.VpnConnectionRoute(name, undefined, { urn });
            case "aws-native:ec2:VpnGateway":
                return new exports.VpnGateway(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ec2", _module);
//# sourceMappingURL=index.js.map