"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterface = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::EC2::NetworkInterface resource creates network interface
 */
class NetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new NetworkInterface(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }
    /**
     * Create a NetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["connectionTrackingSpecification"] = args ? args.connectionTrackingSpecification : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enablePrimaryIpv6"] = args ? args.enablePrimaryIpv6 : undefined;
            resourceInputs["groupSet"] = args ? args.groupSet : undefined;
            resourceInputs["interfaceType"] = args ? args.interfaceType : undefined;
            resourceInputs["ipv4PrefixCount"] = args ? args.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = args ? args.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["ipv6PrefixCount"] = args ? args.ipv6PrefixCount : undefined;
            resourceInputs["ipv6Prefixes"] = args ? args.ipv6Prefixes : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = args ? args.privateIpAddresses : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = args ? args.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["sourceDestCheck"] = args ? args.sourceDestCheck : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["primaryIpv6Address"] = undefined /*out*/;
            resourceInputs["primaryPrivateIpAddress"] = undefined /*out*/;
            resourceInputs["secondaryPrivateIpAddresses"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["connectionTrackingSpecification"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enablePrimaryIpv6"] = undefined /*out*/;
            resourceInputs["groupSet"] = undefined /*out*/;
            resourceInputs["interfaceType"] = undefined /*out*/;
            resourceInputs["ipv4PrefixCount"] = undefined /*out*/;
            resourceInputs["ipv4Prefixes"] = undefined /*out*/;
            resourceInputs["ipv6AddressCount"] = undefined /*out*/;
            resourceInputs["ipv6Addresses"] = undefined /*out*/;
            resourceInputs["ipv6PrefixCount"] = undefined /*out*/;
            resourceInputs["ipv6Prefixes"] = undefined /*out*/;
            resourceInputs["primaryIpv6Address"] = undefined /*out*/;
            resourceInputs["primaryPrivateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["secondaryPrivateIpAddressCount"] = undefined /*out*/;
            resourceInputs["secondaryPrivateIpAddresses"] = undefined /*out*/;
            resourceInputs["sourceDestCheck"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["interfaceType", "privateIpAddress", "subnetId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(NetworkInterface.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NetworkInterface = NetworkInterface;
/** @internal */
NetworkInterface.__pulumiType = 'aws-native:ec2:NetworkInterface';
//# sourceMappingURL=networkInterface.js.map