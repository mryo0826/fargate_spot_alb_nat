"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2Fleet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::EC2::EC2Fleet
 */
class Ec2Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Ec2Fleet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Ec2Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Fleet.__pulumiType;
    }
    /**
     * Create a Ec2Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.launchTemplateConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateConfigs'");
            }
            if ((!args || args.targetCapacitySpecification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetCapacitySpecification'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            resourceInputs["launchTemplateConfigs"] = args ? args.launchTemplateConfigs : undefined;
            resourceInputs["onDemandOptions"] = args ? args.onDemandOptions : undefined;
            resourceInputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            resourceInputs["spotOptions"] = args ? args.spotOptions : undefined;
            resourceInputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
            resourceInputs["targetCapacitySpecification"] = args ? args.targetCapacitySpecification : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validFrom"] = args ? args.validFrom : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
            resourceInputs["fleetId"] = undefined /*out*/;
        }
        else {
            resourceInputs["context"] = undefined /*out*/;
            resourceInputs["excessCapacityTerminationPolicy"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["launchTemplateConfigs"] = undefined /*out*/;
            resourceInputs["onDemandOptions"] = undefined /*out*/;
            resourceInputs["replaceUnhealthyInstances"] = undefined /*out*/;
            resourceInputs["spotOptions"] = undefined /*out*/;
            resourceInputs["tagSpecifications"] = undefined /*out*/;
            resourceInputs["targetCapacitySpecification"] = undefined /*out*/;
            resourceInputs["terminateInstancesWithExpiration"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["validFrom"] = undefined /*out*/;
            resourceInputs["validUntil"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["launchTemplateConfigs[*]", "onDemandOptions", "replaceUnhealthyInstances", "spotOptions", "tagSpecifications[*]", "terminateInstancesWithExpiration", "type", "validFrom", "validUntil"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Ec2Fleet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Ec2Fleet = Ec2Fleet;
/** @internal */
Ec2Fleet.__pulumiType = 'aws-native:ec2:Ec2Fleet';
//# sourceMappingURL=ec2Fleet.js.map