"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fleet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers. A fleet is a set of EC2 or Anywhere instances, each of which can host multiple game sessions.
 */
class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Fleet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }
    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["anywhereConfiguration"] = args ? args.anywhereConfiguration : undefined;
            resourceInputs["applyCapacity"] = args ? args.applyCapacity : undefined;
            resourceInputs["buildId"] = args ? args.buildId : undefined;
            resourceInputs["certificateConfiguration"] = args ? args.certificateConfiguration : undefined;
            resourceInputs["computeType"] = args ? args.computeType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredEc2Instances"] = args ? args.desiredEc2Instances : undefined;
            resourceInputs["ec2InboundPermissions"] = args ? args.ec2InboundPermissions : undefined;
            resourceInputs["ec2InstanceType"] = args ? args.ec2InstanceType : undefined;
            resourceInputs["fleetType"] = args ? args.fleetType : undefined;
            resourceInputs["instanceRoleArn"] = args ? args.instanceRoleArn : undefined;
            resourceInputs["instanceRoleCredentialsProvider"] = args ? args.instanceRoleCredentialsProvider : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["logPaths"] = args ? args.logPaths : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["metricGroups"] = args ? args.metricGroups : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newGameSessionProtectionPolicy"] = args ? args.newGameSessionProtectionPolicy : undefined;
            resourceInputs["peerVpcAwsAccountId"] = args ? args.peerVpcAwsAccountId : undefined;
            resourceInputs["peerVpcId"] = args ? args.peerVpcId : undefined;
            resourceInputs["resourceCreationLimitPolicy"] = args ? args.resourceCreationLimitPolicy : undefined;
            resourceInputs["runtimeConfiguration"] = args ? args.runtimeConfiguration : undefined;
            resourceInputs["scalingPolicies"] = args ? args.scalingPolicies : undefined;
            resourceInputs["scriptId"] = args ? args.scriptId : undefined;
            resourceInputs["serverLaunchParameters"] = args ? args.serverLaunchParameters : undefined;
            resourceInputs["serverLaunchPath"] = args ? args.serverLaunchPath : undefined;
            resourceInputs["fleetId"] = undefined /*out*/;
        }
        else {
            resourceInputs["anywhereConfiguration"] = undefined /*out*/;
            resourceInputs["applyCapacity"] = undefined /*out*/;
            resourceInputs["buildId"] = undefined /*out*/;
            resourceInputs["certificateConfiguration"] = undefined /*out*/;
            resourceInputs["computeType"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["desiredEc2Instances"] = undefined /*out*/;
            resourceInputs["ec2InboundPermissions"] = undefined /*out*/;
            resourceInputs["ec2InstanceType"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["fleetType"] = undefined /*out*/;
            resourceInputs["instanceRoleArn"] = undefined /*out*/;
            resourceInputs["instanceRoleCredentialsProvider"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["logPaths"] = undefined /*out*/;
            resourceInputs["maxSize"] = undefined /*out*/;
            resourceInputs["metricGroups"] = undefined /*out*/;
            resourceInputs["minSize"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["newGameSessionProtectionPolicy"] = undefined /*out*/;
            resourceInputs["peerVpcAwsAccountId"] = undefined /*out*/;
            resourceInputs["peerVpcId"] = undefined /*out*/;
            resourceInputs["resourceCreationLimitPolicy"] = undefined /*out*/;
            resourceInputs["runtimeConfiguration"] = undefined /*out*/;
            resourceInputs["scalingPolicies"] = undefined /*out*/;
            resourceInputs["scriptId"] = undefined /*out*/;
            resourceInputs["serverLaunchParameters"] = undefined /*out*/;
            resourceInputs["serverLaunchPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applyCapacity", "buildId", "certificateConfiguration", "computeType", "ec2InstanceType", "fleetType", "instanceRoleArn", "instanceRoleCredentialsProvider", "logPaths[*]", "peerVpcAwsAccountId", "peerVpcId", "scriptId", "serverLaunchParameters", "serverLaunchPath"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Fleet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Fleet = Fleet;
/** @internal */
Fleet.__pulumiType = 'aws-native:gamelift:Fleet';
//# sourceMappingURL=fleet.js.map