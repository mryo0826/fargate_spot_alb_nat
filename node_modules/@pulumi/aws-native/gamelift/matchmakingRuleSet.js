"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchmakingRuleSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::GameLift::MatchmakingRuleSet resource creates an Amazon GameLift (GameLift) matchmaking rule set.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const matchmakingRuleSetResource = new aws_native.gamelift.MatchmakingRuleSet("matchmakingRuleSetResource", {
 *     name: "MyRuleSet",
 *     ruleSetBody: "{\"name\": \"MyMatchmakingRuleSet\",\"ruleLanguageVersion\": \"1.0\", \"teams\": [{\"name\": \"MyTeam\",\"minPlayers\": 1,\"maxPlayers\": 20}]}",
 * });
 * const matchmakingConfigurationResource = new aws_native.gamelift.MatchmakingConfiguration("matchmakingConfigurationResource", {
 *     name: "MyMatchmakingConfiguration",
 *     acceptanceRequired: true,
 *     acceptanceTimeoutSeconds: 60,
 *     backfillMode: aws_native.gamelift.MatchmakingConfigurationBackfillMode.Manual,
 *     customEventData: "MyCustomEventData",
 *     description: "A basic standalone matchmaking configuration",
 *     flexMatchMode: aws_native.gamelift.MatchmakingConfigurationFlexMatchMode.Standalone,
 *     requestTimeoutSeconds: 100,
 *     ruleSetName: matchmakingRuleSetResource.id,
 * }, {
 *     dependsOn: [matchmakingRuleSetResource],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const matchmakingRuleSet = new aws_native.gamelift.MatchmakingRuleSet("matchmakingRuleSet", {
 *     name: "MyRuleSet",
 *     ruleSetBody: "{\"name\": \"MyMatchmakingRuleSet\",\"ruleLanguageVersion\": \"1.0\", \"teams\": [{\"name\": \"MyTeam\",\"minPlayers\": 1,\"maxPlayers\": 20}]}",
 * });
 *
 * ```
 */
class MatchmakingRuleSet extends pulumi.CustomResource {
    /**
     * Get an existing MatchmakingRuleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new MatchmakingRuleSet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MatchmakingRuleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MatchmakingRuleSet.__pulumiType;
    }
    /**
     * Create a MatchmakingRuleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ruleSetBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetBody'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleSetBody"] = args ? args.ruleSetBody : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ruleSetBody"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "ruleSetBody"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MatchmakingRuleSet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MatchmakingRuleSet = MatchmakingRuleSet;
/** @internal */
MatchmakingRuleSet.__pulumiType = 'aws-native:gamelift:MatchmakingRuleSet';
//# sourceMappingURL=matchmakingRuleSet.js.map