"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerFleet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::GameLift::ContainerFleet resource creates an Amazon GameLift (GameLift) container fleet to host game servers.
 */
class ContainerFleet extends pulumi.CustomResource {
    /**
     * Get an existing ContainerFleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ContainerFleet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerFleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerFleet.__pulumiType;
    }
    /**
     * Create a ContainerFleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.fleetRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fleetRoleArn'");
            }
            resourceInputs["billingType"] = args ? args.billingType : undefined;
            resourceInputs["deploymentConfiguration"] = args ? args.deploymentConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fleetRoleArn"] = args ? args.fleetRoleArn : undefined;
            resourceInputs["gameServerContainerGroupDefinitionName"] = args ? args.gameServerContainerGroupDefinitionName : undefined;
            resourceInputs["gameServerContainerGroupsPerInstance"] = args ? args.gameServerContainerGroupsPerInstance : undefined;
            resourceInputs["gameSessionCreationLimitPolicy"] = args ? args.gameSessionCreationLimitPolicy : undefined;
            resourceInputs["instanceConnectionPortRange"] = args ? args.instanceConnectionPortRange : undefined;
            resourceInputs["instanceInboundPermissions"] = args ? args.instanceInboundPermissions : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["metricGroups"] = args ? args.metricGroups : undefined;
            resourceInputs["newGameSessionProtectionPolicy"] = args ? args.newGameSessionProtectionPolicy : undefined;
            resourceInputs["perInstanceContainerGroupDefinitionName"] = args ? args.perInstanceContainerGroupDefinitionName : undefined;
            resourceInputs["scalingPolicies"] = args ? args.scalingPolicies : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deploymentDetails"] = undefined /*out*/;
            resourceInputs["fleetArn"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["gameServerContainerGroupDefinitionArn"] = undefined /*out*/;
            resourceInputs["maximumGameServerContainerGroupsPerInstance"] = undefined /*out*/;
            resourceInputs["perInstanceContainerGroupDefinitionArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["billingType"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["deploymentConfiguration"] = undefined /*out*/;
            resourceInputs["deploymentDetails"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["fleetArn"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["fleetRoleArn"] = undefined /*out*/;
            resourceInputs["gameServerContainerGroupDefinitionArn"] = undefined /*out*/;
            resourceInputs["gameServerContainerGroupDefinitionName"] = undefined /*out*/;
            resourceInputs["gameServerContainerGroupsPerInstance"] = undefined /*out*/;
            resourceInputs["gameSessionCreationLimitPolicy"] = undefined /*out*/;
            resourceInputs["instanceConnectionPortRange"] = undefined /*out*/;
            resourceInputs["instanceInboundPermissions"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["logConfiguration"] = undefined /*out*/;
            resourceInputs["maximumGameServerContainerGroupsPerInstance"] = undefined /*out*/;
            resourceInputs["metricGroups"] = undefined /*out*/;
            resourceInputs["newGameSessionProtectionPolicy"] = undefined /*out*/;
            resourceInputs["perInstanceContainerGroupDefinitionArn"] = undefined /*out*/;
            resourceInputs["perInstanceContainerGroupDefinitionName"] = undefined /*out*/;
            resourceInputs["scalingPolicies"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["billingType", "instanceType", "locations[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ContainerFleet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ContainerFleet = ContainerFleet;
/** @internal */
ContainerFleet.__pulumiType = 'aws-native:gamelift:ContainerFleet';
//# sourceMappingURL=containerFleet.js.map