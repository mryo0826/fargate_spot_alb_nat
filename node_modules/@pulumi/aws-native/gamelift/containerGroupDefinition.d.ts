import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * The AWS::GameLift::ContainerGroupDefinition resource creates an Amazon GameLift container group definition.
 */
export declare class ContainerGroupDefinition extends pulumi.CustomResource {
    /**
     * Get an existing ContainerGroupDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ContainerGroupDefinition;
    /**
     * Returns true if the given object is an instance of ContainerGroupDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ContainerGroupDefinition;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift container group resource and uniquely identifies it across all AWS Regions.
     */
    readonly containerGroupDefinitionArn: pulumi.Output<string>;
    /**
     * The scope of the container group
     */
    readonly containerGroupType: pulumi.Output<enums.gamelift.ContainerGroupDefinitionContainerGroupType | undefined>;
    /**
     * A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * The definition for the game server container in this group. This property is used only when the container group type is `GAME_SERVER` . This container definition specifies a container image with the game server build.
     */
    readonly gameServerContainerDefinition: pulumi.Output<outputs.gamelift.ContainerGroupDefinitionGameServerContainerDefinition | undefined>;
    /**
     * A descriptive label for the container group definition.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The operating system of the container group
     */
    readonly operatingSystem: pulumi.Output<enums.gamelift.ContainerGroupDefinitionOperatingSystem>;
    /**
     * A specific ContainerGroupDefinition version to be updated
     */
    readonly sourceVersionNumber: pulumi.Output<number | undefined>;
    /**
     * A string indicating ContainerGroupDefinition status.
     */
    readonly status: pulumi.Output<enums.gamelift.ContainerGroupDefinitionStatus>;
    /**
     * A string indicating the reason for ContainerGroupDefinition status.
     */
    readonly statusReason: pulumi.Output<string>;
    /**
     * A collection of support container definitions that define the containers in this group.
     */
    readonly supportContainerDefinitions: pulumi.Output<outputs.gamelift.ContainerGroupDefinitionSupportContainerDefinition[] | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The total memory limit of container groups following this definition in MiB
     */
    readonly totalMemoryLimitMebibytes: pulumi.Output<number>;
    /**
     * The total amount of virtual CPUs on the container group definition
     */
    readonly totalVcpuLimit: pulumi.Output<number>;
    /**
     * The description of this version
     */
    readonly versionDescription: pulumi.Output<string | undefined>;
    /**
     * The version of this ContainerGroupDefinition
     */
    readonly versionNumber: pulumi.Output<number>;
    /**
     * Create a ContainerGroupDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerGroupDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ContainerGroupDefinition resource.
 */
export interface ContainerGroupDefinitionArgs {
    /**
     * The scope of the container group
     */
    containerGroupType?: pulumi.Input<enums.gamelift.ContainerGroupDefinitionContainerGroupType>;
    /**
     * The definition for the game server container in this group. This property is used only when the container group type is `GAME_SERVER` . This container definition specifies a container image with the game server build.
     */
    gameServerContainerDefinition?: pulumi.Input<inputs.gamelift.ContainerGroupDefinitionGameServerContainerDefinitionArgs>;
    /**
     * A descriptive label for the container group definition.
     */
    name?: pulumi.Input<string>;
    /**
     * The operating system of the container group
     */
    operatingSystem: pulumi.Input<enums.gamelift.ContainerGroupDefinitionOperatingSystem>;
    /**
     * A specific ContainerGroupDefinition version to be updated
     */
    sourceVersionNumber?: pulumi.Input<number>;
    /**
     * A collection of support container definitions that define the containers in this group.
     */
    supportContainerDefinitions?: pulumi.Input<pulumi.Input<inputs.gamelift.ContainerGroupDefinitionSupportContainerDefinitionArgs>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The total memory limit of container groups following this definition in MiB
     */
    totalMemoryLimitMebibytes: pulumi.Input<number>;
    /**
     * The total amount of virtual CPUs on the container group definition
     */
    totalVcpuLimit: pulumi.Input<number>;
    /**
     * The description of this version
     */
    versionDescription?: pulumi.Input<string>;
}
