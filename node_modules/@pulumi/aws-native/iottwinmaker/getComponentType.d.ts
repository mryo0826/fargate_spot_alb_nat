import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::IoTTwinMaker::ComponentType
 */
export declare function getComponentType(args: GetComponentTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetComponentTypeResult>;
export interface GetComponentTypeArgs {
    /**
     * The ID of the component type.
     */
    componentTypeId: string;
    /**
     * The ID of the workspace that contains the component type.
     */
    workspaceId: string;
}
export interface GetComponentTypeResult {
    /**
     * The ARN of the component type.
     */
    readonly arn?: string;
    /**
     * An map of the composite component types in the component type. Each composite component type's key must be unique to this map.
     */
    readonly compositeComponentTypes?: {
        [key: string]: outputs.iottwinmaker.ComponentTypeCompositeComponentType;
    };
    /**
     * The date and time when the component type was created.
     */
    readonly creationDateTime?: string;
    /**
     * The description of the component type.
     */
    readonly description?: string;
    /**
     * Specifies the parent component type to extend.
     */
    readonly extendsFrom?: string[];
    /**
     * a Map of functions in the component type. Each function's key must be unique to this map.
     */
    readonly functions?: {
        [key: string]: outputs.iottwinmaker.ComponentTypeFunction;
    };
    /**
     * A Boolean value that specifies whether the component type is abstract.
     */
    readonly isAbstract?: boolean;
    /**
     * A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
     */
    readonly isSchemaInitialized?: boolean;
    /**
     * A Boolean value that specifies whether an entity can have more than one component of this type.
     */
    readonly isSingleton?: boolean;
    /**
     * An map of the property definitions in the component type. Each property definition's key must be unique to this map.
     */
    readonly propertyDefinitions?: {
        [key: string]: outputs.iottwinmaker.ComponentTypePropertyDefinition;
    };
    /**
     * An map of the property groups in the component type. Each property group's key must be unique to this map.
     */
    readonly propertyGroups?: {
        [key: string]: outputs.iottwinmaker.ComponentTypePropertyGroup;
    };
    /**
     * The current status of the component type.
     */
    readonly status?: outputs.iottwinmaker.ComponentTypeStatus;
    /**
     * A map of key-value pairs to associate with a resource.
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * The last date and time when the component type was updated.
     */
    readonly updateDateTime?: string;
}
/**
 * Resource schema for AWS::IoTTwinMaker::ComponentType
 */
export declare function getComponentTypeOutput(args: GetComponentTypeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComponentTypeResult>;
export interface GetComponentTypeOutputArgs {
    /**
     * The ID of the component type.
     */
    componentTypeId: pulumi.Input<string>;
    /**
     * The ID of the workspace that contains the component type.
     */
    workspaceId: pulumi.Input<string>;
}
