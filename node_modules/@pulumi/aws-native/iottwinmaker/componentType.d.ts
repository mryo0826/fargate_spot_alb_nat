import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::IoTTwinMaker::ComponentType
 */
export declare class ComponentType extends pulumi.CustomResource {
    /**
     * Get an existing ComponentType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ComponentType;
    /**
     * Returns true if the given object is an instance of ComponentType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ComponentType;
    /**
     * The ARN of the component type.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The ID of the component type.
     */
    readonly componentTypeId: pulumi.Output<string>;
    /**
     * An map of the composite component types in the component type. Each composite component type's key must be unique to this map.
     */
    readonly compositeComponentTypes: pulumi.Output<{
        [key: string]: outputs.iottwinmaker.ComponentTypeCompositeComponentType;
    } | undefined>;
    /**
     * The date and time when the component type was created.
     */
    readonly creationDateTime: pulumi.Output<string>;
    /**
     * The description of the component type.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the parent component type to extend.
     */
    readonly extendsFrom: pulumi.Output<string[] | undefined>;
    /**
     * a Map of functions in the component type. Each function's key must be unique to this map.
     */
    readonly functions: pulumi.Output<{
        [key: string]: outputs.iottwinmaker.ComponentTypeFunction;
    } | undefined>;
    /**
     * A Boolean value that specifies whether the component type is abstract.
     */
    readonly isAbstract: pulumi.Output<boolean>;
    /**
     * A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
     */
    readonly isSchemaInitialized: pulumi.Output<boolean>;
    /**
     * A Boolean value that specifies whether an entity can have more than one component of this type.
     */
    readonly isSingleton: pulumi.Output<boolean | undefined>;
    /**
     * An map of the property definitions in the component type. Each property definition's key must be unique to this map.
     */
    readonly propertyDefinitions: pulumi.Output<{
        [key: string]: outputs.iottwinmaker.ComponentTypePropertyDefinition;
    } | undefined>;
    /**
     * An map of the property groups in the component type. Each property group's key must be unique to this map.
     */
    readonly propertyGroups: pulumi.Output<{
        [key: string]: outputs.iottwinmaker.ComponentTypePropertyGroup;
    } | undefined>;
    /**
     * The current status of the component type.
     */
    readonly status: pulumi.Output<outputs.iottwinmaker.ComponentTypeStatus>;
    /**
     * A map of key-value pairs to associate with a resource.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The last date and time when the component type was updated.
     */
    readonly updateDateTime: pulumi.Output<string>;
    /**
     * The ID of the workspace that contains the component type.
     */
    readonly workspaceId: pulumi.Output<string>;
    /**
     * Create a ComponentType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComponentTypeArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ComponentType resource.
 */
export interface ComponentTypeArgs {
    /**
     * The ID of the component type.
     */
    componentTypeId: pulumi.Input<string>;
    /**
     * An map of the composite component types in the component type. Each composite component type's key must be unique to this map.
     */
    compositeComponentTypes?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.iottwinmaker.ComponentTypeCompositeComponentTypeArgs>;
    }>;
    /**
     * The description of the component type.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the parent component type to extend.
     */
    extendsFrom?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * a Map of functions in the component type. Each function's key must be unique to this map.
     */
    functions?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.iottwinmaker.ComponentTypeFunctionArgs>;
    }>;
    /**
     * A Boolean value that specifies whether an entity can have more than one component of this type.
     */
    isSingleton?: pulumi.Input<boolean>;
    /**
     * An map of the property definitions in the component type. Each property definition's key must be unique to this map.
     */
    propertyDefinitions?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.iottwinmaker.ComponentTypePropertyDefinitionArgs>;
    }>;
    /**
     * An map of the property groups in the component type. Each property group's key must be unique to this map.
     */
    propertyGroups?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.iottwinmaker.ComponentTypePropertyGroupArgs>;
    }>;
    /**
     * A map of key-value pairs to associate with a resource.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The ID of the workspace that contains the component type.
     */
    workspaceId: pulumi.Input<string>;
}
