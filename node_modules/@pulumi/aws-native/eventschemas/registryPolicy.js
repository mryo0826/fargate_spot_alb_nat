"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::EventSchemas::RegistryPolicy
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "registryName",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: {
 *             sid: 1,
 *             effect: "Allow",
 *             principal: {
 *                 aws: "arn:aws:iam::012345678901:user/TestAccountForRegistryPolicy",
 *             },
 *             action: [
 *                 "schemas:DescribeRegistry",
 *                 "schemas:CreateSchema",
 *             ],
 *             resource: "registryArn",
 *         },
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "MyRegistry",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: [{
 *             sid: "Test",
 *             effect: "Allow",
 *             action: ["schemas:*"],
 *             principal: {
 *                 aws: ["109876543210"],
 *             },
 *             resource: [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const registryPolicy = new aws_native.eventschemas.RegistryPolicy("registryPolicy", {
 *     registryName: "MyRegistry",
 *     policy: {
 *         version: "2012-10-17",
 *         statement: [{
 *             sid: "Test",
 *             effect: "Allow",
 *             action: ["schemas:*"],
 *             principal: {
 *                 aws: ["109876543210"],
 *             },
 *             resource: [
 *                 "arn:aws:schemas:us-east-1:012345678901:registry/MyRegistry",
 *                 "arn:aws:schemas:us-east-1:012345678901:schema/MyRegistry*",
 *             ],
 *         }],
 *     },
 * });
 *
 * ```
 */
class RegistryPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RegistryPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new RegistryPolicy(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryPolicy.__pulumiType;
    }
    /**
     * Create a RegistryPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
            resourceInputs["revisionId"] = args ? args.revisionId : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
        }
        else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["registryName"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RegistryPolicy = RegistryPolicy;
/** @internal */
RegistryPolicy.__pulumiType = 'aws-native:eventschemas:RegistryPolicy';
//# sourceMappingURL=registryPolicy.js.map