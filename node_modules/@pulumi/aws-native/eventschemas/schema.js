"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schema = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::EventSchemas::Schema
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const executionStatusChangeSchema = new aws_native.eventschemas.Schema("executionStatusChangeSchema", {
 *     registryName: "aws.events",
 *     schemaName: "ExecutionStatusChange",
 *     description: "event emitted when the status of a state machine execution change",
 *     type: "OpenApi3",
 *     content: "{   \"openapi\": \"3.0.0\",   \"info\": {     \"version\": \"1.0.0\",     \"title\": \"StepFunctionsExecutionStatusChange\"   },   \"paths\":{},   \"components\": {     \"schemas\": {       \"StepFunctionsExecutionStatusChange\": {         \"type\": \"object\",         \"required\": [ \"output\", \"input\", \"executionArn\", \"name\", \"stateMachineArn\", \"startDate\", \"stopDate\", \"status\" ],         \"properties\": {           \"output\": {\"type\": \"string\",\"nullable\": true},           \"input\": {\"type\": \"string\"},           \"executionArn\": {\"type\": \"string\"},           \"name\": {\"type\": \"string\"},           \"stateMachineArn\": {\"type\": \"string\"},           \"startDate\": {\"type\": \"integer\",\"format\": \"int64\"},           \"stopDate\": {\"type\": \"integer\",\"format\": \"int64\",\"nullable\": true},           \"status\": {\"type\": \"string\",\"enum\": [ \"FAILED\", \"RUNNING\", \"SUCCEEDED\", \"ABORTED\" ]}         }       }     }   } }",
 * });
 *
 * ```
 */
class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Schema(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }
    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["schemaArn"] = undefined /*out*/;
            resourceInputs["schemaVersion"] = undefined /*out*/;
            resourceInputs["versionCreatedDate"] = undefined /*out*/;
        }
        else {
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["registryName"] = undefined /*out*/;
            resourceInputs["schemaArn"] = undefined /*out*/;
            resourceInputs["schemaName"] = undefined /*out*/;
            resourceInputs["schemaVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["versionCreatedDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["registryName", "schemaName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Schema = Schema;
/** @internal */
Schema.__pulumiType = 'aws-native:eventschemas:Schema';
//# sourceMappingURL=schema.js.map