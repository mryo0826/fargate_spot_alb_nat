"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterCapacityProviderAssociations = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Associate a set of ECS Capacity Providers with a specified ECS Cluster
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const clusterName = config.require("clusterName");
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: clusterName,
 *     capacityProviders: [
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.Fargate,
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.FargateSpot,
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 1,
 *             capacityProvider: aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.Fargate,
 *         },
 *         {
 *             base: 0,
 *             weight: 1,
 *             capacityProvider: aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.FargateSpot,
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const clusterName = config.require("clusterName");
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: clusterName,
 *     capacityProviders: [
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.Fargate,
 *         aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.FargateSpot,
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 1,
 *             capacityProvider: aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.Fargate,
 *         },
 *         {
 *             base: 0,
 *             weight: 1,
 *             capacityProvider: aws_native.ecs.ClusterCapacityProviderAssociationsCapacityProvider.FargateSpot,
 *         },
 *     ],
 * });
 *
 * ```
 */
class ClusterCapacityProviderAssociations extends pulumi.CustomResource {
    /**
     * Get an existing ClusterCapacityProviderAssociations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ClusterCapacityProviderAssociations(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterCapacityProviderAssociations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterCapacityProviderAssociations.__pulumiType;
    }
    /**
     * Create a ClusterCapacityProviderAssociations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.capacityProviders === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityProviders'");
            }
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.defaultCapacityProviderStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultCapacityProviderStrategy'");
            }
            resourceInputs["capacityProviders"] = args ? args.capacityProviders : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["defaultCapacityProviderStrategy"] = args ? args.defaultCapacityProviderStrategy : undefined;
        }
        else {
            resourceInputs["capacityProviders"] = undefined /*out*/;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["defaultCapacityProviderStrategy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["cluster"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ClusterCapacityProviderAssociations.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ClusterCapacityProviderAssociations = ClusterCapacityProviderAssociations;
/** @internal */
ClusterCapacityProviderAssociations.__pulumiType = 'aws-native:ecs:ClusterCapacityProviderAssociations';
//# sourceMappingURL=clusterCapacityProviderAssociations.js.map