"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngestConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::IVS::IngestConfiguration
 */
class IngestConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing IngestConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new IngestConfiguration(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IngestConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IngestConfiguration.__pulumiType;
    }
    /**
     * Create a IngestConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["ingestProtocol"] = args ? args.ingestProtocol : undefined;
            resourceInputs["insecureIngest"] = args ? args.insecureIngest : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["stageArn"] = args ? args.stageArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["participantId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["streamKey"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ingestProtocol"] = undefined /*out*/;
            resourceInputs["insecureIngest"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["participantId"] = undefined /*out*/;
            resourceInputs["stageArn"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["streamKey"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["ingestProtocol", "insecureIngest", "name", "userId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(IngestConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.IngestConfiguration = IngestConfiguration;
/** @internal */
IngestConfiguration.__pulumiType = 'aws-native:ivs:IngestConfiguration';
//# sourceMappingURL=ingestConfiguration.js.map