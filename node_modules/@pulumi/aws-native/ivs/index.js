"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamKey = exports.StorageConfiguration = exports.Stage = exports.RecordingConfiguration = exports.PublicKey = exports.PlaybackRestrictionPolicy = exports.PlaybackKeyPair = exports.IngestConfiguration = exports.getStreamKeyOutput = exports.getStreamKey = exports.getStorageConfigurationOutput = exports.getStorageConfiguration = exports.getStageOutput = exports.getStage = exports.getRecordingConfigurationOutput = exports.getRecordingConfiguration = exports.getPublicKeyOutput = exports.getPublicKey = exports.getPlaybackRestrictionPolicyOutput = exports.getPlaybackRestrictionPolicy = exports.getPlaybackKeyPairOutput = exports.getPlaybackKeyPair = exports.getIngestConfigurationOutput = exports.getIngestConfiguration = exports.getEncoderConfigurationOutput = exports.getEncoderConfiguration = exports.getChannelOutput = exports.getChannel = exports.EncoderConfiguration = exports.Channel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Channel = null;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));
exports.EncoderConfiguration = null;
utilities.lazyLoad(exports, ["EncoderConfiguration"], () => require("./encoderConfiguration"));
exports.getChannel = null;
exports.getChannelOutput = null;
utilities.lazyLoad(exports, ["getChannel", "getChannelOutput"], () => require("./getChannel"));
exports.getEncoderConfiguration = null;
exports.getEncoderConfigurationOutput = null;
utilities.lazyLoad(exports, ["getEncoderConfiguration", "getEncoderConfigurationOutput"], () => require("./getEncoderConfiguration"));
exports.getIngestConfiguration = null;
exports.getIngestConfigurationOutput = null;
utilities.lazyLoad(exports, ["getIngestConfiguration", "getIngestConfigurationOutput"], () => require("./getIngestConfiguration"));
exports.getPlaybackKeyPair = null;
exports.getPlaybackKeyPairOutput = null;
utilities.lazyLoad(exports, ["getPlaybackKeyPair", "getPlaybackKeyPairOutput"], () => require("./getPlaybackKeyPair"));
exports.getPlaybackRestrictionPolicy = null;
exports.getPlaybackRestrictionPolicyOutput = null;
utilities.lazyLoad(exports, ["getPlaybackRestrictionPolicy", "getPlaybackRestrictionPolicyOutput"], () => require("./getPlaybackRestrictionPolicy"));
exports.getPublicKey = null;
exports.getPublicKeyOutput = null;
utilities.lazyLoad(exports, ["getPublicKey", "getPublicKeyOutput"], () => require("./getPublicKey"));
exports.getRecordingConfiguration = null;
exports.getRecordingConfigurationOutput = null;
utilities.lazyLoad(exports, ["getRecordingConfiguration", "getRecordingConfigurationOutput"], () => require("./getRecordingConfiguration"));
exports.getStage = null;
exports.getStageOutput = null;
utilities.lazyLoad(exports, ["getStage", "getStageOutput"], () => require("./getStage"));
exports.getStorageConfiguration = null;
exports.getStorageConfigurationOutput = null;
utilities.lazyLoad(exports, ["getStorageConfiguration", "getStorageConfigurationOutput"], () => require("./getStorageConfiguration"));
exports.getStreamKey = null;
exports.getStreamKeyOutput = null;
utilities.lazyLoad(exports, ["getStreamKey", "getStreamKeyOutput"], () => require("./getStreamKey"));
exports.IngestConfiguration = null;
utilities.lazyLoad(exports, ["IngestConfiguration"], () => require("./ingestConfiguration"));
exports.PlaybackKeyPair = null;
utilities.lazyLoad(exports, ["PlaybackKeyPair"], () => require("./playbackKeyPair"));
exports.PlaybackRestrictionPolicy = null;
utilities.lazyLoad(exports, ["PlaybackRestrictionPolicy"], () => require("./playbackRestrictionPolicy"));
exports.PublicKey = null;
utilities.lazyLoad(exports, ["PublicKey"], () => require("./publicKey"));
exports.RecordingConfiguration = null;
utilities.lazyLoad(exports, ["RecordingConfiguration"], () => require("./recordingConfiguration"));
exports.Stage = null;
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));
exports.StorageConfiguration = null;
utilities.lazyLoad(exports, ["StorageConfiguration"], () => require("./storageConfiguration"));
exports.StreamKey = null;
utilities.lazyLoad(exports, ["StreamKey"], () => require("./streamKey"));
// Export enums:
__exportStar(require("../types/enums/ivs"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:ivs:Channel":
                return new exports.Channel(name, undefined, { urn });
            case "aws-native:ivs:EncoderConfiguration":
                return new exports.EncoderConfiguration(name, undefined, { urn });
            case "aws-native:ivs:IngestConfiguration":
                return new exports.IngestConfiguration(name, undefined, { urn });
            case "aws-native:ivs:PlaybackKeyPair":
                return new exports.PlaybackKeyPair(name, undefined, { urn });
            case "aws-native:ivs:PlaybackRestrictionPolicy":
                return new exports.PlaybackRestrictionPolicy(name, undefined, { urn });
            case "aws-native:ivs:PublicKey":
                return new exports.PublicKey(name, undefined, { urn });
            case "aws-native:ivs:RecordingConfiguration":
                return new exports.RecordingConfiguration(name, undefined, { urn });
            case "aws-native:ivs:Stage":
                return new exports.Stage(name, undefined, { urn });
            case "aws-native:ivs:StorageConfiguration":
                return new exports.StorageConfiguration(name, undefined, { urn });
            case "aws-native:ivs:StreamKey":
                return new exports.StreamKey(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ivs", _module);
//# sourceMappingURL=index.js.map