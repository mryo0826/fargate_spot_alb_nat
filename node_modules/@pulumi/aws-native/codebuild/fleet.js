"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fleet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::CodeBuild::Fleet
 */
class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Fleet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }
    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["baseCapacity"] = args ? args.baseCapacity : undefined;
            resourceInputs["computeConfiguration"] = args ? args.computeConfiguration : undefined;
            resourceInputs["computeType"] = args ? args.computeType : undefined;
            resourceInputs["environmentType"] = args ? args.environmentType : undefined;
            resourceInputs["fleetProxyConfiguration"] = args ? args.fleetProxyConfiguration : undefined;
            resourceInputs["fleetServiceRole"] = args ? args.fleetServiceRole : undefined;
            resourceInputs["fleetVpcConfig"] = args ? args.fleetVpcConfig : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overflowBehavior"] = args ? args.overflowBehavior : undefined;
            resourceInputs["scalingConfiguration"] = args ? args.scalingConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["baseCapacity"] = undefined /*out*/;
            resourceInputs["computeConfiguration"] = undefined /*out*/;
            resourceInputs["computeType"] = undefined /*out*/;
            resourceInputs["environmentType"] = undefined /*out*/;
            resourceInputs["fleetProxyConfiguration"] = undefined /*out*/;
            resourceInputs["fleetServiceRole"] = undefined /*out*/;
            resourceInputs["fleetVpcConfig"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["overflowBehavior"] = undefined /*out*/;
            resourceInputs["scalingConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fleet.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Fleet = Fleet;
/** @internal */
Fleet.__pulumiType = 'aws-native:codebuild:Fleet';
//# sourceMappingURL=fleet.js.map