import * as pulumi from "@pulumi/pulumi";
/**
 * Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const policyStoreId = config.require("policyStoreId");
 * const description = config.require("description");
 * const statement = config.require("statement");
 * const policyTemplate = new aws_native.verifiedpermissions.PolicyTemplate("policyTemplate", {
 *     policyStoreId: policyStoreId,
 *     description: description,
 *     statement: statement,
 * });
 * export const policyTemplateId = policyTemplate.policyTemplateId;
 *
 * ```
 */
export declare class PolicyTemplate extends pulumi.CustomResource {
    /**
     * Get an existing PolicyTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PolicyTemplate;
    /**
     * Returns true if the given object is an instance of PolicyTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PolicyTemplate;
    /**
     * The description to attach to the new or updated policy template.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the policy store that contains the template.
     */
    readonly policyStoreId: pulumi.Output<string>;
    /**
     * The unique identifier of the new or modified policy template.
     */
    readonly policyTemplateId: pulumi.Output<string>;
    /**
     * Specifies the content that you want to use for the new policy template, written in the Cedar policy language.
     */
    readonly statement: pulumi.Output<string>;
    /**
     * Create a PolicyTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyTemplateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PolicyTemplate resource.
 */
export interface PolicyTemplateArgs {
    /**
     * The description to attach to the new or updated policy template.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the policy store that contains the template.
     */
    policyStoreId: pulumi.Input<string>;
    /**
     * Specifies the content that you want to use for the new policy template, written in the Cedar policy language.
     */
    statement: pulumi.Input<string>;
}
