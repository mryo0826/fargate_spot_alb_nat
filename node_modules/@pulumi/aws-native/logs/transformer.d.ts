import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
 */
export declare class Transformer extends pulumi.CustomResource {
    /**
     * Get an existing Transformer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Transformer;
    /**
     * Returns true if the given object is an instance of Transformer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Transformer;
    /**
     * Existing log group that you want to associate with this transformer.
     */
    readonly logGroupIdentifier: pulumi.Output<string>;
    /**
     * List of processors in a transformer
     */
    readonly transformerConfig: pulumi.Output<outputs.logs.TransformerProcessor[]>;
    /**
     * Create a Transformer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Transformer resource.
 */
export interface TransformerArgs {
    /**
     * Existing log group that you want to associate with this transformer.
     */
    logGroupIdentifier: pulumi.Input<string>;
    /**
     * List of processors in a transformer
     */
    transformerConfig: pulumi.Input<pulumi.Input<inputs.logs.TransformerProcessorArgs>[]>;
}
