import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The ``AWS::Logs::MetricFilter`` resource specifies a metric filter that describes how CWL extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.
 *  The maximum number of metric filters that can be associated with a log group is 100.
 */
export declare class MetricFilter extends pulumi.CustomResource {
    /**
     * Get an existing MetricFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MetricFilter;
    /**
     * Returns true if the given object is an instance of MetricFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MetricFilter;
    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html) .
     *
     * If this value is `true` , the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    readonly applyOnTransformedLogs: pulumi.Output<boolean | undefined>;
    /**
     * The name of the metric filter.
     */
    readonly filterName: pulumi.Output<string | undefined>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    readonly filterPattern: pulumi.Output<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    readonly logGroupName: pulumi.Output<string>;
    /**
     * The metric transformations.
     */
    readonly metricTransformations: pulumi.Output<outputs.logs.MetricFilterMetricTransformation[]>;
    /**
     * Create a MetricFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricFilterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a MetricFilter resource.
 */
export interface MetricFilterArgs {
    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html) .
     *
     * If this value is `true` , the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    applyOnTransformedLogs?: pulumi.Input<boolean>;
    /**
     * The name of the metric filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The metric transformations.
     */
    metricTransformations: pulumi.Input<pulumi.Input<inputs.logs.MetricFilterMetricTransformationArgs>[]>;
}
