import * as pulumi from "@pulumi/pulumi";
import * as enums from "../types/enums";
/**
 * The AWS::Logs::AccountPolicy resource specifies a CloudWatch Logs AccountPolicy.
 */
export declare function getAccountPolicy(args: GetAccountPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountPolicyResult>;
export interface GetAccountPolicyArgs {
    /**
     * User account id
     */
    accountId: string;
    /**
     * The name of the account policy
     */
    policyName: string;
    /**
     * Type of the policy.
     */
    policyType: enums.logs.AccountPolicyPolicyType;
}
export interface GetAccountPolicyResult {
    /**
     * User account id
     */
    readonly accountId?: string;
    /**
     * The body of the policy document you want to use for this topic.
     *
     * You can only add one policy per PolicyType.
     *
     * The policy must be in JSON string format.
     *
     * Length Constraints: Maximum length of 30720
     */
    readonly policyDocument?: string;
    /**
     * Scope for policy application
     */
    readonly scope?: enums.logs.AccountPolicyScope;
    /**
     * Log group  selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    readonly selectionCriteria?: string;
}
/**
 * The AWS::Logs::AccountPolicy resource specifies a CloudWatch Logs AccountPolicy.
 */
export declare function getAccountPolicyOutput(args: GetAccountPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAccountPolicyResult>;
export interface GetAccountPolicyOutputArgs {
    /**
     * User account id
     */
    accountId: pulumi.Input<string>;
    /**
     * The name of the account policy
     */
    policyName: pulumi.Input<string>;
    /**
     * Type of the policy.
     */
    policyType: pulumi.Input<enums.logs.AccountPolicyPolicyType>;
}
