import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::EMRServerless::Application Type
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    /**
     * The ID of the EMR Serverless Application.
     */
    readonly applicationId: pulumi.Output<string>;
    /**
     * The CPU architecture of an application.
     */
    readonly architecture: pulumi.Output<enums.emrserverless.ApplicationArchitecture | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the EMR Serverless Application.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Configuration for Auto Start of Application.
     */
    readonly autoStartConfiguration: pulumi.Output<outputs.emrserverless.ApplicationAutoStartConfiguration | undefined>;
    /**
     * Configuration for Auto Stop of Application.
     */
    readonly autoStopConfiguration: pulumi.Output<outputs.emrserverless.ApplicationAutoStopConfiguration | undefined>;
    /**
     * The image configuration applied to all worker types.
     */
    readonly imageConfiguration: pulumi.Output<outputs.emrserverless.ApplicationImageConfigurationInput | undefined>;
    /**
     * Initial capacity initialized when an Application is started.
     */
    readonly initialCapacity: pulumi.Output<outputs.emrserverless.ApplicationInitialCapacityConfigKeyValuePair[] | undefined>;
    /**
     * The interactive configuration object that enables the interactive use cases for an application.
     */
    readonly interactiveConfiguration: pulumi.Output<outputs.emrserverless.ApplicationInteractiveConfiguration | undefined>;
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    readonly maximumCapacity: pulumi.Output<outputs.emrserverless.ApplicationMaximumAllowedResources | undefined>;
    /**
     * A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
     */
    readonly monitoringConfiguration: pulumi.Output<outputs.emrserverless.ApplicationMonitoringConfiguration | undefined>;
    /**
     * User friendly Application name.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    readonly networkConfiguration: pulumi.Output<outputs.emrserverless.ApplicationNetworkConfiguration | undefined>;
    /**
     * EMR release label.
     */
    readonly releaseLabel: pulumi.Output<string>;
    /**
     * The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
     */
    readonly runtimeConfiguration: pulumi.Output<outputs.emrserverless.ApplicationConfigurationObject[] | undefined>;
    /**
     * The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
     */
    readonly schedulerConfiguration: pulumi.Output<outputs.emrserverless.ApplicationSchedulerConfiguration | undefined>;
    /**
     * Tag map with key and value
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The type of the application
     */
    readonly type: pulumi.Output<string>;
    /**
     * The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
     */
    readonly workerTypeSpecifications: pulumi.Output<{
        [key: string]: outputs.emrserverless.ApplicationWorkerTypeSpecificationInput;
    } | undefined>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The CPU architecture of an application.
     */
    architecture?: pulumi.Input<enums.emrserverless.ApplicationArchitecture>;
    /**
     * Configuration for Auto Start of Application.
     */
    autoStartConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStartConfigurationArgs>;
    /**
     * Configuration for Auto Stop of Application.
     */
    autoStopConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationAutoStopConfigurationArgs>;
    /**
     * The image configuration applied to all worker types.
     */
    imageConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationImageConfigurationInputArgs>;
    /**
     * Initial capacity initialized when an Application is started.
     */
    initialCapacity?: pulumi.Input<pulumi.Input<inputs.emrserverless.ApplicationInitialCapacityConfigKeyValuePairArgs>[]>;
    /**
     * The interactive configuration object that enables the interactive use cases for an application.
     */
    interactiveConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationInteractiveConfigurationArgs>;
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    maximumCapacity?: pulumi.Input<inputs.emrserverless.ApplicationMaximumAllowedResourcesArgs>;
    /**
     * A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
     */
    monitoringConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationMonitoringConfigurationArgs>;
    /**
     * User friendly Application name.
     */
    name?: pulumi.Input<string>;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    networkConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationNetworkConfigurationArgs>;
    /**
     * EMR release label.
     */
    releaseLabel: pulumi.Input<string>;
    /**
     * The [Configuration](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_Configuration.html) specifications of an application. Each configuration consists of a classification and properties. You use this parameter when creating or updating an application. To see the runtimeConfiguration object of an application, run the [GetApplication](https://docs.aws.amazon.com/emr-serverless/latest/APIReference/API_GetApplication.html) API operation.
     */
    runtimeConfiguration?: pulumi.Input<pulumi.Input<inputs.emrserverless.ApplicationConfigurationObjectArgs>[]>;
    /**
     * The scheduler configuration for batch and streaming jobs running on this application. Supported with release labels emr-7.0.0 and above.
     */
    schedulerConfiguration?: pulumi.Input<inputs.emrserverless.ApplicationSchedulerConfigurationArgs>;
    /**
     * Tag map with key and value
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The type of the application
     */
    type: pulumi.Input<string>;
    /**
     * The key-value pairs that specify worker type to WorkerTypeSpecificationInput. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include Driver and Executor for Spark applications and HiveDriver and TezTask for Hive applications. You can either set image details in this parameter for each worker type, or in imageConfiguration for all worker types.
     */
    workerTypeSpecifications?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.emrserverless.ApplicationWorkerTypeSpecificationInputArgs>;
    }>;
}
