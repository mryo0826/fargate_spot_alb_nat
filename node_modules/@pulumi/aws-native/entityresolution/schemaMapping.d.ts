import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * SchemaMapping defined in AWS Entity Resolution service
 */
export declare class SchemaMapping extends pulumi.CustomResource {
    /**
     * Get an existing SchemaMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SchemaMapping;
    /**
     * Returns true if the given object is an instance of SchemaMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SchemaMapping;
    readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the SchemaMapping
     */
    readonly description: pulumi.Output<string | undefined>;
    readonly hasWorkflows: pulumi.Output<boolean>;
    /**
     * The SchemaMapping attributes input
     */
    readonly mappedInputFields: pulumi.Output<outputs.entityresolution.SchemaMappingSchemaInputAttribute[]>;
    readonly schemaArn: pulumi.Output<string>;
    /**
     * The name of the SchemaMapping
     */
    readonly schemaName: pulumi.Output<string>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    readonly updatedAt: pulumi.Output<string>;
    /**
     * Create a SchemaMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaMappingArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a SchemaMapping resource.
 */
export interface SchemaMappingArgs {
    /**
     * The description of the SchemaMapping
     */
    description?: pulumi.Input<string>;
    /**
     * The SchemaMapping attributes input
     */
    mappedInputFields: pulumi.Input<pulumi.Input<inputs.entityresolution.SchemaMappingSchemaInputAttributeArgs>[]>;
    /**
     * The name of the SchemaMapping
     */
    schemaName: pulumi.Input<string>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
