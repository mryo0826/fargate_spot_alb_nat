"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaMapping = exports.PolicyStatement = exports.MatchingWorkflow = exports.IdNamespace = exports.IdMappingWorkflow = exports.getSchemaMappingOutput = exports.getSchemaMapping = exports.getPolicyStatementOutput = exports.getPolicyStatement = exports.getMatchingWorkflowOutput = exports.getMatchingWorkflow = exports.getIdNamespaceOutput = exports.getIdNamespace = exports.getIdMappingWorkflowOutput = exports.getIdMappingWorkflow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.getIdMappingWorkflow = null;
exports.getIdMappingWorkflowOutput = null;
utilities.lazyLoad(exports, ["getIdMappingWorkflow", "getIdMappingWorkflowOutput"], () => require("./getIdMappingWorkflow"));
exports.getIdNamespace = null;
exports.getIdNamespaceOutput = null;
utilities.lazyLoad(exports, ["getIdNamespace", "getIdNamespaceOutput"], () => require("./getIdNamespace"));
exports.getMatchingWorkflow = null;
exports.getMatchingWorkflowOutput = null;
utilities.lazyLoad(exports, ["getMatchingWorkflow", "getMatchingWorkflowOutput"], () => require("./getMatchingWorkflow"));
exports.getPolicyStatement = null;
exports.getPolicyStatementOutput = null;
utilities.lazyLoad(exports, ["getPolicyStatement", "getPolicyStatementOutput"], () => require("./getPolicyStatement"));
exports.getSchemaMapping = null;
exports.getSchemaMappingOutput = null;
utilities.lazyLoad(exports, ["getSchemaMapping", "getSchemaMappingOutput"], () => require("./getSchemaMapping"));
exports.IdMappingWorkflow = null;
utilities.lazyLoad(exports, ["IdMappingWorkflow"], () => require("./idMappingWorkflow"));
exports.IdNamespace = null;
utilities.lazyLoad(exports, ["IdNamespace"], () => require("./idNamespace"));
exports.MatchingWorkflow = null;
utilities.lazyLoad(exports, ["MatchingWorkflow"], () => require("./matchingWorkflow"));
exports.PolicyStatement = null;
utilities.lazyLoad(exports, ["PolicyStatement"], () => require("./policyStatement"));
exports.SchemaMapping = null;
utilities.lazyLoad(exports, ["SchemaMapping"], () => require("./schemaMapping"));
// Export enums:
__exportStar(require("../types/enums/entityresolution"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:entityresolution:IdMappingWorkflow":
                return new exports.IdMappingWorkflow(name, undefined, { urn });
            case "aws-native:entityresolution:IdNamespace":
                return new exports.IdNamespace(name, undefined, { urn });
            case "aws-native:entityresolution:MatchingWorkflow":
                return new exports.MatchingWorkflow(name, undefined, { urn });
            case "aws-native:entityresolution:PolicyStatement":
                return new exports.PolicyStatement(name, undefined, { urn });
            case "aws-native:entityresolution:SchemaMapping":
                return new exports.SchemaMapping(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "entityresolution", _module);
//# sourceMappingURL=index.js.map