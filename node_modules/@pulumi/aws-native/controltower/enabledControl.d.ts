import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Enables a control on a specified target.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myExampleControl = new aws_native.controltower.EnabledControl("myExampleControl", {
 *     controlIdentifier: "arn:aws:controltower:us-east-2::control/EXAMPLE_NAME",
 *     targetIdentifier: "arn:aws:organizations::01234567890:ou/o-EXAMPLE/ou-zzxx-zzx0zzz2",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myExampleControl = new aws_native.controltower.EnabledControl("myExampleControl", {
 *     controlIdentifier: "arn:aws:controltower:us-east-2::control/EXAMPLE_NAME",
 *     targetIdentifier: "arn:aws:organizations::01234567890:ou/o-EXAMPLE/ou-zzxx-zzx0zzz2",
 * });
 *
 * ```
 */
export declare class EnabledControl extends pulumi.CustomResource {
    /**
     * Get an existing EnabledControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EnabledControl;
    /**
     * Returns true if the given object is an instance of EnabledControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EnabledControl;
    /**
     * Arn of the control.
     */
    readonly controlIdentifier: pulumi.Output<string>;
    /**
     * Parameters to configure the enabled control behavior.
     */
    readonly parameters: pulumi.Output<outputs.controltower.EnabledControlParameter[] | undefined>;
    /**
     * A set of tags to assign to the enabled control.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Arn for Organizational unit to which the control needs to be applied
     */
    readonly targetIdentifier: pulumi.Output<string>;
    /**
     * Create a EnabledControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnabledControlArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a EnabledControl resource.
 */
export interface EnabledControlArgs {
    /**
     * Arn of the control.
     */
    controlIdentifier: pulumi.Input<string>;
    /**
     * Parameters to configure the enabled control behavior.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.controltower.EnabledControlParameterArgs>[]>;
    /**
     * A set of tags to assign to the enabled control.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Arn for Organizational unit to which the control needs to be applied
     */
    targetIdentifier: pulumi.Input<string>;
}
