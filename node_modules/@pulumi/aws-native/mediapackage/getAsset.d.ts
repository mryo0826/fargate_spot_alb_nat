import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::MediaPackage::Asset
 */
export declare function getAsset(args: GetAssetArgs, opts?: pulumi.InvokeOptions): Promise<GetAssetResult>;
export interface GetAssetArgs {
    /**
     * The unique identifier for the Asset.
     */
    id: string;
}
export interface GetAssetResult {
    /**
     * The ARN of the Asset.
     */
    readonly arn?: string;
    /**
     * The time the Asset was initially submitted for Ingest.
     */
    readonly createdAt?: string;
    /**
     * The list of egress endpoints available for the Asset.
     */
    readonly egressEndpoints?: outputs.mediapackage.AssetEgressEndpoint[];
    /**
     * The unique identifier for the Asset.
     */
    readonly id?: string;
    /**
     * The ID of the PackagingGroup for the Asset.
     */
    readonly packagingGroupId?: string;
    /**
     * The resource ID to include in SPEKE key requests.
     */
    readonly resourceId?: string;
    /**
     * ARN of the source object in S3.
     */
    readonly sourceArn?: string;
    /**
     * The IAM role_arn used to access the source S3 bucket.
     */
    readonly sourceRoleArn?: string;
    /**
     * A collection of tags associated with a resource
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Resource schema for AWS::MediaPackage::Asset
 */
export declare function getAssetOutput(args: GetAssetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAssetResult>;
export interface GetAssetOutputArgs {
    /**
     * The unique identifier for the Asset.
     */
    id: pulumi.Input<string>;
}
