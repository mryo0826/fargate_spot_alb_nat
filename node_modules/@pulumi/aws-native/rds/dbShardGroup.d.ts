import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The AWS::RDS::DBShardGroup resource creates an Amazon Aurora Limitless DB Shard Group.
 */
export declare class DbShardGroup extends pulumi.CustomResource {
    /**
     * Get an existing DbShardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DbShardGroup;
    /**
     * Returns true if the given object is an instance of DbShardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DbShardGroup;
    /**
     * Specifies whether to create standby instances for the DB shard group.
     */
    readonly computeRedundancy: pulumi.Output<number | undefined>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    readonly dbClusterIdentifier: pulumi.Output<string>;
    /**
     * The name of the DB shard group.
     */
    readonly dbShardGroupIdentifier: pulumi.Output<string | undefined>;
    /**
     * The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
     */
    readonly dbShardGroupResourceId: pulumi.Output<string>;
    /**
     * The connection endpoint for the DB shard group.
     */
    readonly endpoint: pulumi.Output<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    readonly maxAcu: pulumi.Output<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    readonly minAcu: pulumi.Output<number | undefined>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    readonly publiclyAccessible: pulumi.Output<boolean | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a DbShardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbShardGroupArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DbShardGroup resource.
 */
export interface DbShardGroupArgs {
    /**
     * Specifies whether to create standby instances for the DB shard group.
     */
    computeRedundancy?: pulumi.Input<number>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    dbClusterIdentifier: pulumi.Input<string>;
    /**
     * The name of the DB shard group.
     */
    dbShardGroupIdentifier?: pulumi.Input<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    maxAcu: pulumi.Input<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    minAcu?: pulumi.Input<number>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
