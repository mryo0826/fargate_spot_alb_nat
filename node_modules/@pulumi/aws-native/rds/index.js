"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionGroup = exports.Integration = exports.GlobalCluster = exports.getOptionGroupOutput = exports.getOptionGroup = exports.getIntegrationOutput = exports.getIntegration = exports.getGlobalClusterOutput = exports.getGlobalCluster = exports.getEventSubscriptionOutput = exports.getEventSubscription = exports.getDbSubnetGroupOutput = exports.getDbSubnetGroup = exports.getDbShardGroupOutput = exports.getDbShardGroup = exports.getDbProxyTargetGroupOutput = exports.getDbProxyTargetGroup = exports.getDbProxyEndpointOutput = exports.getDbProxyEndpoint = exports.getDbProxyOutput = exports.getDbProxy = exports.getDbParameterGroupOutput = exports.getDbParameterGroup = exports.getDbInstanceOutput = exports.getDbInstance = exports.getDbClusterParameterGroupOutput = exports.getDbClusterParameterGroup = exports.getDbClusterOutput = exports.getDbCluster = exports.getCustomDbEngineVersionOutput = exports.getCustomDbEngineVersion = exports.EventSubscription = exports.DbSubnetGroup = exports.DbShardGroup = exports.DbProxyTargetGroup = exports.DbProxyEndpoint = exports.DbProxy = exports.DbParameterGroup = exports.DbInstance = exports.DbClusterParameterGroup = exports.DbCluster = exports.CustomDbEngineVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CustomDbEngineVersion = null;
utilities.lazyLoad(exports, ["CustomDbEngineVersion"], () => require("./customDbEngineVersion"));
exports.DbCluster = null;
utilities.lazyLoad(exports, ["DbCluster"], () => require("./dbCluster"));
exports.DbClusterParameterGroup = null;
utilities.lazyLoad(exports, ["DbClusterParameterGroup"], () => require("./dbClusterParameterGroup"));
exports.DbInstance = null;
utilities.lazyLoad(exports, ["DbInstance"], () => require("./dbInstance"));
exports.DbParameterGroup = null;
utilities.lazyLoad(exports, ["DbParameterGroup"], () => require("./dbParameterGroup"));
exports.DbProxy = null;
utilities.lazyLoad(exports, ["DbProxy"], () => require("./dbProxy"));
exports.DbProxyEndpoint = null;
utilities.lazyLoad(exports, ["DbProxyEndpoint"], () => require("./dbProxyEndpoint"));
exports.DbProxyTargetGroup = null;
utilities.lazyLoad(exports, ["DbProxyTargetGroup"], () => require("./dbProxyTargetGroup"));
exports.DbShardGroup = null;
utilities.lazyLoad(exports, ["DbShardGroup"], () => require("./dbShardGroup"));
exports.DbSubnetGroup = null;
utilities.lazyLoad(exports, ["DbSubnetGroup"], () => require("./dbSubnetGroup"));
exports.EventSubscription = null;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
exports.getCustomDbEngineVersion = null;
exports.getCustomDbEngineVersionOutput = null;
utilities.lazyLoad(exports, ["getCustomDbEngineVersion", "getCustomDbEngineVersionOutput"], () => require("./getCustomDbEngineVersion"));
exports.getDbCluster = null;
exports.getDbClusterOutput = null;
utilities.lazyLoad(exports, ["getDbCluster", "getDbClusterOutput"], () => require("./getDbCluster"));
exports.getDbClusterParameterGroup = null;
exports.getDbClusterParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getDbClusterParameterGroup", "getDbClusterParameterGroupOutput"], () => require("./getDbClusterParameterGroup"));
exports.getDbInstance = null;
exports.getDbInstanceOutput = null;
utilities.lazyLoad(exports, ["getDbInstance", "getDbInstanceOutput"], () => require("./getDbInstance"));
exports.getDbParameterGroup = null;
exports.getDbParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getDbParameterGroup", "getDbParameterGroupOutput"], () => require("./getDbParameterGroup"));
exports.getDbProxy = null;
exports.getDbProxyOutput = null;
utilities.lazyLoad(exports, ["getDbProxy", "getDbProxyOutput"], () => require("./getDbProxy"));
exports.getDbProxyEndpoint = null;
exports.getDbProxyEndpointOutput = null;
utilities.lazyLoad(exports, ["getDbProxyEndpoint", "getDbProxyEndpointOutput"], () => require("./getDbProxyEndpoint"));
exports.getDbProxyTargetGroup = null;
exports.getDbProxyTargetGroupOutput = null;
utilities.lazyLoad(exports, ["getDbProxyTargetGroup", "getDbProxyTargetGroupOutput"], () => require("./getDbProxyTargetGroup"));
exports.getDbShardGroup = null;
exports.getDbShardGroupOutput = null;
utilities.lazyLoad(exports, ["getDbShardGroup", "getDbShardGroupOutput"], () => require("./getDbShardGroup"));
exports.getDbSubnetGroup = null;
exports.getDbSubnetGroupOutput = null;
utilities.lazyLoad(exports, ["getDbSubnetGroup", "getDbSubnetGroupOutput"], () => require("./getDbSubnetGroup"));
exports.getEventSubscription = null;
exports.getEventSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getEventSubscription", "getEventSubscriptionOutput"], () => require("./getEventSubscription"));
exports.getGlobalCluster = null;
exports.getGlobalClusterOutput = null;
utilities.lazyLoad(exports, ["getGlobalCluster", "getGlobalClusterOutput"], () => require("./getGlobalCluster"));
exports.getIntegration = null;
exports.getIntegrationOutput = null;
utilities.lazyLoad(exports, ["getIntegration", "getIntegrationOutput"], () => require("./getIntegration"));
exports.getOptionGroup = null;
exports.getOptionGroupOutput = null;
utilities.lazyLoad(exports, ["getOptionGroup", "getOptionGroupOutput"], () => require("./getOptionGroup"));
exports.GlobalCluster = null;
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));
exports.Integration = null;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));
exports.OptionGroup = null;
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));
// Export enums:
__exportStar(require("../types/enums/rds"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:rds:CustomDbEngineVersion":
                return new exports.CustomDbEngineVersion(name, undefined, { urn });
            case "aws-native:rds:DbCluster":
                return new exports.DbCluster(name, undefined, { urn });
            case "aws-native:rds:DbClusterParameterGroup":
                return new exports.DbClusterParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DbInstance":
                return new exports.DbInstance(name, undefined, { urn });
            case "aws-native:rds:DbParameterGroup":
                return new exports.DbParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DbProxy":
                return new exports.DbProxy(name, undefined, { urn });
            case "aws-native:rds:DbProxyEndpoint":
                return new exports.DbProxyEndpoint(name, undefined, { urn });
            case "aws-native:rds:DbProxyTargetGroup":
                return new exports.DbProxyTargetGroup(name, undefined, { urn });
            case "aws-native:rds:DbShardGroup":
                return new exports.DbShardGroup(name, undefined, { urn });
            case "aws-native:rds:DbSubnetGroup":
                return new exports.DbSubnetGroup(name, undefined, { urn });
            case "aws-native:rds:EventSubscription":
                return new exports.EventSubscription(name, undefined, { urn });
            case "aws-native:rds:GlobalCluster":
                return new exports.GlobalCluster(name, undefined, { urn });
            case "aws-native:rds:Integration":
                return new exports.Integration(name, undefined, { urn });
            case "aws-native:rds:OptionGroup":
                return new exports.OptionGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "rds", _module);
//# sourceMappingURL=index.js.map