export declare const AccessEntryAccessScopeType: {
    readonly Namespace: "namespace";
    readonly Cluster: "cluster";
};
/**
 * The type of the access scope.
 */
export type AccessEntryAccessScopeType = (typeof AccessEntryAccessScopeType)[keyof typeof AccessEntryAccessScopeType];
export declare const AddonResolveConflicts: {
    readonly None: "NONE";
    readonly Overwrite: "OVERWRITE";
    readonly Preserve: "PRESERVE";
};
/**
 * Resolve parameter value conflicts
 */
export type AddonResolveConflicts = (typeof AddonResolveConflicts)[keyof typeof AddonResolveConflicts];
export declare const ClusterAccessConfigAuthenticationMode: {
    readonly ConfigMap: "CONFIG_MAP";
    readonly ApiAndConfigMap: "API_AND_CONFIG_MAP";
    readonly Api: "API";
};
/**
 * Specify the authentication mode that should be used to create your cluster.
 */
export type ClusterAccessConfigAuthenticationMode = (typeof ClusterAccessConfigAuthenticationMode)[keyof typeof ClusterAccessConfigAuthenticationMode];
export declare const ClusterKubernetesNetworkConfigIpFamily: {
    readonly Ipv4: "ipv4";
    readonly Ipv6: "ipv6";
};
/**
 * Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
 */
export type ClusterKubernetesNetworkConfigIpFamily = (typeof ClusterKubernetesNetworkConfigIpFamily)[keyof typeof ClusterKubernetesNetworkConfigIpFamily];
export declare const ClusterLoggingTypeConfigType: {
    readonly Api: "api";
    readonly Audit: "audit";
    readonly Authenticator: "authenticator";
    readonly ControllerManager: "controllerManager";
    readonly Scheduler: "scheduler";
};
/**
 * name of the log type
 */
export type ClusterLoggingTypeConfigType = (typeof ClusterLoggingTypeConfigType)[keyof typeof ClusterLoggingTypeConfigType];
export declare const ClusterUpgradePolicySupportType: {
    readonly Standard: "STANDARD";
    readonly Extended: "EXTENDED";
};
/**
 * Specify the support type for your cluster.
 */
export type ClusterUpgradePolicySupportType = (typeof ClusterUpgradePolicySupportType)[keyof typeof ClusterUpgradePolicySupportType];
export declare const IdentityProviderConfigType: {
    readonly Oidc: "oidc";
};
/**
 * The type of the identity provider configuration.
 */
export type IdentityProviderConfigType = (typeof IdentityProviderConfigType)[keyof typeof IdentityProviderConfigType];
