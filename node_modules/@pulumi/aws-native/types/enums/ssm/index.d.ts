export declare const AssociationComplianceSeverity: {
    readonly Critical: "CRITICAL";
    readonly High: "HIGH";
    readonly Medium: "MEDIUM";
    readonly Low: "LOW";
    readonly Unspecified: "UNSPECIFIED";
};
/**
 * The severity level that is assigned to the association.
 */
export type AssociationComplianceSeverity = (typeof AssociationComplianceSeverity)[keyof typeof AssociationComplianceSeverity];
export declare const AssociationSyncCompliance: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
/**
 * The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
 *
 * In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
 *
 * By default, all associations use `AUTO` mode.
 */
export type AssociationSyncCompliance = (typeof AssociationSyncCompliance)[keyof typeof AssociationSyncCompliance];
export declare const DocumentAttachmentsSourceKey: {
    readonly SourceUrl: "SourceUrl";
    readonly S3FileUrl: "S3FileUrl";
    readonly AttachmentReference: "AttachmentReference";
};
/**
 * The key of a key-value pair that identifies the location of an attachment to a document.
 */
export type DocumentAttachmentsSourceKey = (typeof DocumentAttachmentsSourceKey)[keyof typeof DocumentAttachmentsSourceKey];
export declare const DocumentFormat: {
    readonly Yaml: "YAML";
    readonly Json: "JSON";
    readonly Text: "TEXT";
};
/**
 * Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
 */
export type DocumentFormat = (typeof DocumentFormat)[keyof typeof DocumentFormat];
export declare const DocumentType: {
    readonly ApplicationConfiguration: "ApplicationConfiguration";
    readonly ApplicationConfigurationSchema: "ApplicationConfigurationSchema";
    readonly Automation: "Automation";
    readonly AutomationChangeTemplate: "Automation.ChangeTemplate";
    readonly ChangeCalendar: "ChangeCalendar";
    readonly CloudFormation: "CloudFormation";
    readonly Command: "Command";
    readonly DeploymentStrategy: "DeploymentStrategy";
    readonly Package: "Package";
    readonly Policy: "Policy";
    readonly ProblemAnalysis: "ProblemAnalysis";
    readonly ProblemAnalysisTemplate: "ProblemAnalysisTemplate";
    readonly Session: "Session";
};
/**
 * The type of document to create.
 */
export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType];
export declare const DocumentUpdateMethod: {
    readonly Replace: "Replace";
    readonly NewVersion: "NewVersion";
};
/**
 * Update method - when set to 'Replace', the update will replace the existing document; when set to 'NewVersion', the update will create a new version.
 */
export type DocumentUpdateMethod = (typeof DocumentUpdateMethod)[keyof typeof DocumentUpdateMethod];
export declare const ParameterDataType: {
    readonly Text: "text";
    readonly Awsec2image: "aws:ec2:image";
};
/**
 * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
 */
export type ParameterDataType = (typeof ParameterDataType)[keyof typeof ParameterDataType];
export declare const ParameterTier: {
    readonly Standard: "Standard";
    readonly Advanced: "Advanced";
    readonly IntelligentTiering: "Intelligent-Tiering";
};
/**
 * The parameter tier.
 */
export type ParameterTier = (typeof ParameterTier)[keyof typeof ParameterTier];
export declare const ParameterType: {
    readonly String: "String";
    readonly StringList: "StringList";
};
/**
 * The type of parameter.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export declare const PatchBaselineApprovedPatchesComplianceLevel: {
    readonly Critical: "CRITICAL";
    readonly High: "HIGH";
    readonly Medium: "MEDIUM";
    readonly Low: "LOW";
    readonly Informational: "INFORMATIONAL";
    readonly Unspecified: "UNSPECIFIED";
};
/**
 * Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
 */
export type PatchBaselineApprovedPatchesComplianceLevel = (typeof PatchBaselineApprovedPatchesComplianceLevel)[keyof typeof PatchBaselineApprovedPatchesComplianceLevel];
export declare const PatchBaselineOperatingSystem: {
    readonly Windows: "WINDOWS";
    readonly AmazonLinux: "AMAZON_LINUX";
    readonly AmazonLinux2: "AMAZON_LINUX_2";
    readonly AmazonLinux2022: "AMAZON_LINUX_2022";
    readonly AmazonLinux2023: "AMAZON_LINUX_2023";
    readonly Ubuntu: "UBUNTU";
    readonly RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX";
    readonly Suse: "SUSE";
    readonly Centos: "CENTOS";
    readonly OracleLinux: "ORACLE_LINUX";
    readonly Debian: "DEBIAN";
    readonly Macos: "MACOS";
    readonly Raspbian: "RASPBIAN";
    readonly RockyLinux: "ROCKY_LINUX";
    readonly AlmaLinux: "ALMA_LINUX";
};
/**
 * Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
 */
export type PatchBaselineOperatingSystem = (typeof PatchBaselineOperatingSystem)[keyof typeof PatchBaselineOperatingSystem];
export declare const PatchBaselinePatchFilterKey: {
    readonly AdvisoryId: "ADVISORY_ID";
    readonly Arch: "ARCH";
    readonly BugzillaId: "BUGZILLA_ID";
    readonly Classification: "CLASSIFICATION";
    readonly CveId: "CVE_ID";
    readonly Epoch: "EPOCH";
    readonly MsrcSeverity: "MSRC_SEVERITY";
    readonly Name: "NAME";
    readonly PatchId: "PATCH_ID";
    readonly PatchSet: "PATCH_SET";
    readonly Priority: "PRIORITY";
    readonly Product: "PRODUCT";
    readonly ProductFamily: "PRODUCT_FAMILY";
    readonly Release: "RELEASE";
    readonly Repository: "REPOSITORY";
    readonly Section: "SECTION";
    readonly Security: "SECURITY";
    readonly Severity: "SEVERITY";
    readonly Version: "VERSION";
};
/**
 * The key for the filter.
 *
 * For information about valid keys, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html) in the *AWS Systems Manager API Reference* .
 */
export type PatchBaselinePatchFilterKey = (typeof PatchBaselinePatchFilterKey)[keyof typeof PatchBaselinePatchFilterKey];
export declare const PatchBaselineRejectedPatchesAction: {
    readonly AllowAsDependency: "ALLOW_AS_DEPENDENCY";
    readonly Block: "BLOCK";
};
/**
 * The action for Patch Manager to take on patches included in the RejectedPackages list.
 */
export type PatchBaselineRejectedPatchesAction = (typeof PatchBaselineRejectedPatchesAction)[keyof typeof PatchBaselineRejectedPatchesAction];
export declare const PatchBaselineRuleComplianceLevel: {
    readonly Critical: "CRITICAL";
    readonly High: "HIGH";
    readonly Informational: "INFORMATIONAL";
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly Unspecified: "UNSPECIFIED";
};
/**
 * A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: `UNSPECIFIED` , `CRITICAL` , `HIGH` , `MEDIUM` , `LOW` , and `INFORMATIONAL` .
 */
export type PatchBaselineRuleComplianceLevel = (typeof PatchBaselineRuleComplianceLevel)[keyof typeof PatchBaselineRuleComplianceLevel];
