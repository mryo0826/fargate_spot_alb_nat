export declare const AccessLogSubscriptionServiceNetworkLogType: {
    readonly Service: "SERVICE";
    readonly Resource: "RESOURCE";
};
/**
 * Log type of the service network.
 */
export type AccessLogSubscriptionServiceNetworkLogType = (typeof AccessLogSubscriptionServiceNetworkLogType)[keyof typeof AccessLogSubscriptionServiceNetworkLogType];
export declare const AuthPolicyState: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * The state of the auth policy. The auth policy is only active when the auth type is set to `AWS _IAM` . If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is `NONE` , then any auth policy you provide will remain inactive.
 */
export type AuthPolicyState = (typeof AuthPolicyState)[keyof typeof AuthPolicyState];
export declare const ListenerProtocol: {
    readonly Http: "HTTP";
    readonly Https: "HTTPS";
    readonly TlsPassthrough: "TLS_PASSTHROUGH";
};
/**
 * The listener protocol.
 */
export type ListenerProtocol = (typeof ListenerProtocol)[keyof typeof ListenerProtocol];
export declare const ResourceConfigurationAuthType: {
    readonly None: "NONE";
    readonly AwsIam: "AWS_IAM";
};
/**
 * The auth type for the resource configuration.
 */
export type ResourceConfigurationAuthType = (typeof ResourceConfigurationAuthType)[keyof typeof ResourceConfigurationAuthType];
export declare const ResourceConfigurationDnsResourceIpAddressType: {
    readonly Ipv4: "IPV4";
    readonly Ipv6: "IPV6";
    readonly Dualstack: "DUALSTACK";
};
export type ResourceConfigurationDnsResourceIpAddressType = (typeof ResourceConfigurationDnsResourceIpAddressType)[keyof typeof ResourceConfigurationDnsResourceIpAddressType];
export declare const ResourceConfigurationProtocolType: {
    readonly Tcp: "TCP";
};
/**
 * (SINGLE, GROUP) The protocol accepted by the resource configuration.
 */
export type ResourceConfigurationProtocolType = (typeof ResourceConfigurationProtocolType)[keyof typeof ResourceConfigurationProtocolType];
export declare const ResourceConfigurationType: {
    readonly Group: "GROUP";
    readonly Child: "CHILD";
    readonly Single: "SINGLE";
    readonly Arn: "ARN";
};
/**
 * The type of resource configuration. A resource configuration can be one of the following types:
 *
 * - *SINGLE* - A single resource.
 * - *GROUP* - A group of resources. You must create a group resource configuration before you create a child resource configuration.
 * - *CHILD* - A single resource that is part of a group resource configuration.
 * - *ARN* - An AWS resource.
 */
export type ResourceConfigurationType = (typeof ResourceConfigurationType)[keyof typeof ResourceConfigurationType];
export declare const ResourceGatewayIpAddressType: {
    readonly Ipv4: "IPV4";
    readonly Ipv6: "IPV6";
    readonly Dualstack: "DUALSTACK";
};
/**
 * The type of IP address used by the resource gateway.
 */
export type ResourceGatewayIpAddressType = (typeof ResourceGatewayIpAddressType)[keyof typeof ResourceGatewayIpAddressType];
export declare const RuleHttpMatchMethod: {
    readonly Connect: "CONNECT";
    readonly Delete: "DELETE";
    readonly Get: "GET";
    readonly Head: "HEAD";
    readonly Options: "OPTIONS";
    readonly Post: "POST";
    readonly Put: "PUT";
    readonly Trace: "TRACE";
};
/**
 * The HTTP method type.
 */
export type RuleHttpMatchMethod = (typeof RuleHttpMatchMethod)[keyof typeof RuleHttpMatchMethod];
export declare const ServiceAuthType: {
    readonly None: "NONE";
    readonly AwsIam: "AWS_IAM";
};
/**
 * The type of IAM policy.
 *
 * - `NONE` : The resource does not use an IAM policy. This is the default.
 * - `AWS_IAM` : The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.
 */
export type ServiceAuthType = (typeof ServiceAuthType)[keyof typeof ServiceAuthType];
export declare const ServiceNetworkAuthType: {
    readonly None: "NONE";
    readonly AwsIam: "AWS_IAM";
};
/**
 * The type of IAM policy.
 *
 * - `NONE` : The resource does not use an IAM policy. This is the default.
 * - `AWS_IAM` : The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.
 */
export type ServiceNetworkAuthType = (typeof ServiceNetworkAuthType)[keyof typeof ServiceNetworkAuthType];
export declare const ServiceNetworkServiceAssociationStatus: {
    readonly CreateInProgress: "CREATE_IN_PROGRESS";
    readonly Active: "ACTIVE";
    readonly DeleteInProgress: "DELETE_IN_PROGRESS";
    readonly CreateFailed: "CREATE_FAILED";
    readonly DeleteFailed: "DELETE_FAILED";
};
/**
 * The status of the association between the service network and the service.
 */
export type ServiceNetworkServiceAssociationStatus = (typeof ServiceNetworkServiceAssociationStatus)[keyof typeof ServiceNetworkServiceAssociationStatus];
export declare const ServiceNetworkVpcAssociationStatus: {
    readonly CreateInProgress: "CREATE_IN_PROGRESS";
    readonly Active: "ACTIVE";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly DeleteInProgress: "DELETE_IN_PROGRESS";
    readonly CreateFailed: "CREATE_FAILED";
    readonly DeleteFailed: "DELETE_FAILED";
};
/**
 * The status of the association.
 */
export type ServiceNetworkVpcAssociationStatus = (typeof ServiceNetworkVpcAssociationStatus)[keyof typeof ServiceNetworkVpcAssociationStatus];
export declare const ServiceStatus: {
    readonly Active: "ACTIVE";
    readonly CreateInProgress: "CREATE_IN_PROGRESS";
    readonly DeleteInProgress: "DELETE_IN_PROGRESS";
    readonly CreateFailed: "CREATE_FAILED";
    readonly DeleteFailed: "DELETE_FAILED";
};
/**
 * The status of the service.
 */
export type ServiceStatus = (typeof ServiceStatus)[keyof typeof ServiceStatus];
export declare const TargetGroupConfigIpAddressType: {
    readonly Ipv4: "IPV4";
    readonly Ipv6: "IPV6";
};
/**
 * The type of IP address used for the target group. Supported only if the target group type is `IP` . The default is `IPV4` .
 */
export type TargetGroupConfigIpAddressType = (typeof TargetGroupConfigIpAddressType)[keyof typeof TargetGroupConfigIpAddressType];
export declare const TargetGroupConfigLambdaEventStructureVersion: {
    readonly V1: "V1";
    readonly V2: "V2";
};
/**
 * The version of the event structure that your Lambda function receives. Supported only if the target group type is `LAMBDA` . The default is `V1` .
 */
export type TargetGroupConfigLambdaEventStructureVersion = (typeof TargetGroupConfigLambdaEventStructureVersion)[keyof typeof TargetGroupConfigLambdaEventStructureVersion];
export declare const TargetGroupConfigProtocol: {
    readonly Http: "HTTP";
    readonly Https: "HTTPS";
    readonly Tcp: "TCP";
};
/**
 * The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is `LAMBDA` .
 */
export type TargetGroupConfigProtocol = (typeof TargetGroupConfigProtocol)[keyof typeof TargetGroupConfigProtocol];
export declare const TargetGroupConfigProtocolVersion: {
    readonly Http1: "HTTP1";
    readonly Http2: "HTTP2";
    readonly Grpc: "GRPC";
};
/**
 * The protocol version. The default is `HTTP1` . Not supported if the target group type is `LAMBDA` .
 */
export type TargetGroupConfigProtocolVersion = (typeof TargetGroupConfigProtocolVersion)[keyof typeof TargetGroupConfigProtocolVersion];
export declare const TargetGroupHealthCheckConfigProtocol: {
    readonly Http: "HTTP";
    readonly Https: "HTTPS";
};
/**
 * The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS` . The default is `HTTP` .
 */
export type TargetGroupHealthCheckConfigProtocol = (typeof TargetGroupHealthCheckConfigProtocol)[keyof typeof TargetGroupHealthCheckConfigProtocol];
export declare const TargetGroupHealthCheckConfigProtocolVersion: {
    readonly Http1: "HTTP1";
    readonly Http2: "HTTP2";
};
/**
 * The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2` .
 */
export type TargetGroupHealthCheckConfigProtocolVersion = (typeof TargetGroupHealthCheckConfigProtocolVersion)[keyof typeof TargetGroupHealthCheckConfigProtocolVersion];
export declare const TargetGroupStatus: {
    readonly CreateInProgress: "CREATE_IN_PROGRESS";
    readonly Active: "ACTIVE";
    readonly DeleteInProgress: "DELETE_IN_PROGRESS";
    readonly CreateFailed: "CREATE_FAILED";
    readonly DeleteFailed: "DELETE_FAILED";
};
/**
 * The operation's status. You can retry the operation if the status is `CREATE_FAILED` . However, if you retry it while the status is `CREATE_IN_PROGRESS` , there is no change in the status.
 */
export type TargetGroupStatus = (typeof TargetGroupStatus)[keyof typeof TargetGroupStatus];
export declare const TargetGroupType: {
    readonly Ip: "IP";
    readonly Lambda: "LAMBDA";
    readonly Instance: "INSTANCE";
    readonly Alb: "ALB";
};
/**
 * The type of target group.
 */
export type TargetGroupType = (typeof TargetGroupType)[keyof typeof TargetGroupType];
