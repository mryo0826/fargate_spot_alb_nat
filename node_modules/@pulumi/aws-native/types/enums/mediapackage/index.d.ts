export declare const OriginEndpointAdsOnDeliveryRestrictions: {
    readonly None: "NONE";
    readonly Restricted: "RESTRICTED";
    readonly Unrestricted: "UNRESTRICTED";
    readonly Both: "BOTH";
};
/**
 * This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
 */
export type OriginEndpointAdsOnDeliveryRestrictions = (typeof OriginEndpointAdsOnDeliveryRestrictions)[keyof typeof OriginEndpointAdsOnDeliveryRestrictions];
export declare const OriginEndpointCmafEncryptionEncryptionMethod: {
    readonly SampleAes: "SAMPLE_AES";
    readonly AesCtr: "AES_CTR";
};
/**
 * The encryption method used
 */
export type OriginEndpointCmafEncryptionEncryptionMethod = (typeof OriginEndpointCmafEncryptionEncryptionMethod)[keyof typeof OriginEndpointCmafEncryptionEncryptionMethod];
export declare const OriginEndpointDashPackageAdTriggersItem: {
    readonly SpliceInsert: "SPLICE_INSERT";
    readonly Break: "BREAK";
    readonly ProviderAdvertisement: "PROVIDER_ADVERTISEMENT";
    readonly DistributorAdvertisement: "DISTRIBUTOR_ADVERTISEMENT";
    readonly ProviderPlacementOpportunity: "PROVIDER_PLACEMENT_OPPORTUNITY";
    readonly DistributorPlacementOpportunity: "DISTRIBUTOR_PLACEMENT_OPPORTUNITY";
    readonly ProviderOverlayPlacementOpportunity: "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY";
    readonly DistributorOverlayPlacementOpportunity: "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY";
};
export type OriginEndpointDashPackageAdTriggersItem = (typeof OriginEndpointDashPackageAdTriggersItem)[keyof typeof OriginEndpointDashPackageAdTriggersItem];
export declare const OriginEndpointDashPackageManifestLayout: {
    readonly Full: "FULL";
    readonly Compact: "COMPACT";
    readonly DrmTopLevelCompact: "DRM_TOP_LEVEL_COMPACT";
};
/**
 * Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
 */
export type OriginEndpointDashPackageManifestLayout = (typeof OriginEndpointDashPackageManifestLayout)[keyof typeof OriginEndpointDashPackageManifestLayout];
export declare const OriginEndpointDashPackagePeriodTriggersItem: {
    readonly Ads: "ADS";
};
export type OriginEndpointDashPackagePeriodTriggersItem = (typeof OriginEndpointDashPackagePeriodTriggersItem)[keyof typeof OriginEndpointDashPackagePeriodTriggersItem];
export declare const OriginEndpointDashPackageProfile: {
    readonly None: "NONE";
    readonly Hbbtv15: "HBBTV_1_5";
    readonly Hybridcast: "HYBRIDCAST";
    readonly DvbDash2014: "DVB_DASH_2014";
};
/**
 * The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
 */
export type OriginEndpointDashPackageProfile = (typeof OriginEndpointDashPackageProfile)[keyof typeof OriginEndpointDashPackageProfile];
export declare const OriginEndpointDashPackageSegmentTemplateFormat: {
    readonly NumberWithTimeline: "NUMBER_WITH_TIMELINE";
    readonly TimeWithTimeline: "TIME_WITH_TIMELINE";
    readonly NumberWithDuration: "NUMBER_WITH_DURATION";
};
/**
 * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
 */
export type OriginEndpointDashPackageSegmentTemplateFormat = (typeof OriginEndpointDashPackageSegmentTemplateFormat)[keyof typeof OriginEndpointDashPackageSegmentTemplateFormat];
export declare const OriginEndpointDashPackageUtcTiming: {
    readonly HttpXsdate: "HTTP-XSDATE";
    readonly HttpIso: "HTTP-ISO";
    readonly HttpHead: "HTTP-HEAD";
    readonly None: "NONE";
};
/**
 * Determines the type of UTCTiming included in the Media Presentation Description (MPD)
 */
export type OriginEndpointDashPackageUtcTiming = (typeof OriginEndpointDashPackageUtcTiming)[keyof typeof OriginEndpointDashPackageUtcTiming];
export declare const OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio: {
    readonly PresetAudio1: "PRESET-AUDIO-1";
    readonly PresetAudio2: "PRESET-AUDIO-2";
    readonly PresetAudio3: "PRESET-AUDIO-3";
    readonly Shared: "SHARED";
    readonly Unencrypted: "UNENCRYPTED";
};
/**
 * A collection of audio encryption presets.
 */
export type OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio = (typeof OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio)[keyof typeof OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio];
export declare const OriginEndpointEncryptionContractConfigurationPresetSpeke20Video: {
    readonly PresetVideo1: "PRESET-VIDEO-1";
    readonly PresetVideo2: "PRESET-VIDEO-2";
    readonly PresetVideo3: "PRESET-VIDEO-3";
    readonly PresetVideo4: "PRESET-VIDEO-4";
    readonly PresetVideo5: "PRESET-VIDEO-5";
    readonly PresetVideo6: "PRESET-VIDEO-6";
    readonly PresetVideo7: "PRESET-VIDEO-7";
    readonly PresetVideo8: "PRESET-VIDEO-8";
    readonly Shared: "SHARED";
    readonly Unencrypted: "UNENCRYPTED";
};
/**
 * A collection of video encryption presets.
 */
export type OriginEndpointEncryptionContractConfigurationPresetSpeke20Video = (typeof OriginEndpointEncryptionContractConfigurationPresetSpeke20Video)[keyof typeof OriginEndpointEncryptionContractConfigurationPresetSpeke20Video];
export declare const OriginEndpointHlsEncryptionEncryptionMethod: {
    readonly Aes128: "AES_128";
    readonly SampleAes: "SAMPLE_AES";
};
/**
 * The encryption method to use.
 */
export type OriginEndpointHlsEncryptionEncryptionMethod = (typeof OriginEndpointHlsEncryptionEncryptionMethod)[keyof typeof OriginEndpointHlsEncryptionEncryptionMethod];
export declare const OriginEndpointHlsManifestAdMarkers: {
    readonly None: "NONE";
    readonly Scte35Enhanced: "SCTE35_ENHANCED";
    readonly Passthrough: "PASSTHROUGH";
    readonly Daterange: "DATERANGE";
};
/**
 * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
 */
export type OriginEndpointHlsManifestAdMarkers = (typeof OriginEndpointHlsManifestAdMarkers)[keyof typeof OriginEndpointHlsManifestAdMarkers];
export declare const OriginEndpointHlsManifestAdTriggersItem: {
    readonly SpliceInsert: "SPLICE_INSERT";
    readonly Break: "BREAK";
    readonly ProviderAdvertisement: "PROVIDER_ADVERTISEMENT";
    readonly DistributorAdvertisement: "DISTRIBUTOR_ADVERTISEMENT";
    readonly ProviderPlacementOpportunity: "PROVIDER_PLACEMENT_OPPORTUNITY";
    readonly DistributorPlacementOpportunity: "DISTRIBUTOR_PLACEMENT_OPPORTUNITY";
    readonly ProviderOverlayPlacementOpportunity: "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY";
    readonly DistributorOverlayPlacementOpportunity: "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY";
};
export type OriginEndpointHlsManifestAdTriggersItem = (typeof OriginEndpointHlsManifestAdTriggersItem)[keyof typeof OriginEndpointHlsManifestAdTriggersItem];
export declare const OriginEndpointHlsManifestPlaylistType: {
    readonly None: "NONE";
    readonly Event: "EVENT";
    readonly Vod: "VOD";
};
/**
 * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
 */
export type OriginEndpointHlsManifestPlaylistType = (typeof OriginEndpointHlsManifestPlaylistType)[keyof typeof OriginEndpointHlsManifestPlaylistType];
export declare const OriginEndpointHlsPackageAdMarkers: {
    readonly None: "NONE";
    readonly Scte35Enhanced: "SCTE35_ENHANCED";
    readonly Passthrough: "PASSTHROUGH";
    readonly Daterange: "DATERANGE";
};
/**
 * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
 */
export type OriginEndpointHlsPackageAdMarkers = (typeof OriginEndpointHlsPackageAdMarkers)[keyof typeof OriginEndpointHlsPackageAdMarkers];
export declare const OriginEndpointHlsPackageAdTriggersItem: {
    readonly SpliceInsert: "SPLICE_INSERT";
    readonly Break: "BREAK";
    readonly ProviderAdvertisement: "PROVIDER_ADVERTISEMENT";
    readonly DistributorAdvertisement: "DISTRIBUTOR_ADVERTISEMENT";
    readonly ProviderPlacementOpportunity: "PROVIDER_PLACEMENT_OPPORTUNITY";
    readonly DistributorPlacementOpportunity: "DISTRIBUTOR_PLACEMENT_OPPORTUNITY";
    readonly ProviderOverlayPlacementOpportunity: "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY";
    readonly DistributorOverlayPlacementOpportunity: "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY";
};
export type OriginEndpointHlsPackageAdTriggersItem = (typeof OriginEndpointHlsPackageAdTriggersItem)[keyof typeof OriginEndpointHlsPackageAdTriggersItem];
export declare const OriginEndpointHlsPackagePlaylistType: {
    readonly None: "NONE";
    readonly Event: "EVENT";
    readonly Vod: "VOD";
};
/**
 * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
 */
export type OriginEndpointHlsPackagePlaylistType = (typeof OriginEndpointHlsPackagePlaylistType)[keyof typeof OriginEndpointHlsPackagePlaylistType];
export declare const OriginEndpointOrigination: {
    readonly Allow: "ALLOW";
    readonly Deny: "DENY";
};
/**
 * Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
 */
export type OriginEndpointOrigination = (typeof OriginEndpointOrigination)[keyof typeof OriginEndpointOrigination];
export declare const OriginEndpointStreamSelectionStreamOrder: {
    readonly Original: "ORIGINAL";
    readonly VideoBitrateAscending: "VIDEO_BITRATE_ASCENDING";
    readonly VideoBitrateDescending: "VIDEO_BITRATE_DESCENDING";
};
/**
 * A directive that determines the order of streams in the output.
 */
export type OriginEndpointStreamSelectionStreamOrder = (typeof OriginEndpointStreamSelectionStreamOrder)[keyof typeof OriginEndpointStreamSelectionStreamOrder];
export declare const PackagingConfigurationDashManifestManifestLayout: {
    readonly Full: "FULL";
    readonly Compact: "COMPACT";
};
/**
 * Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
 */
export type PackagingConfigurationDashManifestManifestLayout = (typeof PackagingConfigurationDashManifestManifestLayout)[keyof typeof PackagingConfigurationDashManifestManifestLayout];
export declare const PackagingConfigurationDashManifestProfile: {
    readonly None: "NONE";
    readonly Hbbtv15: "HBBTV_1_5";
};
/**
 * The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
 */
export type PackagingConfigurationDashManifestProfile = (typeof PackagingConfigurationDashManifestProfile)[keyof typeof PackagingConfigurationDashManifestProfile];
export declare const PackagingConfigurationDashManifestScteMarkersSource: {
    readonly Segments: "SEGMENTS";
    readonly Manifest: "MANIFEST";
};
/**
 * The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
 */
export type PackagingConfigurationDashManifestScteMarkersSource = (typeof PackagingConfigurationDashManifestScteMarkersSource)[keyof typeof PackagingConfigurationDashManifestScteMarkersSource];
export declare const PackagingConfigurationDashPackagePeriodTriggersItem: {
    readonly Ads: "ADS";
};
export type PackagingConfigurationDashPackagePeriodTriggersItem = (typeof PackagingConfigurationDashPackagePeriodTriggersItem)[keyof typeof PackagingConfigurationDashPackagePeriodTriggersItem];
export declare const PackagingConfigurationDashPackageSegmentTemplateFormat: {
    readonly NumberWithTimeline: "NUMBER_WITH_TIMELINE";
    readonly TimeWithTimeline: "TIME_WITH_TIMELINE";
    readonly NumberWithDuration: "NUMBER_WITH_DURATION";
};
/**
 * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
 */
export type PackagingConfigurationDashPackageSegmentTemplateFormat = (typeof PackagingConfigurationDashPackageSegmentTemplateFormat)[keyof typeof PackagingConfigurationDashPackageSegmentTemplateFormat];
export declare const PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio: {
    readonly PresetAudio1: "PRESET-AUDIO-1";
    readonly PresetAudio2: "PRESET-AUDIO-2";
    readonly PresetAudio3: "PRESET-AUDIO-3";
    readonly Shared: "SHARED";
    readonly Unencrypted: "UNENCRYPTED";
};
/**
 * A collection of audio encryption presets.
 */
export type PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio = (typeof PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio)[keyof typeof PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio];
export declare const PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video: {
    readonly PresetVideo1: "PRESET-VIDEO-1";
    readonly PresetVideo2: "PRESET-VIDEO-2";
    readonly PresetVideo3: "PRESET-VIDEO-3";
    readonly PresetVideo4: "PRESET-VIDEO-4";
    readonly PresetVideo5: "PRESET-VIDEO-5";
    readonly PresetVideo6: "PRESET-VIDEO-6";
    readonly PresetVideo7: "PRESET-VIDEO-7";
    readonly PresetVideo8: "PRESET-VIDEO-8";
    readonly Shared: "SHARED";
    readonly Unencrypted: "UNENCRYPTED";
};
/**
 * A collection of video encryption presets.
 */
export type PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video = (typeof PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video)[keyof typeof PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video];
export declare const PackagingConfigurationHlsEncryptionEncryptionMethod: {
    readonly Aes128: "AES_128";
    readonly SampleAes: "SAMPLE_AES";
};
/**
 * The encryption method to use.
 */
export type PackagingConfigurationHlsEncryptionEncryptionMethod = (typeof PackagingConfigurationHlsEncryptionEncryptionMethod)[keyof typeof PackagingConfigurationHlsEncryptionEncryptionMethod];
export declare const PackagingConfigurationHlsManifestAdMarkers: {
    readonly None: "NONE";
    readonly Scte35Enhanced: "SCTE35_ENHANCED";
    readonly Passthrough: "PASSTHROUGH";
};
/**
 * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
 */
export type PackagingConfigurationHlsManifestAdMarkers = (typeof PackagingConfigurationHlsManifestAdMarkers)[keyof typeof PackagingConfigurationHlsManifestAdMarkers];
export declare const PackagingConfigurationStreamSelectionStreamOrder: {
    readonly Original: "ORIGINAL";
    readonly VideoBitrateAscending: "VIDEO_BITRATE_ASCENDING";
    readonly VideoBitrateDescending: "VIDEO_BITRATE_DESCENDING";
};
/**
 * A directive that determines the order of streams in the output.
 */
export type PackagingConfigurationStreamSelectionStreamOrder = (typeof PackagingConfigurationStreamSelectionStreamOrder)[keyof typeof PackagingConfigurationStreamSelectionStreamOrder];
