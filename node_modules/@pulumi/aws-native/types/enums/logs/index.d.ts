export declare const AccountPolicyPolicyType: {
    readonly DataProtectionPolicy: "DATA_PROTECTION_POLICY";
    readonly SubscriptionFilterPolicy: "SUBSCRIPTION_FILTER_POLICY";
    readonly FieldIndexPolicy: "FIELD_INDEX_POLICY";
    readonly TransformerPolicy: "TRANSFORMER_POLICY";
};
/**
 * Type of the policy.
 */
export type AccountPolicyPolicyType = (typeof AccountPolicyPolicyType)[keyof typeof AccountPolicyPolicyType];
export declare const AccountPolicyScope: {
    readonly All: "ALL";
};
/**
 * Scope for policy application
 */
export type AccountPolicyScope = (typeof AccountPolicyScope)[keyof typeof AccountPolicyScope];
export declare const IntegrationStatus: {
    readonly Provisioning: "PROVISIONING";
    readonly Active: "ACTIVE";
    readonly Failed: "FAILED";
};
/**
 * Status of creation for the Integration and its resources
 */
export type IntegrationStatus = (typeof IntegrationStatus)[keyof typeof IntegrationStatus];
export declare const IntegrationType: {
    readonly Opensearch: "OPENSEARCH";
};
/**
 * The type of the Integration.
 */
export type IntegrationType = (typeof IntegrationType)[keyof typeof IntegrationType];
export declare const LogAnomalyDetectorEvaluationFrequency: {
    readonly FiveMin: "FIVE_MIN";
    readonly TenMin: "TEN_MIN";
    readonly FifteenMin: "FIFTEEN_MIN";
    readonly ThirtyMin: "THIRTY_MIN";
    readonly OneHour: "ONE_HOUR";
};
/**
 * How often log group is evaluated
 */
export type LogAnomalyDetectorEvaluationFrequency = (typeof LogAnomalyDetectorEvaluationFrequency)[keyof typeof LogAnomalyDetectorEvaluationFrequency];
export declare const LogGroupClass: {
    readonly Standard: "STANDARD";
    readonly InfrequentAccess: "INFREQUENT_ACCESS";
};
/**
 * Specifies the log group class for this log group. There are two classes:
 *   +  The ``Standard`` log class supports all CWL features.
 *   +  The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs.
 *
 *  For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
 */
export type LogGroupClass = (typeof LogGroupClass)[keyof typeof LogGroupClass];
export declare const MetricFilterMetricTransformationUnit: {
    readonly Seconds: "Seconds";
    readonly Microseconds: "Microseconds";
    readonly Milliseconds: "Milliseconds";
    readonly Bytes: "Bytes";
    readonly Kilobytes: "Kilobytes";
    readonly Megabytes: "Megabytes";
    readonly Gigabytes: "Gigabytes";
    readonly Terabytes: "Terabytes";
    readonly Bits: "Bits";
    readonly Kilobits: "Kilobits";
    readonly Megabits: "Megabits";
    readonly Gigabits: "Gigabits";
    readonly Terabits: "Terabits";
    readonly Percent: "Percent";
    readonly Count: "Count";
    readonly BytesSecond: "Bytes/Second";
    readonly KilobytesSecond: "Kilobytes/Second";
    readonly MegabytesSecond: "Megabytes/Second";
    readonly GigabytesSecond: "Gigabytes/Second";
    readonly TerabytesSecond: "Terabytes/Second";
    readonly BitsSecond: "Bits/Second";
    readonly KilobitsSecond: "Kilobits/Second";
    readonly MegabitsSecond: "Megabits/Second";
    readonly GigabitsSecond: "Gigabits/Second";
    readonly TerabitsSecond: "Terabits/Second";
    readonly CountSecond: "Count/Second";
    readonly None: "None";
};
/**
 * The unit to assign to the metric. If you omit this, the unit is set as ``None``.
 */
export type MetricFilterMetricTransformationUnit = (typeof MetricFilterMetricTransformationUnit)[keyof typeof MetricFilterMetricTransformationUnit];
export declare const QueryDefinitionQueryLanguage: {
    readonly Cwli: "CWLI";
    readonly Sql: "SQL";
    readonly Ppl: "PPL";
};
/**
 * Query language of the query string. Possible values are CWLI, SQL, PPL, with CWLI being the default.
 */
export type QueryDefinitionQueryLanguage = (typeof QueryDefinitionQueryLanguage)[keyof typeof QueryDefinitionQueryLanguage];
export declare const SubscriptionFilterDistribution: {
    readonly Random: "Random";
    readonly ByLogStream: "ByLogStream";
};
/**
 * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
 */
export type SubscriptionFilterDistribution = (typeof SubscriptionFilterDistribution)[keyof typeof SubscriptionFilterDistribution];
export declare const TransformerProcessorListToMapPropertiesFlattenedElement: {
    readonly First: "first";
    readonly Last: "last";
};
export type TransformerProcessorListToMapPropertiesFlattenedElement = (typeof TransformerProcessorListToMapPropertiesFlattenedElement)[keyof typeof TransformerProcessorListToMapPropertiesFlattenedElement];
export declare const TransformerTypeConverterEntryType: {
    readonly Boolean: "boolean";
    readonly Integer: "integer";
    readonly Double: "double";
    readonly String: "string";
};
export type TransformerTypeConverterEntryType = (typeof TransformerTypeConverterEntryType)[keyof typeof TransformerTypeConverterEntryType];
