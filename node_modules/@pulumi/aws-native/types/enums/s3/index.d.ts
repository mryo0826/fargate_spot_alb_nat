export declare const AccessGrantGranteeGranteeType: {
    readonly Iam: "IAM";
    readonly DirectoryUser: "DIRECTORY_USER";
    readonly DirectoryGroup: "DIRECTORY_GROUP";
};
/**
 * Configures the transfer acceleration state for an Amazon S3 bucket.
 */
export type AccessGrantGranteeGranteeType = (typeof AccessGrantGranteeGranteeType)[keyof typeof AccessGrantGranteeGranteeType];
export declare const AccessGrantPermission: {
    readonly Read: "READ";
    readonly Write: "WRITE";
    readonly Readwrite: "READWRITE";
};
/**
 * The level of access to be afforded to the grantee
 */
export type AccessGrantPermission = (typeof AccessGrantPermission)[keyof typeof AccessGrantPermission];
export declare const AccessGrantS3PrefixType: {
    readonly Object: "Object";
};
/**
 * The type of S3SubPrefix.
 */
export type AccessGrantS3PrefixType = (typeof AccessGrantS3PrefixType)[keyof typeof AccessGrantS3PrefixType];
export declare const AccessPointNetworkOrigin: {
    readonly Internet: "Internet";
    readonly Vpc: "VPC";
};
/**
 * Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
 */
export type AccessPointNetworkOrigin = (typeof AccessPointNetworkOrigin)[keyof typeof AccessPointNetworkOrigin];
export declare const BucketAccelerateConfigurationAccelerationStatus: {
    readonly Enabled: "Enabled";
    readonly Suspended: "Suspended";
};
/**
 * Specifies the transfer acceleration status of the bucket.
 */
export type BucketAccelerateConfigurationAccelerationStatus = (typeof BucketAccelerateConfigurationAccelerationStatus)[keyof typeof BucketAccelerateConfigurationAccelerationStatus];
export declare const BucketAccessControl: {
    readonly AuthenticatedRead: "AuthenticatedRead";
    readonly AwsExecRead: "AwsExecRead";
    readonly BucketOwnerFullControl: "BucketOwnerFullControl";
    readonly BucketOwnerRead: "BucketOwnerRead";
    readonly LogDeliveryWrite: "LogDeliveryWrite";
    readonly Private: "Private";
    readonly PublicRead: "PublicRead";
    readonly PublicReadWrite: "PublicReadWrite";
};
/**
 * This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see [Controlling object ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
 *   A canned access control list (ACL) that grants predefined permissions to the bucket. For more information about canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
 *   S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring ACLs are uncommon.
 *   The majority of access control configurations can be successfully and more easily achieved with bucket policies. For more information, see [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the *Amazon S3 User Guide*.
 */
export type BucketAccessControl = (typeof BucketAccessControl)[keyof typeof BucketAccessControl];
export declare const BucketCorsRuleAllowedMethodsItem: {
    readonly Get: "GET";
    readonly Put: "PUT";
    readonly Head: "HEAD";
    readonly Post: "POST";
    readonly Delete: "DELETE";
};
export type BucketCorsRuleAllowedMethodsItem = (typeof BucketCorsRuleAllowedMethodsItem)[keyof typeof BucketCorsRuleAllowedMethodsItem];
export declare const BucketDefaultRetentionMode: {
    readonly Compliance: "COMPLIANCE";
    readonly Governance: "GOVERNANCE";
};
/**
 * The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
 */
export type BucketDefaultRetentionMode = (typeof BucketDefaultRetentionMode)[keyof typeof BucketDefaultRetentionMode];
export declare const BucketDeleteMarkerReplicationStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Indicates whether to replicate delete markers. Disabled by default.
 */
export type BucketDeleteMarkerReplicationStatus = (typeof BucketDeleteMarkerReplicationStatus)[keyof typeof BucketDeleteMarkerReplicationStatus];
export declare const BucketDestinationFormat: {
    readonly Csv: "CSV";
    readonly Orc: "ORC";
    readonly Parquet: "Parquet";
};
/**
 * Specifies the file format used when exporting data to Amazon S3.
 *   *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``
 */
export type BucketDestinationFormat = (typeof BucketDestinationFormat)[keyof typeof BucketDestinationFormat];
export declare const BucketIntelligentTieringConfigurationStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies the status of the configuration.
 */
export type BucketIntelligentTieringConfigurationStatus = (typeof BucketIntelligentTieringConfigurationStatus)[keyof typeof BucketIntelligentTieringConfigurationStatus];
export declare const BucketInventoryConfigurationIncludedObjectVersions: {
    readonly All: "All";
    readonly Current: "Current";
};
/**
 * Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
 */
export type BucketInventoryConfigurationIncludedObjectVersions = (typeof BucketInventoryConfigurationIncludedObjectVersions)[keyof typeof BucketInventoryConfigurationIncludedObjectVersions];
export declare const BucketInventoryConfigurationOptionalFieldsItem: {
    readonly Size: "Size";
    readonly LastModifiedDate: "LastModifiedDate";
    readonly StorageClass: "StorageClass";
    readonly ETag: "ETag";
    readonly IsMultipartUploaded: "IsMultipartUploaded";
    readonly ReplicationStatus: "ReplicationStatus";
    readonly EncryptionStatus: "EncryptionStatus";
    readonly ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate";
    readonly ObjectLockMode: "ObjectLockMode";
    readonly ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus";
    readonly IntelligentTieringAccessTier: "IntelligentTieringAccessTier";
    readonly BucketKeyStatus: "BucketKeyStatus";
    readonly ChecksumAlgorithm: "ChecksumAlgorithm";
    readonly ObjectAccessControlList: "ObjectAccessControlList";
    readonly ObjectOwner: "ObjectOwner";
};
export type BucketInventoryConfigurationOptionalFieldsItem = (typeof BucketInventoryConfigurationOptionalFieldsItem)[keyof typeof BucketInventoryConfigurationOptionalFieldsItem];
export declare const BucketInventoryConfigurationScheduleFrequency: {
    readonly Daily: "Daily";
    readonly Weekly: "Weekly";
};
/**
 * Specifies the schedule for generating inventory results.
 */
export type BucketInventoryConfigurationScheduleFrequency = (typeof BucketInventoryConfigurationScheduleFrequency)[keyof typeof BucketInventoryConfigurationScheduleFrequency];
export declare const BucketLifecycleConfigurationTransitionDefaultMinimumObjectSize: {
    readonly VariesByStorageClass: "varies_by_storage_class";
    readonly AllStorageClasses128k: "all_storage_classes_128K";
};
export type BucketLifecycleConfigurationTransitionDefaultMinimumObjectSize = (typeof BucketLifecycleConfigurationTransitionDefaultMinimumObjectSize)[keyof typeof BucketLifecycleConfigurationTransitionDefaultMinimumObjectSize];
export declare const BucketMetricsStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether the replication metrics are enabled.
 */
export type BucketMetricsStatus = (typeof BucketMetricsStatus)[keyof typeof BucketMetricsStatus];
export declare const BucketNoncurrentVersionTransitionStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly GlacierIr: "GLACIER_IR";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly StandardIa: "STANDARD_IA";
};
/**
 * The class of storage used to store the object.
 */
export type BucketNoncurrentVersionTransitionStorageClass = (typeof BucketNoncurrentVersionTransitionStorageClass)[keyof typeof BucketNoncurrentVersionTransitionStorageClass];
export declare const BucketOwnershipControlsRuleObjectOwnership: {
    readonly ObjectWriter: "ObjectWriter";
    readonly BucketOwnerPreferred: "BucketOwnerPreferred";
    readonly BucketOwnerEnforced: "BucketOwnerEnforced";
};
/**
 * Specifies an object ownership rule.
 */
export type BucketOwnershipControlsRuleObjectOwnership = (typeof BucketOwnershipControlsRuleObjectOwnership)[keyof typeof BucketOwnershipControlsRuleObjectOwnership];
export declare const BucketRedirectAllRequestsToProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
 */
export type BucketRedirectAllRequestsToProtocol = (typeof BucketRedirectAllRequestsToProtocol)[keyof typeof BucketRedirectAllRequestsToProtocol];
export declare const BucketRedirectRuleProtocol: {
    readonly Http: "http";
    readonly Https: "https";
};
/**
 * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
 */
export type BucketRedirectRuleProtocol = (typeof BucketRedirectRuleProtocol)[keyof typeof BucketRedirectRuleProtocol];
export declare const BucketReplicaModificationsStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Specifies whether Amazon S3 replicates modifications on replicas.
 *   *Allowed values*: ``Enabled`` | ``Disabled``
 */
export type BucketReplicaModificationsStatus = (typeof BucketReplicaModificationsStatus)[keyof typeof BucketReplicaModificationsStatus];
export declare const BucketReplicationDestinationStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly GlacierIr: "GLACIER_IR";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly ReducedRedundancy: "REDUCED_REDUNDANCY";
    readonly Standard: "STANDARD";
    readonly StandardIa: "STANDARD_IA";
};
/**
 * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica.
 *  For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.
 */
export type BucketReplicationDestinationStorageClass = (typeof BucketReplicationDestinationStorageClass)[keyof typeof BucketReplicationDestinationStorageClass];
export declare const BucketReplicationRuleStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether the rule is enabled.
 */
export type BucketReplicationRuleStatus = (typeof BucketReplicationRuleStatus)[keyof typeof BucketReplicationRuleStatus];
export declare const BucketReplicationTimeStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether the replication time is enabled.
 */
export type BucketReplicationTimeStatus = (typeof BucketReplicationTimeStatus)[keyof typeof BucketReplicationTimeStatus];
export declare const BucketRuleStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
 */
export type BucketRuleStatus = (typeof BucketRuleStatus)[keyof typeof BucketRuleStatus];
export declare const BucketServerSideEncryptionByDefaultSseAlgorithm: {
    readonly Awskms: "aws:kms";
    readonly Aes256: "AES256";
    readonly Awskmsdsse: "aws:kms:dsse";
};
/**
 * Server-side encryption algorithm to use for the default encryption.
 *   For directory buckets, there are only two supported values for server-side encryption: ``AES256`` and ``aws:kms``.
 */
export type BucketServerSideEncryptionByDefaultSseAlgorithm = (typeof BucketServerSideEncryptionByDefaultSseAlgorithm)[keyof typeof BucketServerSideEncryptionByDefaultSseAlgorithm];
export declare const BucketSseKmsEncryptedObjectsStatus: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.
 */
export type BucketSseKmsEncryptedObjectsStatus = (typeof BucketSseKmsEncryptedObjectsStatus)[keyof typeof BucketSseKmsEncryptedObjectsStatus];
export declare const BucketTieringAccessTier: {
    readonly ArchiveAccess: "ARCHIVE_ACCESS";
    readonly DeepArchiveAccess: "DEEP_ARCHIVE_ACCESS";
};
/**
 * S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
 */
export type BucketTieringAccessTier = (typeof BucketTieringAccessTier)[keyof typeof BucketTieringAccessTier];
export declare const BucketTransitionStorageClass: {
    readonly DeepArchive: "DEEP_ARCHIVE";
    readonly Glacier: "GLACIER";
    readonly GlacierIr: "GLACIER_IR";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly StandardIa: "STANDARD_IA";
};
/**
 * The storage class to which you want the object to transition.
 */
export type BucketTransitionStorageClass = (typeof BucketTransitionStorageClass)[keyof typeof BucketTransitionStorageClass];
export declare const BucketVersioningConfigurationStatus: {
    readonly Enabled: "Enabled";
    readonly Suspended: "Suspended";
};
/**
 * The versioning state of the bucket.
 */
export type BucketVersioningConfigurationStatus = (typeof BucketVersioningConfigurationStatus)[keyof typeof BucketVersioningConfigurationStatus];
export declare const MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic: {
    readonly True: "true";
    readonly False: "false";
};
/**
 * Specifies whether the policy is public or not.
 */
export type MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic = (typeof MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic)[keyof typeof MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic];
export declare const StorageLensS3BucketDestinationFormat: {
    readonly Csv: "CSV";
    readonly Parquet: "Parquet";
};
/**
 * Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
 */
export type StorageLensS3BucketDestinationFormat = (typeof StorageLensS3BucketDestinationFormat)[keyof typeof StorageLensS3BucketDestinationFormat];
export declare const StorageLensS3BucketDestinationOutputSchemaVersion: {
    readonly V1: "V_1";
};
/**
 * The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
 */
export type StorageLensS3BucketDestinationOutputSchemaVersion = (typeof StorageLensS3BucketDestinationOutputSchemaVersion)[keyof typeof StorageLensS3BucketDestinationOutputSchemaVersion];
