export declare const ChannelLatencyMode: {
    readonly Normal: "NORMAL";
    readonly Low: "LOW";
};
/**
 * Channel latency mode.
 */
export type ChannelLatencyMode = (typeof ChannelLatencyMode)[keyof typeof ChannelLatencyMode];
export declare const ChannelPreset: {
    readonly Empty: "";
    readonly HigherBandwidthDelivery: "HIGHER_BANDWIDTH_DELIVERY";
    readonly ConstrainedBandwidthDelivery: "CONSTRAINED_BANDWIDTH_DELIVERY";
};
/**
 * Optional transcode preset for the channel. This is selectable only for ADVANCED_HD and ADVANCED_SD channel types. For those channel types, the default preset is HIGHER_BANDWIDTH_DELIVERY. For other channel types (BASIC and STANDARD), preset is the empty string ("").
 */
export type ChannelPreset = (typeof ChannelPreset)[keyof typeof ChannelPreset];
export declare const ChannelType: {
    readonly Standard: "STANDARD";
    readonly Basic: "BASIC";
    readonly AdvancedSd: "ADVANCED_SD";
    readonly AdvancedHd: "ADVANCED_HD";
};
/**
 * Channel type, which determines the allowable resolution and bitrate. If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.
 */
export type ChannelType = (typeof ChannelType)[keyof typeof ChannelType];
export declare const IngestConfigurationIngestProtocol: {
    readonly Rtmp: "RTMP";
    readonly Rtmps: "RTMPS";
};
/**
 * Ingest Protocol.
 */
export type IngestConfigurationIngestProtocol = (typeof IngestConfigurationIngestProtocol)[keyof typeof IngestConfigurationIngestProtocol];
export declare const IngestConfigurationState: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * State of IngestConfiguration which determines whether IngestConfiguration is in use or not.
 */
export type IngestConfigurationState = (typeof IngestConfigurationState)[keyof typeof IngestConfigurationState];
export declare const RecordingConfigurationRenditionConfigurationRenditionSelection: {
    readonly All: "ALL";
    readonly None: "NONE";
    readonly Custom: "CUSTOM";
};
/**
 * Resolution Selection indicates which set of renditions are recorded for a stream.
 */
export type RecordingConfigurationRenditionConfigurationRenditionSelection = (typeof RecordingConfigurationRenditionConfigurationRenditionSelection)[keyof typeof RecordingConfigurationRenditionConfigurationRenditionSelection];
export declare const RecordingConfigurationRenditionConfigurationRenditionsItem: {
    readonly FullHd: "FULL_HD";
    readonly Hd: "HD";
    readonly Sd: "SD";
    readonly LowestResolution: "LOWEST_RESOLUTION";
};
export type RecordingConfigurationRenditionConfigurationRenditionsItem = (typeof RecordingConfigurationRenditionConfigurationRenditionsItem)[keyof typeof RecordingConfigurationRenditionConfigurationRenditionsItem];
export declare const RecordingConfigurationState: {
    readonly Creating: "CREATING";
    readonly CreateFailed: "CREATE_FAILED";
    readonly Active: "ACTIVE";
};
/**
 * Recording Configuration State.
 */
export type RecordingConfigurationState = (typeof RecordingConfigurationState)[keyof typeof RecordingConfigurationState];
export declare const RecordingConfigurationThumbnailConfigurationRecordingMode: {
    readonly Interval: "INTERVAL";
    readonly Disabled: "DISABLED";
};
/**
 * Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
 */
export type RecordingConfigurationThumbnailConfigurationRecordingMode = (typeof RecordingConfigurationThumbnailConfigurationRecordingMode)[keyof typeof RecordingConfigurationThumbnailConfigurationRecordingMode];
export declare const RecordingConfigurationThumbnailConfigurationResolution: {
    readonly FullHd: "FULL_HD";
    readonly Hd: "HD";
    readonly Sd: "SD";
    readonly LowestResolution: "LOWEST_RESOLUTION";
};
/**
 * Resolution indicates the desired resolution of recorded thumbnails.
 */
export type RecordingConfigurationThumbnailConfigurationResolution = (typeof RecordingConfigurationThumbnailConfigurationResolution)[keyof typeof RecordingConfigurationThumbnailConfigurationResolution];
export declare const RecordingConfigurationThumbnailConfigurationStorageItem: {
    readonly Sequential: "SEQUENTIAL";
    readonly Latest: "LATEST";
};
export type RecordingConfigurationThumbnailConfigurationStorageItem = (typeof RecordingConfigurationThumbnailConfigurationStorageItem)[keyof typeof RecordingConfigurationThumbnailConfigurationStorageItem];
export declare const StageAutoParticipantRecordingConfigurationMediaTypesItem: {
    readonly AudioVideo: "AUDIO_VIDEO";
    readonly AudioOnly: "AUDIO_ONLY";
};
export type StageAutoParticipantRecordingConfigurationMediaTypesItem = (typeof StageAutoParticipantRecordingConfigurationMediaTypesItem)[keyof typeof StageAutoParticipantRecordingConfigurationMediaTypesItem];
