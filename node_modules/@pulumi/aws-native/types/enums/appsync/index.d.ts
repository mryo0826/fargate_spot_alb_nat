export declare const ApiAuthenticationType: {
    readonly AmazonCognitoUserPools: "AMAZON_COGNITO_USER_POOLS";
    readonly AwsIam: "AWS_IAM";
    readonly ApiKey: "API_KEY";
    readonly OpenidConnect: "OPENID_CONNECT";
    readonly AwsLambda: "AWS_LAMBDA";
};
/**
 * Security configuration for your AppSync API.
 */
export type ApiAuthenticationType = (typeof ApiAuthenticationType)[keyof typeof ApiAuthenticationType];
export declare const ApiEventLogLevel: {
    readonly None: "NONE";
    readonly Error: "ERROR";
    readonly All: "ALL";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
};
/**
 * Logging level for the AppSync API.
 */
export type ApiEventLogLevel = (typeof ApiEventLogLevel)[keyof typeof ApiEventLogLevel];
export declare const ChannelNamespaceAuthenticationType: {
    readonly AmazonCognitoUserPools: "AMAZON_COGNITO_USER_POOLS";
    readonly AwsIam: "AWS_IAM";
    readonly ApiKey: "API_KEY";
    readonly OpenidConnect: "OPENID_CONNECT";
    readonly AwsLambda: "AWS_LAMBDA";
};
/**
 * Security configuration for your AppSync API.
 */
export type ChannelNamespaceAuthenticationType = (typeof ChannelNamespaceAuthenticationType)[keyof typeof ChannelNamespaceAuthenticationType];
export declare const DataSourceMetricsConfig: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
/**
 * Enables or disables enhanced data source metrics for specified data sources. Note that `MetricsConfig` won't be used unless the `dataSourceLevelMetricsBehavior` value is set to `PER_DATA_SOURCE_METRICS` . If the `dataSourceLevelMetricsBehavior` is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `MetricsConfig` will be ignored. However, you can still set its value.
 *
 * `MetricsConfig` can be `ENABLED` or `DISABLED` .
 */
export type DataSourceMetricsConfig = (typeof DataSourceMetricsConfig)[keyof typeof DataSourceMetricsConfig];
export declare const ResolverMetricsConfig: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
 */
export type ResolverMetricsConfig = (typeof ResolverMetricsConfig)[keyof typeof ResolverMetricsConfig];
export declare const SourceApiAssociationConfigMergeType: {
    readonly AutoMerge: "AUTO_MERGE";
    readonly ManualMerge: "MANUAL_MERGE";
};
/**
 * Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
 */
export type SourceApiAssociationConfigMergeType = (typeof SourceApiAssociationConfigMergeType)[keyof typeof SourceApiAssociationConfigMergeType];
export declare const SourceApiAssociationStatus: {
    readonly MergeScheduled: "MERGE_SCHEDULED";
    readonly MergeFailed: "MERGE_FAILED";
    readonly MergeSuccess: "MERGE_SUCCESS";
    readonly MergeInProgress: "MERGE_IN_PROGRESS";
    readonly AutoMergeScheduleFailed: "AUTO_MERGE_SCHEDULE_FAILED";
    readonly DeletionScheduled: "DELETION_SCHEDULED";
    readonly DeletionInProgress: "DELETION_IN_PROGRESS";
    readonly DeletionFailed: "DELETION_FAILED";
};
/**
 * Current status of SourceApiAssociation.
 */
export type SourceApiAssociationStatus = (typeof SourceApiAssociationStatus)[keyof typeof SourceApiAssociationStatus];
