export declare const AnalysisTemplateAnalysisParameterType: {
    readonly Smallint: "SMALLINT";
    readonly Integer: "INTEGER";
    readonly Bigint: "BIGINT";
    readonly Decimal: "DECIMAL";
    readonly Real: "REAL";
    readonly DoublePrecision: "DOUBLE_PRECISION";
    readonly Boolean: "BOOLEAN";
    readonly Char: "CHAR";
    readonly Varchar: "VARCHAR";
    readonly Date: "DATE";
    readonly Timestamp: "TIMESTAMP";
    readonly Timestamptz: "TIMESTAMPTZ";
    readonly Time: "TIME";
    readonly Timetz: "TIMETZ";
    readonly Varbyte: "VARBYTE";
    readonly Binary: "BINARY";
    readonly Byte: "BYTE";
    readonly Character: "CHARACTER";
    readonly Double: "DOUBLE";
    readonly Float: "FLOAT";
    readonly Int: "INT";
    readonly Long: "LONG";
    readonly Numeric: "NUMERIC";
    readonly Short: "SHORT";
    readonly String: "STRING";
    readonly TimestampLtz: "TIMESTAMP_LTZ";
    readonly TimestampNtz: "TIMESTAMP_NTZ";
    readonly Tinyint: "TINYINT";
};
/**
 * The type of parameter.
 */
export type AnalysisTemplateAnalysisParameterType = (typeof AnalysisTemplateAnalysisParameterType)[keyof typeof AnalysisTemplateAnalysisParameterType];
export declare const AnalysisTemplateFormat: {
    readonly Sql: "SQL";
};
/**
 * The format of the analysis template.
 */
export type AnalysisTemplateFormat = (typeof AnalysisTemplateFormat)[keyof typeof AnalysisTemplateFormat];
export declare const CollaborationAnalyticsEngine: {
    readonly CleanRoomsSql: "CLEAN_ROOMS_SQL";
    readonly Spark: "SPARK";
};
export type CollaborationAnalyticsEngine = (typeof CollaborationAnalyticsEngine)[keyof typeof CollaborationAnalyticsEngine];
export declare const CollaborationMemberAbility: {
    readonly CanQuery: "CAN_QUERY";
    readonly CanReceiveResults: "CAN_RECEIVE_RESULTS";
};
export type CollaborationMemberAbility = (typeof CollaborationMemberAbility)[keyof typeof CollaborationMemberAbility];
export declare const CollaborationQueryLogStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type CollaborationQueryLogStatus = (typeof CollaborationQueryLogStatus)[keyof typeof CollaborationQueryLogStatus];
export declare const ConfiguredTableAdditionalAnalyses: {
    readonly Allowed: "ALLOWED";
    readonly Required: "REQUIRED";
    readonly NotAllowed: "NOT_ALLOWED";
};
export type ConfiguredTableAdditionalAnalyses = (typeof ConfiguredTableAdditionalAnalyses)[keyof typeof ConfiguredTableAdditionalAnalyses];
export declare const ConfiguredTableAggregateFunctionName: {
    readonly Sum: "SUM";
    readonly SumDistinct: "SUM_DISTINCT";
    readonly Count: "COUNT";
    readonly CountDistinct: "COUNT_DISTINCT";
    readonly Avg: "AVG";
};
export type ConfiguredTableAggregateFunctionName = (typeof ConfiguredTableAggregateFunctionName)[keyof typeof ConfiguredTableAggregateFunctionName];
export declare const ConfiguredTableAggregationType: {
    readonly CountDistinct: "COUNT_DISTINCT";
};
export type ConfiguredTableAggregationType = (typeof ConfiguredTableAggregationType)[keyof typeof ConfiguredTableAggregationType];
export declare const ConfiguredTableAnalysisMethod: {
    readonly DirectQuery: "DIRECT_QUERY";
};
export type ConfiguredTableAnalysisMethod = (typeof ConfiguredTableAnalysisMethod)[keyof typeof ConfiguredTableAnalysisMethod];
export declare const ConfiguredTableAnalysisRuleType: {
    readonly Aggregation: "AGGREGATION";
    readonly List: "LIST";
    readonly Custom: "CUSTOM";
};
export type ConfiguredTableAnalysisRuleType = (typeof ConfiguredTableAnalysisRuleType)[keyof typeof ConfiguredTableAnalysisRuleType];
export declare const ConfiguredTableAssociationAnalysisRuleType: {
    readonly Aggregation: "AGGREGATION";
    readonly List: "LIST";
    readonly Custom: "CUSTOM";
};
export type ConfiguredTableAssociationAnalysisRuleType = (typeof ConfiguredTableAssociationAnalysisRuleType)[keyof typeof ConfiguredTableAssociationAnalysisRuleType];
export declare const ConfiguredTableJoinOperator: {
    readonly Or: "OR";
    readonly And: "AND";
};
export type ConfiguredTableJoinOperator = (typeof ConfiguredTableJoinOperator)[keyof typeof ConfiguredTableJoinOperator];
export declare const ConfiguredTableJoinRequiredOption: {
    readonly QueryRunner: "QUERY_RUNNER";
};
export type ConfiguredTableJoinRequiredOption = (typeof ConfiguredTableJoinRequiredOption)[keyof typeof ConfiguredTableJoinRequiredOption];
export declare const ConfiguredTableScalarFunctions: {
    readonly Trunc: "TRUNC";
    readonly Abs: "ABS";
    readonly Ceiling: "CEILING";
    readonly Floor: "FLOOR";
    readonly Ln: "LN";
    readonly Log: "LOG";
    readonly Round: "ROUND";
    readonly Sqrt: "SQRT";
    readonly Cast: "CAST";
    readonly Lower: "LOWER";
    readonly Rtrim: "RTRIM";
    readonly Upper: "UPPER";
    readonly Coalesce: "COALESCE";
    readonly Convert: "CONVERT";
    readonly CurrentDate: "CURRENT_DATE";
    readonly Dateadd: "DATEADD";
    readonly Extract: "EXTRACT";
    readonly Getdate: "GETDATE";
    readonly Substring: "SUBSTRING";
    readonly ToChar: "TO_CHAR";
    readonly ToDate: "TO_DATE";
    readonly ToNumber: "TO_NUMBER";
    readonly ToTimestamp: "TO_TIMESTAMP";
    readonly Trim: "TRIM";
};
export type ConfiguredTableScalarFunctions = (typeof ConfiguredTableScalarFunctions)[keyof typeof ConfiguredTableScalarFunctions];
export declare const IdMappingTableInputSourceType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
/**
 * The type of the input source of the ID mapping table.
 */
export type IdMappingTableInputSourceType = (typeof IdMappingTableInputSourceType)[keyof typeof IdMappingTableInputSourceType];
export declare const IdNamespaceAssociationInputReferencePropertiesIdNamespaceType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
/**
 * The ID namespace type for this ID namespace association.
 */
export type IdNamespaceAssociationInputReferencePropertiesIdNamespaceType = (typeof IdNamespaceAssociationInputReferencePropertiesIdNamespaceType)[keyof typeof IdNamespaceAssociationInputReferencePropertiesIdNamespaceType];
export declare const MembershipQueryLogStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type MembershipQueryLogStatus = (typeof MembershipQueryLogStatus)[keyof typeof MembershipQueryLogStatus];
export declare const MembershipResultFormat: {
    readonly Csv: "CSV";
    readonly Parquet: "PARQUET";
};
export type MembershipResultFormat = (typeof MembershipResultFormat)[keyof typeof MembershipResultFormat];
export declare const PrivacyBudgetTemplateAutoRefresh: {
    readonly CalendarMonth: "CALENDAR_MONTH";
    readonly None: "NONE";
};
/**
 * How often the privacy budget refreshes.
 *
 * > If you plan to regularly bring new data into the collaboration, use `CALENDAR_MONTH` to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.
 */
export type PrivacyBudgetTemplateAutoRefresh = (typeof PrivacyBudgetTemplateAutoRefresh)[keyof typeof PrivacyBudgetTemplateAutoRefresh];
export declare const PrivacyBudgetTemplatePrivacyBudgetType: {
    readonly DifferentialPrivacy: "DIFFERENTIAL_PRIVACY";
};
/**
 * Specifies the type of the privacy budget template.
 */
export type PrivacyBudgetTemplatePrivacyBudgetType = (typeof PrivacyBudgetTemplatePrivacyBudgetType)[keyof typeof PrivacyBudgetTemplatePrivacyBudgetType];
