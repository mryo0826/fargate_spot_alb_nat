export declare const ApplicationCheckpointConfigurationConfigurationType: {
    readonly Default: "DEFAULT";
    readonly Custom: "CUSTOM";
};
/**
 * Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
 */
export type ApplicationCheckpointConfigurationConfigurationType = (typeof ApplicationCheckpointConfigurationConfigurationType)[keyof typeof ApplicationCheckpointConfigurationConfigurationType];
export declare const ApplicationCodeConfigurationCodeContentType: {
    readonly Plaintext: "PLAINTEXT";
    readonly Zipfile: "ZIPFILE";
};
/**
 * Specifies whether the code content is in text or zip format.
 */
export type ApplicationCodeConfigurationCodeContentType = (typeof ApplicationCodeConfigurationCodeContentType)[keyof typeof ApplicationCodeConfigurationCodeContentType];
export declare const ApplicationCustomArtifactConfigurationArtifactType: {
    readonly DependencyJar: "DEPENDENCY_JAR";
    readonly Udf: "UDF";
};
/**
 * Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
 */
export type ApplicationCustomArtifactConfigurationArtifactType = (typeof ApplicationCustomArtifactConfigurationArtifactType)[keyof typeof ApplicationCustomArtifactConfigurationArtifactType];
export declare const ApplicationInputSchemaRecordEncoding: {
    readonly Utf8: "UTF-8";
};
/**
 * Specifies the encoding of the records in the streaming source. For example, UTF-8.
 */
export type ApplicationInputSchemaRecordEncoding = (typeof ApplicationInputSchemaRecordEncoding)[keyof typeof ApplicationInputSchemaRecordEncoding];
export declare const ApplicationMode: {
    readonly Interactive: "INTERACTIVE";
    readonly Streaming: "STREAMING";
};
/**
 * To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
 */
export type ApplicationMode = (typeof ApplicationMode)[keyof typeof ApplicationMode];
export declare const ApplicationMonitoringConfigurationConfigurationType: {
    readonly Default: "DEFAULT";
    readonly Custom: "CUSTOM";
};
/**
 * Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
 */
export type ApplicationMonitoringConfigurationConfigurationType = (typeof ApplicationMonitoringConfigurationConfigurationType)[keyof typeof ApplicationMonitoringConfigurationConfigurationType];
export declare const ApplicationMonitoringConfigurationLogLevel: {
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
/**
 * Describes the verbosity of the CloudWatch Logs for an application.
 */
export type ApplicationMonitoringConfigurationLogLevel = (typeof ApplicationMonitoringConfigurationLogLevel)[keyof typeof ApplicationMonitoringConfigurationLogLevel];
export declare const ApplicationMonitoringConfigurationMetricsLevel: {
    readonly Application: "APPLICATION";
    readonly Operator: "OPERATOR";
    readonly Parallelism: "PARALLELISM";
    readonly Task: "TASK";
};
/**
 * Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
 */
export type ApplicationMonitoringConfigurationMetricsLevel = (typeof ApplicationMonitoringConfigurationMetricsLevel)[keyof typeof ApplicationMonitoringConfigurationMetricsLevel];
export declare const ApplicationParallelismConfigurationConfigurationType: {
    readonly Custom: "CUSTOM";
    readonly Default: "DEFAULT";
};
/**
 * Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
 */
export type ApplicationParallelismConfigurationConfigurationType = (typeof ApplicationParallelismConfigurationConfigurationType)[keyof typeof ApplicationParallelismConfigurationConfigurationType];
export declare const ApplicationRecordFormatRecordFormatType: {
    readonly Csv: "CSV";
    readonly Json: "JSON";
};
/**
 * The type of record format.
 */
export type ApplicationRecordFormatRecordFormatType = (typeof ApplicationRecordFormatRecordFormatType)[keyof typeof ApplicationRecordFormatRecordFormatType];
export declare const ApplicationRestoreConfigurationApplicationRestoreType: {
    readonly SkipRestoreFromSnapshot: "SKIP_RESTORE_FROM_SNAPSHOT";
    readonly RestoreFromLatestSnapshot: "RESTORE_FROM_LATEST_SNAPSHOT";
    readonly RestoreFromCustomSnapshot: "RESTORE_FROM_CUSTOM_SNAPSHOT";
};
/**
 * Specifies how the application should be restored.
 */
export type ApplicationRestoreConfigurationApplicationRestoreType = (typeof ApplicationRestoreConfigurationApplicationRestoreType)[keyof typeof ApplicationRestoreConfigurationApplicationRestoreType];
export declare const ApplicationZeppelinMonitoringConfigurationLogLevel: {
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
/**
 * The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
 */
export type ApplicationZeppelinMonitoringConfigurationLogLevel = (typeof ApplicationZeppelinMonitoringConfigurationLogLevel)[keyof typeof ApplicationZeppelinMonitoringConfigurationLogLevel];
