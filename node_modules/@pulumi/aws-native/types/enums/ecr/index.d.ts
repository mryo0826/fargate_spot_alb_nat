export declare const ReplicationConfigurationFilterType: {
    readonly PrefixMatch: "PREFIX_MATCH";
};
/**
 * Type of repository filter
 */
export type ReplicationConfigurationFilterType = (typeof ReplicationConfigurationFilterType)[keyof typeof ReplicationConfigurationFilterType];
export declare const RepositoryCreationTemplateAppliedForItem: {
    readonly Replication: "REPLICATION";
    readonly PullThroughCache: "PULL_THROUGH_CACHE";
};
/**
 * Enumerable Strings representing the repository creation scenarios that the template will apply towards.
 */
export type RepositoryCreationTemplateAppliedForItem = (typeof RepositoryCreationTemplateAppliedForItem)[keyof typeof RepositoryCreationTemplateAppliedForItem];
export declare const RepositoryCreationTemplateEncryptionType: {
    readonly Aes256: "AES256";
    readonly Kms: "KMS";
    readonly KmsDsse: "KMS_DSSE";
};
/**
 * The encryption type to use.
 */
export type RepositoryCreationTemplateEncryptionType = (typeof RepositoryCreationTemplateEncryptionType)[keyof typeof RepositoryCreationTemplateEncryptionType];
export declare const RepositoryCreationTemplateImageTagMutability: {
    readonly Mutable: "MUTABLE";
    readonly Immutable: "IMMUTABLE";
};
/**
 * The image tag mutability setting for the repository.
 */
export type RepositoryCreationTemplateImageTagMutability = (typeof RepositoryCreationTemplateImageTagMutability)[keyof typeof RepositoryCreationTemplateImageTagMutability];
export declare const RepositoryEncryptionType: {
    readonly Aes256: "AES256";
    readonly Kms: "KMS";
    readonly KmsDsse: "KMS_DSSE";
};
/**
 * The encryption type to use.
 */
export type RepositoryEncryptionType = (typeof RepositoryEncryptionType)[keyof typeof RepositoryEncryptionType];
export declare const RepositoryImageTagMutability: {
    readonly Mutable: "MUTABLE";
    readonly Immutable: "IMMUTABLE";
};
/**
 * The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
 */
export type RepositoryImageTagMutability = (typeof RepositoryImageTagMutability)[keyof typeof RepositoryImageTagMutability];
