export declare const IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel: {
    readonly OneToOne: "ONE_TO_ONE";
    readonly ManyToMany: "MANY_TO_MANY";
};
/**
 * The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
 *
 * If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
 *
 * If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
 */
export type IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel = (typeof IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel)[keyof typeof IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel];
export declare const IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel: {
    readonly OneSourceToOneTarget: "ONE_SOURCE_TO_ONE_TARGET";
    readonly ManySourceToOneTarget: "MANY_SOURCE_TO_ONE_TARGET";
};
/**
 * The type of matching record that is allowed to be used in an ID mapping workflow.
 *
 * If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.
 *
 * If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
 */
export type IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel = (typeof IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel)[keyof typeof IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel];
export declare const IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
/**
 * The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
 */
export type IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType = (typeof IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType)[keyof typeof IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType];
export declare const IdMappingWorkflowIdMappingTechniquesIdMappingType: {
    readonly Provider: "PROVIDER";
    readonly RuleBased: "RULE_BASED";
};
/**
 * The type of ID mapping.
 */
export type IdMappingWorkflowIdMappingTechniquesIdMappingType = (typeof IdMappingWorkflowIdMappingTechniquesIdMappingType)[keyof typeof IdMappingWorkflowIdMappingTechniquesIdMappingType];
export declare const IdMappingWorkflowInputSourceType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
/**
 * The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
 *
 * The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
 *
 * The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
 */
export type IdMappingWorkflowInputSourceType = (typeof IdMappingWorkflowInputSourceType)[keyof typeof IdMappingWorkflowInputSourceType];
export declare const IdNamespaceIdMappingWorkflowPropertiesIdMappingType: {
    readonly Provider: "PROVIDER";
    readonly RuleBased: "RULE_BASED";
};
/**
 * The type of ID mapping.
 */
export type IdNamespaceIdMappingWorkflowPropertiesIdMappingType = (typeof IdNamespaceIdMappingWorkflowPropertiesIdMappingType)[keyof typeof IdNamespaceIdMappingWorkflowPropertiesIdMappingType];
export declare const IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel: {
    readonly OneToOne: "ONE_TO_ONE";
    readonly ManyToMany: "MANY_TO_MANY";
};
/**
 * The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
 *
 * If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.
 *
 * If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
 */
export type IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel = (typeof IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel)[keyof typeof IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel];
export declare const IdNamespaceRecordMatchingModel: {
    readonly OneSourceToOneTarget: "ONE_SOURCE_TO_ONE_TARGET";
    readonly ManySourceToOneTarget: "MANY_SOURCE_TO_ONE_TARGET";
};
export type IdNamespaceRecordMatchingModel = (typeof IdNamespaceRecordMatchingModel)[keyof typeof IdNamespaceRecordMatchingModel];
export declare const IdNamespaceRuleDefinitionType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
export type IdNamespaceRuleDefinitionType = (typeof IdNamespaceRuleDefinitionType)[keyof typeof IdNamespaceRuleDefinitionType];
export declare const IdNamespaceType: {
    readonly Source: "SOURCE";
    readonly Target: "TARGET";
};
/**
 * The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
 *
 * The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
 *
 * The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
 */
export type IdNamespaceType = (typeof IdNamespaceType)[keyof typeof IdNamespaceType];
export declare const MatchingWorkflowIncrementalRunConfigIncrementalRunType: {
    readonly Immediate: "IMMEDIATE";
};
/**
 * The type of incremental run. It takes only one value: `IMMEDIATE` .
 */
export type MatchingWorkflowIncrementalRunConfigIncrementalRunType = (typeof MatchingWorkflowIncrementalRunConfigIncrementalRunType)[keyof typeof MatchingWorkflowIncrementalRunConfigIncrementalRunType];
export declare const MatchingWorkflowResolutionType: {
    readonly RuleMatching: "RULE_MATCHING";
    readonly MlMatching: "ML_MATCHING";
    readonly Provider: "PROVIDER";
};
export type MatchingWorkflowResolutionType = (typeof MatchingWorkflowResolutionType)[keyof typeof MatchingWorkflowResolutionType];
export declare const MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel: {
    readonly OneToOne: "ONE_TO_ONE";
    readonly ManyToMany: "MANY_TO_MANY";
};
/**
 * The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .
 *
 * If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.
 *
 * If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
 */
export type MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel = (typeof MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel)[keyof typeof MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel];
export declare const MatchingWorkflowRuleBasedPropertiesMatchPurpose: {
    readonly IdentifierGeneration: "IDENTIFIER_GENERATION";
    readonly Indexing: "INDEXING";
};
/**
 * An indicator of whether to generate IDs and index the data or not.
 *
 * If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.
 *
 * If you choose `INDEXING` , the process indexes the data without generating IDs.
 */
export type MatchingWorkflowRuleBasedPropertiesMatchPurpose = (typeof MatchingWorkflowRuleBasedPropertiesMatchPurpose)[keyof typeof MatchingWorkflowRuleBasedPropertiesMatchPurpose];
export declare const PolicyStatementStatementEffect: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
export type PolicyStatementStatementEffect = (typeof PolicyStatementStatementEffect)[keyof typeof PolicyStatementStatementEffect];
export declare const SchemaMappingSchemaAttributeType: {
    readonly Name: "NAME";
    readonly NameFirst: "NAME_FIRST";
    readonly NameMiddle: "NAME_MIDDLE";
    readonly NameLast: "NAME_LAST";
    readonly Address: "ADDRESS";
    readonly AddressStreet1: "ADDRESS_STREET1";
    readonly AddressStreet2: "ADDRESS_STREET2";
    readonly AddressStreet3: "ADDRESS_STREET3";
    readonly AddressCity: "ADDRESS_CITY";
    readonly AddressState: "ADDRESS_STATE";
    readonly AddressCountry: "ADDRESS_COUNTRY";
    readonly AddressPostalcode: "ADDRESS_POSTALCODE";
    readonly Phone: "PHONE";
    readonly PhoneNumber: "PHONE_NUMBER";
    readonly PhoneCountrycode: "PHONE_COUNTRYCODE";
    readonly EmailAddress: "EMAIL_ADDRESS";
    readonly UniqueId: "UNIQUE_ID";
    readonly Date: "DATE";
    readonly String: "STRING";
    readonly ProviderId: "PROVIDER_ID";
};
export type SchemaMappingSchemaAttributeType = (typeof SchemaMappingSchemaAttributeType)[keyof typeof SchemaMappingSchemaAttributeType];
