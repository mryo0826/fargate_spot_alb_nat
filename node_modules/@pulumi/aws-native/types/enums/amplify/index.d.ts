export declare const AppAutoBranchCreationConfigStage: {
    readonly Experimental: "EXPERIMENTAL";
    readonly Beta: "BETA";
    readonly PullRequest: "PULL_REQUEST";
    readonly Production: "PRODUCTION";
    readonly Development: "DEVELOPMENT";
};
/**
 * Stage for the auto created branch.
 */
export type AppAutoBranchCreationConfigStage = (typeof AppAutoBranchCreationConfigStage)[keyof typeof AppAutoBranchCreationConfigStage];
export declare const AppCacheConfigType: {
    readonly AmplifyManaged: "AMPLIFY_MANAGED";
    readonly AmplifyManagedNoCookies: "AMPLIFY_MANAGED_NO_COOKIES";
};
/**
 * The type of cache configuration to use for an Amplify app.
 *
 * The `AMPLIFY_MANAGED` cache configuration automatically applies an optimized cache configuration for your app based on its platform, routing rules, and rewrite rules. This is the default setting.
 *
 * The `AMPLIFY_MANAGED_NO_COOKIES` cache configuration type is the same as `AMPLIFY_MANAGED` , except that it excludes all cookies from the cache key.
 */
export type AppCacheConfigType = (typeof AppCacheConfigType)[keyof typeof AppCacheConfigType];
export declare const AppPlatform: {
    readonly Web: "WEB";
    readonly WebDynamic: "WEB_DYNAMIC";
    readonly WebCompute: "WEB_COMPUTE";
};
/**
 * The platform for the Amplify app. For a static app, set the platform type to `WEB` . For a dynamic server-side rendered (SSR) app, set the platform type to `WEB_COMPUTE` . For an app requiring Amplify Hosting's original SSR support only, set the platform type to `WEB_DYNAMIC` .
 *
 * If you are deploying an SSG only app with Next.js version 14 or later, you must set the platform type to `WEB_COMPUTE` and set the artifacts `baseDirectory` to `.next` in the application's build settings. For an example of the build specification settings, see [Amplify build settings for a Next.js 14 SSG application](https://docs.aws.amazon.com/amplify/latest/userguide/deploy-nextjs-app.html#build-setting-detection-ssg-14) in the *Amplify Hosting User Guide* .
 */
export type AppPlatform = (typeof AppPlatform)[keyof typeof AppPlatform];
export declare const BranchStage: {
    readonly Experimental: "EXPERIMENTAL";
    readonly Beta: "BETA";
    readonly PullRequest: "PULL_REQUEST";
    readonly Production: "PRODUCTION";
    readonly Development: "DEVELOPMENT";
};
/**
 * Describes the current stage for the branch.
 */
export type BranchStage = (typeof BranchStage)[keyof typeof BranchStage];
export declare const DomainCertificateCertificateType: {
    readonly AmplifyManaged: "AMPLIFY_MANAGED";
    readonly Custom: "CUSTOM";
};
/**
 * The type of SSL/TLS certificate that you want to use.
 *
 * Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
 *
 * Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
 */
export type DomainCertificateCertificateType = (typeof DomainCertificateCertificateType)[keyof typeof DomainCertificateCertificateType];
export declare const DomainCertificateSettingsCertificateType: {
    readonly AmplifyManaged: "AMPLIFY_MANAGED";
    readonly Custom: "CUSTOM";
};
/**
 * The certificate type.
 *
 * Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
 *
 * Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
 */
export type DomainCertificateSettingsCertificateType = (typeof DomainCertificateSettingsCertificateType)[keyof typeof DomainCertificateSettingsCertificateType];
