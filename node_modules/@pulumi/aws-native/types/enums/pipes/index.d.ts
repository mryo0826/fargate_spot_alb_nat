export declare const PipeAssignPublicIp: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type PipeAssignPublicIp = (typeof PipeAssignPublicIp)[keyof typeof PipeAssignPublicIp];
export declare const PipeBatchJobDependencyType: {
    readonly NToN: "N_TO_N";
    readonly Sequential: "SEQUENTIAL";
};
export type PipeBatchJobDependencyType = (typeof PipeBatchJobDependencyType)[keyof typeof PipeBatchJobDependencyType];
export declare const PipeBatchResourceRequirementType: {
    readonly Gpu: "GPU";
    readonly Memory: "MEMORY";
    readonly Vcpu: "VCPU";
};
export type PipeBatchResourceRequirementType = (typeof PipeBatchResourceRequirementType)[keyof typeof PipeBatchResourceRequirementType];
export declare const PipeDimensionValueType: {
    readonly Varchar: "VARCHAR";
};
export type PipeDimensionValueType = (typeof PipeDimensionValueType)[keyof typeof PipeDimensionValueType];
export declare const PipeDynamoDbStreamStartPosition: {
    readonly TrimHorizon: "TRIM_HORIZON";
    readonly Latest: "LATEST";
};
export type PipeDynamoDbStreamStartPosition = (typeof PipeDynamoDbStreamStartPosition)[keyof typeof PipeDynamoDbStreamStartPosition];
export declare const PipeEcsEnvironmentFileType: {
    readonly S3: "s3";
};
export type PipeEcsEnvironmentFileType = (typeof PipeEcsEnvironmentFileType)[keyof typeof PipeEcsEnvironmentFileType];
export declare const PipeEcsResourceRequirementType: {
    readonly Gpu: "GPU";
    readonly InferenceAccelerator: "InferenceAccelerator";
};
export type PipeEcsResourceRequirementType = (typeof PipeEcsResourceRequirementType)[keyof typeof PipeEcsResourceRequirementType];
export declare const PipeEpochTimeUnit: {
    readonly Milliseconds: "MILLISECONDS";
    readonly Seconds: "SECONDS";
    readonly Microseconds: "MICROSECONDS";
    readonly Nanoseconds: "NANOSECONDS";
};
export type PipeEpochTimeUnit = (typeof PipeEpochTimeUnit)[keyof typeof PipeEpochTimeUnit];
export declare const PipeIncludeExecutionDataOption: {
    readonly All: "ALL";
};
export type PipeIncludeExecutionDataOption = (typeof PipeIncludeExecutionDataOption)[keyof typeof PipeIncludeExecutionDataOption];
export declare const PipeKinesisStreamStartPosition: {
    readonly TrimHorizon: "TRIM_HORIZON";
    readonly Latest: "LATEST";
    readonly AtTimestamp: "AT_TIMESTAMP";
};
export type PipeKinesisStreamStartPosition = (typeof PipeKinesisStreamStartPosition)[keyof typeof PipeKinesisStreamStartPosition];
export declare const PipeLaunchType: {
    readonly Ec2: "EC2";
    readonly Fargate: "FARGATE";
    readonly External: "EXTERNAL";
};
export type PipeLaunchType = (typeof PipeLaunchType)[keyof typeof PipeLaunchType];
export declare const PipeLogLevel: {
    readonly Off: "OFF";
    readonly Error: "ERROR";
    readonly Info: "INFO";
    readonly Trace: "TRACE";
};
export type PipeLogLevel = (typeof PipeLogLevel)[keyof typeof PipeLogLevel];
export declare const PipeMeasureValueType: {
    readonly Double: "DOUBLE";
    readonly Bigint: "BIGINT";
    readonly Varchar: "VARCHAR";
    readonly Boolean: "BOOLEAN";
    readonly Timestamp: "TIMESTAMP";
};
export type PipeMeasureValueType = (typeof PipeMeasureValueType)[keyof typeof PipeMeasureValueType];
export declare const PipeMskStartPosition: {
    readonly TrimHorizon: "TRIM_HORIZON";
    readonly Latest: "LATEST";
};
export type PipeMskStartPosition = (typeof PipeMskStartPosition)[keyof typeof PipeMskStartPosition];
export declare const PipeOnPartialBatchItemFailureStreams: {
    readonly AutomaticBisect: "AUTOMATIC_BISECT";
};
export type PipeOnPartialBatchItemFailureStreams = (typeof PipeOnPartialBatchItemFailureStreams)[keyof typeof PipeOnPartialBatchItemFailureStreams];
export declare const PipePlacementConstraintType: {
    readonly DistinctInstance: "distinctInstance";
    readonly MemberOf: "memberOf";
};
export type PipePlacementConstraintType = (typeof PipePlacementConstraintType)[keyof typeof PipePlacementConstraintType];
export declare const PipePlacementStrategyType: {
    readonly Random: "random";
    readonly Spread: "spread";
    readonly Binpack: "binpack";
};
export type PipePlacementStrategyType = (typeof PipePlacementStrategyType)[keyof typeof PipePlacementStrategyType];
export declare const PipePropagateTags: {
    readonly TaskDefinition: "TASK_DEFINITION";
};
export type PipePropagateTags = (typeof PipePropagateTags)[keyof typeof PipePropagateTags];
export declare const PipeRequestedPipeState: {
    readonly Running: "RUNNING";
    readonly Stopped: "STOPPED";
};
export type PipeRequestedPipeState = (typeof PipeRequestedPipeState)[keyof typeof PipeRequestedPipeState];
export declare const PipeS3OutputFormat: {
    readonly Json: "json";
    readonly Plain: "plain";
    readonly W3c: "w3c";
};
export type PipeS3OutputFormat = (typeof PipeS3OutputFormat)[keyof typeof PipeS3OutputFormat];
export declare const PipeSelfManagedKafkaStartPosition: {
    readonly TrimHorizon: "TRIM_HORIZON";
    readonly Latest: "LATEST";
};
export type PipeSelfManagedKafkaStartPosition = (typeof PipeSelfManagedKafkaStartPosition)[keyof typeof PipeSelfManagedKafkaStartPosition];
export declare const PipeState: {
    readonly Running: "RUNNING";
    readonly Stopped: "STOPPED";
    readonly Creating: "CREATING";
    readonly Updating: "UPDATING";
    readonly Deleting: "DELETING";
    readonly Starting: "STARTING";
    readonly Stopping: "STOPPING";
    readonly CreateFailed: "CREATE_FAILED";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly StartFailed: "START_FAILED";
    readonly StopFailed: "STOP_FAILED";
    readonly DeleteFailed: "DELETE_FAILED";
    readonly CreateRollbackFailed: "CREATE_ROLLBACK_FAILED";
    readonly DeleteRollbackFailed: "DELETE_ROLLBACK_FAILED";
    readonly UpdateRollbackFailed: "UPDATE_ROLLBACK_FAILED";
};
export type PipeState = (typeof PipeState)[keyof typeof PipeState];
export declare const PipeTargetInvocationType: {
    readonly RequestResponse: "REQUEST_RESPONSE";
    readonly FireAndForget: "FIRE_AND_FORGET";
};
export type PipeTargetInvocationType = (typeof PipeTargetInvocationType)[keyof typeof PipeTargetInvocationType];
export declare const PipeTimeFieldType: {
    readonly Epoch: "EPOCH";
    readonly TimestampFormat: "TIMESTAMP_FORMAT";
};
export type PipeTimeFieldType = (typeof PipeTimeFieldType)[keyof typeof PipeTimeFieldType];
