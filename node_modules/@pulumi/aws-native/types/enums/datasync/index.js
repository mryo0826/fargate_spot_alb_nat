"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatus = exports.TaskScheduleStatus = exports.TaskReportConfigReportLevel = exports.TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel = exports.TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel = exports.TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel = exports.TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel = exports.TaskReportConfigOutputType = exports.TaskReportConfigObjectVersionIds = exports.TaskOptionsVerifyMode = exports.TaskOptionsUid = exports.TaskOptionsTransferMode = exports.TaskOptionsTaskQueueing = exports.TaskOptionsSecurityDescriptorCopyFlags = exports.TaskOptionsPreserveDevices = exports.TaskOptionsPreserveDeletedFiles = exports.TaskOptionsPosixPermissions = exports.TaskOptionsOverwriteMode = exports.TaskOptionsObjectTags = exports.TaskOptionsMtime = exports.TaskOptionsLogLevel = exports.TaskOptionsGid = exports.TaskOptionsAtime = exports.TaskMode = exports.TaskManifestConfigFormat = exports.TaskManifestConfigAction = exports.TaskFilterRuleFilterType = exports.StorageSystemSystemType = exports.StorageSystemConnectivityStatus = exports.LocationSmbMountOptionsVersion = exports.LocationS3S3StorageClass = exports.LocationObjectStorageServerProtocol = exports.LocationNfsMountOptionsVersion = exports.LocationHdfsQopConfigurationRpcProtection = exports.LocationHdfsQopConfigurationDataTransferProtection = exports.LocationHdfsAuthenticationType = exports.LocationFSxOpenZfsMountOptionsVersion = exports.LocationFSxOntapSmbMountOptionsVersion = exports.LocationFSxOntapNfsMountOptionsVersion = exports.LocationEfsInTransitEncryption = exports.LocationAzureBlobAzureBlobType = exports.LocationAzureBlobAzureBlobAuthenticationType = exports.LocationAzureBlobAzureAccessTier = exports.AgentEndpointType = void 0;
exports.AgentEndpointType = {
    Fips: "FIPS",
    Public: "PUBLIC",
    PrivateLink: "PRIVATE_LINK",
};
exports.LocationAzureBlobAzureAccessTier = {
    Hot: "HOT",
    Cool: "COOL",
    Archive: "ARCHIVE",
};
exports.LocationAzureBlobAzureBlobAuthenticationType = {
    Sas: "SAS",
};
exports.LocationAzureBlobAzureBlobType = {
    Block: "BLOCK",
};
exports.LocationEfsInTransitEncryption = {
    None: "NONE",
    Tls12: "TLS1_2",
};
exports.LocationFSxOntapNfsMountOptionsVersion = {
    Automatic: "AUTOMATIC",
    Nfs3: "NFS3",
    Nfs40: "NFS4_0",
    Nfs41: "NFS4_1",
};
exports.LocationFSxOntapSmbMountOptionsVersion = {
    Automatic: "AUTOMATIC",
    Smb2: "SMB2",
    Smb3: "SMB3",
};
exports.LocationFSxOpenZfsMountOptionsVersion = {
    Automatic: "AUTOMATIC",
    Nfs3: "NFS3",
    Nfs40: "NFS4_0",
    Nfs41: "NFS4_1",
};
exports.LocationHdfsAuthenticationType = {
    Simple: "SIMPLE",
    Kerberos: "KERBEROS",
};
exports.LocationHdfsQopConfigurationDataTransferProtection = {
    Authentication: "AUTHENTICATION",
    Integrity: "INTEGRITY",
    Privacy: "PRIVACY",
    Disabled: "DISABLED",
};
exports.LocationHdfsQopConfigurationRpcProtection = {
    Authentication: "AUTHENTICATION",
    Integrity: "INTEGRITY",
    Privacy: "PRIVACY",
    Disabled: "DISABLED",
};
exports.LocationNfsMountOptionsVersion = {
    Automatic: "AUTOMATIC",
    Nfs3: "NFS3",
    Nfs40: "NFS4_0",
    Nfs41: "NFS4_1",
};
exports.LocationObjectStorageServerProtocol = {
    Https: "HTTPS",
    Http: "HTTP",
};
exports.LocationS3S3StorageClass = {
    Standard: "STANDARD",
    StandardIa: "STANDARD_IA",
    OnezoneIa: "ONEZONE_IA",
    IntelligentTiering: "INTELLIGENT_TIERING",
    Glacier: "GLACIER",
    GlacierInstantRetrieval: "GLACIER_INSTANT_RETRIEVAL",
    DeepArchive: "DEEP_ARCHIVE",
};
exports.LocationSmbMountOptionsVersion = {
    Automatic: "AUTOMATIC",
    Smb1: "SMB1",
    Smb20: "SMB2_0",
    Smb2: "SMB2",
    Smb3: "SMB3",
};
exports.StorageSystemConnectivityStatus = {
    Pass: "PASS",
    Fail: "FAIL",
    Unknown: "UNKNOWN",
};
exports.StorageSystemSystemType = {
    NetAppOntap: "NetAppONTAP",
};
exports.TaskFilterRuleFilterType = {
    SimplePattern: "SIMPLE_PATTERN",
};
exports.TaskManifestConfigAction = {
    Transfer: "TRANSFER",
};
exports.TaskManifestConfigFormat = {
    Csv: "CSV",
};
exports.TaskMode = {
    Basic: "BASIC",
    Enhanced: "ENHANCED",
};
exports.TaskOptionsAtime = {
    None: "NONE",
    BestEffort: "BEST_EFFORT",
};
exports.TaskOptionsGid = {
    None: "NONE",
    IntValue: "INT_VALUE",
    Name: "NAME",
    Both: "BOTH",
};
exports.TaskOptionsLogLevel = {
    Off: "OFF",
    Basic: "BASIC",
    Transfer: "TRANSFER",
};
exports.TaskOptionsMtime = {
    None: "NONE",
    Preserve: "PRESERVE",
};
exports.TaskOptionsObjectTags = {
    Preserve: "PRESERVE",
    None: "NONE",
};
exports.TaskOptionsOverwriteMode = {
    Always: "ALWAYS",
    Never: "NEVER",
};
exports.TaskOptionsPosixPermissions = {
    None: "NONE",
    Preserve: "PRESERVE",
};
exports.TaskOptionsPreserveDeletedFiles = {
    Preserve: "PRESERVE",
    Remove: "REMOVE",
};
exports.TaskOptionsPreserveDevices = {
    None: "NONE",
    Preserve: "PRESERVE",
};
exports.TaskOptionsSecurityDescriptorCopyFlags = {
    None: "NONE",
    OwnerDacl: "OWNER_DACL",
    OwnerDaclSacl: "OWNER_DACL_SACL",
};
exports.TaskOptionsTaskQueueing = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
};
exports.TaskOptionsTransferMode = {
    Changed: "CHANGED",
    All: "ALL",
};
exports.TaskOptionsUid = {
    None: "NONE",
    IntValue: "INT_VALUE",
    Name: "NAME",
    Both: "BOTH",
};
exports.TaskOptionsVerifyMode = {
    PointInTimeConsistent: "POINT_IN_TIME_CONSISTENT",
    OnlyFilesTransferred: "ONLY_FILES_TRANSFERRED",
    None: "NONE",
};
exports.TaskReportConfigObjectVersionIds = {
    Include: "INCLUDE",
    None: "NONE",
};
exports.TaskReportConfigOutputType = {
    SummaryOnly: "SUMMARY_ONLY",
    Standard: "STANDARD",
};
exports.TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel = {
    ErrorsOnly: "ERRORS_ONLY",
    SuccessesAndErrors: "SUCCESSES_AND_ERRORS",
};
exports.TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel = {
    ErrorsOnly: "ERRORS_ONLY",
    SuccessesAndErrors: "SUCCESSES_AND_ERRORS",
};
exports.TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel = {
    ErrorsOnly: "ERRORS_ONLY",
    SuccessesAndErrors: "SUCCESSES_AND_ERRORS",
};
exports.TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel = {
    ErrorsOnly: "ERRORS_ONLY",
    SuccessesAndErrors: "SUCCESSES_AND_ERRORS",
};
exports.TaskReportConfigReportLevel = {
    ErrorsOnly: "ERRORS_ONLY",
    SuccessesAndErrors: "SUCCESSES_AND_ERRORS",
};
exports.TaskScheduleStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
};
exports.TaskStatus = {
    Available: "AVAILABLE",
    Creating: "CREATING",
    Queued: "QUEUED",
    Running: "RUNNING",
    Unavailable: "UNAVAILABLE",
};
//# sourceMappingURL=index.js.map