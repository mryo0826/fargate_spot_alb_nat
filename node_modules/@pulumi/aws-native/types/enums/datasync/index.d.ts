export declare const AgentEndpointType: {
    readonly Fips: "FIPS";
    readonly Public: "PUBLIC";
    readonly PrivateLink: "PRIVATE_LINK";
};
/**
 * The service endpoints that the agent will connect to.
 */
export type AgentEndpointType = (typeof AgentEndpointType)[keyof typeof AgentEndpointType];
export declare const LocationAzureBlobAzureAccessTier: {
    readonly Hot: "HOT";
    readonly Cool: "COOL";
    readonly Archive: "ARCHIVE";
};
/**
 * Specifies an access tier for the objects you're transferring into your Azure Blob Storage container.
 */
export type LocationAzureBlobAzureAccessTier = (typeof LocationAzureBlobAzureAccessTier)[keyof typeof LocationAzureBlobAzureAccessTier];
export declare const LocationAzureBlobAzureBlobAuthenticationType: {
    readonly Sas: "SAS";
};
/**
 * The specific authentication type that you want DataSync to use to access your Azure Blob Container.
 */
export type LocationAzureBlobAzureBlobAuthenticationType = (typeof LocationAzureBlobAzureBlobAuthenticationType)[keyof typeof LocationAzureBlobAzureBlobAuthenticationType];
export declare const LocationAzureBlobAzureBlobType: {
    readonly Block: "BLOCK";
};
/**
 * Specifies a blob type for the objects you're transferring into your Azure Blob Storage container.
 */
export type LocationAzureBlobAzureBlobType = (typeof LocationAzureBlobAzureBlobType)[keyof typeof LocationAzureBlobAzureBlobType];
export declare const LocationEfsInTransitEncryption: {
    readonly None: "NONE";
    readonly Tls12: "TLS1_2";
};
/**
 * Protocol that is used for encrypting the traffic exchanged between the DataSync Agent and the EFS file system.
 */
export type LocationEfsInTransitEncryption = (typeof LocationEfsInTransitEncryption)[keyof typeof LocationEfsInTransitEncryption];
export declare const LocationFSxOntapNfsMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Nfs3: "NFS3";
    readonly Nfs40: "NFS4_0";
    readonly Nfs41: "NFS4_1";
};
/**
 * The specific NFS version that you want DataSync to use to mount your NFS share.
 */
export type LocationFSxOntapNfsMountOptionsVersion = (typeof LocationFSxOntapNfsMountOptionsVersion)[keyof typeof LocationFSxOntapNfsMountOptionsVersion];
export declare const LocationFSxOntapSmbMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Smb2: "SMB2";
    readonly Smb3: "SMB3";
};
/**
 * The specific SMB version that you want DataSync to use to mount your SMB share.
 */
export type LocationFSxOntapSmbMountOptionsVersion = (typeof LocationFSxOntapSmbMountOptionsVersion)[keyof typeof LocationFSxOntapSmbMountOptionsVersion];
export declare const LocationFSxOpenZfsMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Nfs3: "NFS3";
    readonly Nfs40: "NFS4_0";
    readonly Nfs41: "NFS4_1";
};
/**
 * The specific NFS version that you want DataSync to use to mount your NFS share.
 */
export type LocationFSxOpenZfsMountOptionsVersion = (typeof LocationFSxOpenZfsMountOptionsVersion)[keyof typeof LocationFSxOpenZfsMountOptionsVersion];
export declare const LocationHdfsAuthenticationType: {
    readonly Simple: "SIMPLE";
    readonly Kerberos: "KERBEROS";
};
/**
 * The authentication mode used to determine identity of user.
 */
export type LocationHdfsAuthenticationType = (typeof LocationHdfsAuthenticationType)[keyof typeof LocationHdfsAuthenticationType];
export declare const LocationHdfsQopConfigurationDataTransferProtection: {
    readonly Authentication: "AUTHENTICATION";
    readonly Integrity: "INTEGRITY";
    readonly Privacy: "PRIVACY";
    readonly Disabled: "DISABLED";
};
/**
 * Configuration for Data Transfer Protection.
 */
export type LocationHdfsQopConfigurationDataTransferProtection = (typeof LocationHdfsQopConfigurationDataTransferProtection)[keyof typeof LocationHdfsQopConfigurationDataTransferProtection];
export declare const LocationHdfsQopConfigurationRpcProtection: {
    readonly Authentication: "AUTHENTICATION";
    readonly Integrity: "INTEGRITY";
    readonly Privacy: "PRIVACY";
    readonly Disabled: "DISABLED";
};
/**
 * Configuration for RPC Protection.
 */
export type LocationHdfsQopConfigurationRpcProtection = (typeof LocationHdfsQopConfigurationRpcProtection)[keyof typeof LocationHdfsQopConfigurationRpcProtection];
export declare const LocationNfsMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Nfs3: "NFS3";
    readonly Nfs40: "NFS4_0";
    readonly Nfs41: "NFS4_1";
};
/**
 * The specific NFS version that you want DataSync to use to mount your NFS share.
 */
export type LocationNfsMountOptionsVersion = (typeof LocationNfsMountOptionsVersion)[keyof typeof LocationNfsMountOptionsVersion];
export declare const LocationObjectStorageServerProtocol: {
    readonly Https: "HTTPS";
    readonly Http: "HTTP";
};
/**
 * The protocol that the object storage server uses to communicate.
 */
export type LocationObjectStorageServerProtocol = (typeof LocationObjectStorageServerProtocol)[keyof typeof LocationObjectStorageServerProtocol];
export declare const LocationS3S3StorageClass: {
    readonly Standard: "STANDARD";
    readonly StandardIa: "STANDARD_IA";
    readonly OnezoneIa: "ONEZONE_IA";
    readonly IntelligentTiering: "INTELLIGENT_TIERING";
    readonly Glacier: "GLACIER";
    readonly GlacierInstantRetrieval: "GLACIER_INSTANT_RETRIEVAL";
    readonly DeepArchive: "DEEP_ARCHIVE";
};
/**
 * The Amazon S3 storage class you want to store your files in when this location is used as a task destination.
 */
export type LocationS3S3StorageClass = (typeof LocationS3S3StorageClass)[keyof typeof LocationS3S3StorageClass];
export declare const LocationSmbMountOptionsVersion: {
    readonly Automatic: "AUTOMATIC";
    readonly Smb1: "SMB1";
    readonly Smb20: "SMB2_0";
    readonly Smb2: "SMB2";
    readonly Smb3: "SMB3";
};
/**
 * The specific SMB version that you want DataSync to use to mount your SMB share.
 */
export type LocationSmbMountOptionsVersion = (typeof LocationSmbMountOptionsVersion)[keyof typeof LocationSmbMountOptionsVersion];
export declare const StorageSystemConnectivityStatus: {
    readonly Pass: "PASS";
    readonly Fail: "FAIL";
    readonly Unknown: "UNKNOWN";
};
/**
 * Indicates whether the DataSync agent can access the on-premises storage system.
 */
export type StorageSystemConnectivityStatus = (typeof StorageSystemConnectivityStatus)[keyof typeof StorageSystemConnectivityStatus];
export declare const StorageSystemSystemType: {
    readonly NetAppOntap: "NetAppONTAP";
};
/**
 * The type of on-premises storage system that DataSync Discovery will analyze.
 */
export type StorageSystemSystemType = (typeof StorageSystemSystemType)[keyof typeof StorageSystemSystemType];
export declare const TaskFilterRuleFilterType: {
    readonly SimplePattern: "SIMPLE_PATTERN";
};
/**
 * The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
 */
export type TaskFilterRuleFilterType = (typeof TaskFilterRuleFilterType)[keyof typeof TaskFilterRuleFilterType];
export declare const TaskManifestConfigAction: {
    readonly Transfer: "TRANSFER";
};
/**
 * Specifies what DataSync uses the manifest for.
 */
export type TaskManifestConfigAction = (typeof TaskManifestConfigAction)[keyof typeof TaskManifestConfigAction];
export declare const TaskManifestConfigFormat: {
    readonly Csv: "CSV";
};
/**
 * Specifies the file format of your manifest.
 */
export type TaskManifestConfigFormat = (typeof TaskManifestConfigFormat)[keyof typeof TaskManifestConfigFormat];
export declare const TaskMode: {
    readonly Basic: "BASIC";
    readonly Enhanced: "ENHANCED";
};
/**
 * Specifies the task mode for the task.
 */
export type TaskMode = (typeof TaskMode)[keyof typeof TaskMode];
export declare const TaskOptionsAtime: {
    readonly None: "NONE";
    readonly BestEffort: "BEST_EFFORT";
};
/**
 * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
 */
export type TaskOptionsAtime = (typeof TaskOptionsAtime)[keyof typeof TaskOptionsAtime];
export declare const TaskOptionsGid: {
    readonly None: "NONE";
    readonly IntValue: "INT_VALUE";
    readonly Name: "NAME";
    readonly Both: "BOTH";
};
/**
 * The group ID (GID) of the file's owners.
 */
export type TaskOptionsGid = (typeof TaskOptionsGid)[keyof typeof TaskOptionsGid];
export declare const TaskOptionsLogLevel: {
    readonly Off: "OFF";
    readonly Basic: "BASIC";
    readonly Transfer: "TRANSFER";
};
/**
 * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
 */
export type TaskOptionsLogLevel = (typeof TaskOptionsLogLevel)[keyof typeof TaskOptionsLogLevel];
export declare const TaskOptionsMtime: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
 */
export type TaskOptionsMtime = (typeof TaskOptionsMtime)[keyof typeof TaskOptionsMtime];
export declare const TaskOptionsObjectTags: {
    readonly Preserve: "PRESERVE";
    readonly None: "NONE";
};
/**
 * A value that determines whether object tags should be read from the source object store and written to the destination object store.
 */
export type TaskOptionsObjectTags = (typeof TaskOptionsObjectTags)[keyof typeof TaskOptionsObjectTags];
export declare const TaskOptionsOverwriteMode: {
    readonly Always: "ALWAYS";
    readonly Never: "NEVER";
};
/**
 * A value that determines whether files at the destination should be overwritten or preserved when copying files.
 */
export type TaskOptionsOverwriteMode = (typeof TaskOptionsOverwriteMode)[keyof typeof TaskOptionsOverwriteMode];
export declare const TaskOptionsPosixPermissions: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
 */
export type TaskOptionsPosixPermissions = (typeof TaskOptionsPosixPermissions)[keyof typeof TaskOptionsPosixPermissions];
export declare const TaskOptionsPreserveDeletedFiles: {
    readonly Preserve: "PRESERVE";
    readonly Remove: "REMOVE";
};
/**
 * A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
 */
export type TaskOptionsPreserveDeletedFiles = (typeof TaskOptionsPreserveDeletedFiles)[keyof typeof TaskOptionsPreserveDeletedFiles];
export declare const TaskOptionsPreserveDevices: {
    readonly None: "NONE";
    readonly Preserve: "PRESERVE";
};
/**
 * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
 */
export type TaskOptionsPreserveDevices = (typeof TaskOptionsPreserveDevices)[keyof typeof TaskOptionsPreserveDevices];
export declare const TaskOptionsSecurityDescriptorCopyFlags: {
    readonly None: "NONE";
    readonly OwnerDacl: "OWNER_DACL";
    readonly OwnerDaclSacl: "OWNER_DACL_SACL";
};
/**
 * A value that determines which components of the SMB security descriptor are copied during transfer.
 */
export type TaskOptionsSecurityDescriptorCopyFlags = (typeof TaskOptionsSecurityDescriptorCopyFlags)[keyof typeof TaskOptionsSecurityDescriptorCopyFlags];
export declare const TaskOptionsTaskQueueing: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * A value that determines whether tasks should be queued before executing the tasks.
 */
export type TaskOptionsTaskQueueing = (typeof TaskOptionsTaskQueueing)[keyof typeof TaskOptionsTaskQueueing];
export declare const TaskOptionsTransferMode: {
    readonly Changed: "CHANGED";
    readonly All: "ALL";
};
/**
 * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
 */
export type TaskOptionsTransferMode = (typeof TaskOptionsTransferMode)[keyof typeof TaskOptionsTransferMode];
export declare const TaskOptionsUid: {
    readonly None: "NONE";
    readonly IntValue: "INT_VALUE";
    readonly Name: "NAME";
    readonly Both: "BOTH";
};
/**
 * The user ID (UID) of the file's owner.
 */
export type TaskOptionsUid = (typeof TaskOptionsUid)[keyof typeof TaskOptionsUid];
export declare const TaskOptionsVerifyMode: {
    readonly PointInTimeConsistent: "POINT_IN_TIME_CONSISTENT";
    readonly OnlyFilesTransferred: "ONLY_FILES_TRANSFERRED";
    readonly None: "NONE";
};
/**
 * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
 */
export type TaskOptionsVerifyMode = (typeof TaskOptionsVerifyMode)[keyof typeof TaskOptionsVerifyMode];
export declare const TaskReportConfigObjectVersionIds: {
    readonly Include: "INCLUDE";
    readonly None: "NONE";
};
/**
 * Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.
 */
export type TaskReportConfigObjectVersionIds = (typeof TaskReportConfigObjectVersionIds)[keyof typeof TaskReportConfigObjectVersionIds];
export declare const TaskReportConfigOutputType: {
    readonly SummaryOnly: "SUMMARY_ONLY";
    readonly Standard: "STANDARD";
};
/**
 * Specifies the type of task report that you want.
 */
export type TaskReportConfigOutputType = (typeof TaskReportConfigOutputType)[keyof typeof TaskReportConfigOutputType];
export declare const TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel: {
    readonly ErrorsOnly: "ERRORS_ONLY";
    readonly SuccessesAndErrors: "SUCCESSES_AND_ERRORS";
};
/**
 * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
 */
export type TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel = (typeof TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel)[keyof typeof TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel];
export declare const TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel: {
    readonly ErrorsOnly: "ERRORS_ONLY";
    readonly SuccessesAndErrors: "SUCCESSES_AND_ERRORS";
};
/**
 * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
 */
export type TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel = (typeof TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel)[keyof typeof TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel];
export declare const TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel: {
    readonly ErrorsOnly: "ERRORS_ONLY";
    readonly SuccessesAndErrors: "SUCCESSES_AND_ERRORS";
};
/**
 * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
 */
export type TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel = (typeof TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel)[keyof typeof TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel];
export declare const TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel: {
    readonly ErrorsOnly: "ERRORS_ONLY";
    readonly SuccessesAndErrors: "SUCCESSES_AND_ERRORS";
};
/**
 * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
 */
export type TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel = (typeof TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel)[keyof typeof TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel];
export declare const TaskReportConfigReportLevel: {
    readonly ErrorsOnly: "ERRORS_ONLY";
    readonly SuccessesAndErrors: "SUCCESSES_AND_ERRORS";
};
/**
 * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
 */
export type TaskReportConfigReportLevel = (typeof TaskReportConfigReportLevel)[keyof typeof TaskReportConfigReportLevel];
export declare const TaskScheduleStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * Specifies status of a schedule.
 */
export type TaskScheduleStatus = (typeof TaskScheduleStatus)[keyof typeof TaskScheduleStatus];
export declare const TaskStatus: {
    readonly Available: "AVAILABLE";
    readonly Creating: "CREATING";
    readonly Queued: "QUEUED";
    readonly Running: "RUNNING";
    readonly Unavailable: "UNAVAILABLE";
};
/**
 * The status of the task that was described.
 */
export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];
