export declare const ComponentPlatform: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
    readonly MacOs: "macOS";
};
/**
 * The platform of the component.
 */
export type ComponentPlatform = (typeof ComponentPlatform)[keyof typeof ComponentPlatform];
export declare const ComponentType: {
    readonly Build: "BUILD";
    readonly Test: "TEST";
};
/**
 * The type of the component denotes whether the component is used to build the image or only to test it.
 */
export type ComponentType = (typeof ComponentType)[keyof typeof ComponentType];
export declare const ContainerRecipeContainerType: {
    readonly Docker: "DOCKER";
};
/**
 * Specifies the type of container, such as Docker.
 */
export type ContainerRecipeContainerType = (typeof ContainerRecipeContainerType)[keyof typeof ContainerRecipeContainerType];
export declare const ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType: {
    readonly Standard: "standard";
    readonly Io1: "io1";
    readonly Io2: "io2";
    readonly Gp2: "gp2";
    readonly Gp3: "gp3";
    readonly Sc1: "sc1";
    readonly St1: "st1";
};
/**
 * Use to override the device's volume type.
 */
export type ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType = (typeof ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType)[keyof typeof ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType];
export declare const ContainerRecipePlatformOverride: {
    readonly Windows: "Windows";
    readonly Linux: "Linux";
};
/**
 * Specifies the operating system platform when you use a custom source image.
 */
export type ContainerRecipePlatformOverride = (typeof ContainerRecipePlatformOverride)[keyof typeof ContainerRecipePlatformOverride];
export declare const ContainerRecipeTargetContainerRepositoryService: {
    readonly Ecr: "ECR";
};
/**
 * Specifies the service in which this image was registered.
 */
export type ContainerRecipeTargetContainerRepositoryService = (typeof ContainerRecipeTargetContainerRepositoryService)[keyof typeof ContainerRecipeTargetContainerRepositoryService];
export declare const DistributionConfigurationTargetContainerRepositoryService: {
    readonly Ecr: "ECR";
};
/**
 * The service of target container repository.
 */
export type DistributionConfigurationTargetContainerRepositoryService = (typeof DistributionConfigurationTargetContainerRepositoryService)[keyof typeof DistributionConfigurationTargetContainerRepositoryService];
export declare const ImagePipelineSchedulePipelineExecutionStartCondition: {
    readonly ExpressionMatchOnly: "EXPRESSION_MATCH_ONLY";
    readonly ExpressionMatchAndDependencyUpdatesAvailable: "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE";
};
/**
 * The condition configures when the pipeline should trigger a new image build.
 */
export type ImagePipelineSchedulePipelineExecutionStartCondition = (typeof ImagePipelineSchedulePipelineExecutionStartCondition)[keyof typeof ImagePipelineSchedulePipelineExecutionStartCondition];
export declare const ImagePipelineStatus: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
/**
 * The status of the image pipeline.
 */
export type ImagePipelineStatus = (typeof ImagePipelineStatus)[keyof typeof ImagePipelineStatus];
export declare const ImagePipelineWorkflowConfigurationOnFailure: {
    readonly Continue: "CONTINUE";
    readonly Abort: "ABORT";
};
/**
 * Define execution decision in case of workflow failure
 */
export type ImagePipelineWorkflowConfigurationOnFailure = (typeof ImagePipelineWorkflowConfigurationOnFailure)[keyof typeof ImagePipelineWorkflowConfigurationOnFailure];
export declare const ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType: {
    readonly Standard: "standard";
    readonly Io1: "io1";
    readonly Io2: "io2";
    readonly Gp2: "gp2";
    readonly Gp3: "gp3";
    readonly Sc1: "sc1";
    readonly St1: "st1";
};
/**
 * Use to override the device's volume type.
 */
export type ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType = (typeof ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType)[keyof typeof ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType];
export declare const ImageWorkflowConfigurationOnFailure: {
    readonly Continue: "CONTINUE";
    readonly Abort: "ABORT";
};
/**
 * Define execution decision in case of workflow failure
 */
export type ImageWorkflowConfigurationOnFailure = (typeof ImageWorkflowConfigurationOnFailure)[keyof typeof ImageWorkflowConfigurationOnFailure];
export declare const InfrastructureConfigurationInstanceMetadataOptionsHttpTokens: {
    readonly Required: "required";
    readonly Optional: "optional";
};
/**
 * Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:
 */
export type InfrastructureConfigurationInstanceMetadataOptionsHttpTokens = (typeof InfrastructureConfigurationInstanceMetadataOptionsHttpTokens)[keyof typeof InfrastructureConfigurationInstanceMetadataOptionsHttpTokens];
export declare const InfrastructureConfigurationPlacementTenancy: {
    readonly Default: "default";
    readonly Dedicated: "dedicated";
    readonly Host: "host";
};
/**
 * Tenancy
 */
export type InfrastructureConfigurationPlacementTenancy = (typeof InfrastructureConfigurationPlacementTenancy)[keyof typeof InfrastructureConfigurationPlacementTenancy];
export declare const LifecyclePolicyActionType: {
    readonly Delete: "DELETE";
    readonly Deprecate: "DEPRECATE";
    readonly Disable: "DISABLE";
};
/**
 * The action type of the policy detail.
 */
export type LifecyclePolicyActionType = (typeof LifecyclePolicyActionType)[keyof typeof LifecyclePolicyActionType];
export declare const LifecyclePolicyFilterType: {
    readonly Age: "AGE";
    readonly Count: "COUNT";
};
/**
 * The filter type.
 */
export type LifecyclePolicyFilterType = (typeof LifecyclePolicyFilterType)[keyof typeof LifecyclePolicyFilterType];
export declare const LifecyclePolicyResourceType: {
    readonly AmiImage: "AMI_IMAGE";
    readonly ContainerImage: "CONTAINER_IMAGE";
};
/**
 * The resource type of the lifecycle policy.
 */
export type LifecyclePolicyResourceType = (typeof LifecyclePolicyResourceType)[keyof typeof LifecyclePolicyResourceType];
export declare const LifecyclePolicyStatus: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
};
/**
 * The status of the lifecycle policy.
 */
export type LifecyclePolicyStatus = (typeof LifecyclePolicyStatus)[keyof typeof LifecyclePolicyStatus];
export declare const LifecyclePolicyTimeUnit: {
    readonly Days: "DAYS";
    readonly Weeks: "WEEKS";
    readonly Months: "MONTHS";
    readonly Years: "YEARS";
};
/**
 * A time unit.
 */
export type LifecyclePolicyTimeUnit = (typeof LifecyclePolicyTimeUnit)[keyof typeof LifecyclePolicyTimeUnit];
export declare const WorkflowType: {
    readonly Build: "BUILD";
    readonly Test: "TEST";
    readonly Distribution: "DISTRIBUTION";
};
/**
 * The type of the workflow denotes whether the workflow is used to build, test, or distribute.
 */
export type WorkflowType = (typeof WorkflowType)[keyof typeof WorkflowType];
