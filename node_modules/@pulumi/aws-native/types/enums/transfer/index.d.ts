export declare const AgreementStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * Specifies the status of the agreement.
 */
export type AgreementStatus = (typeof AgreementStatus)[keyof typeof AgreementStatus];
export declare const CertificateStatus: {
    readonly Active: "ACTIVE";
    readonly Pending: "PENDING";
    readonly Inactive: "INACTIVE";
};
/**
 * A status description for the certificate.
 */
export type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];
export declare const CertificateType: {
    readonly Certificate: "CERTIFICATE";
    readonly CertificateWithPrivateKey: "CERTIFICATE_WITH_PRIVATE_KEY";
};
/**
 * Describing the type of certificate. With or without a private key.
 */
export type CertificateType = (typeof CertificateType)[keyof typeof CertificateType];
export declare const CertificateUsage: {
    readonly Signing: "SIGNING";
    readonly Encryption: "ENCRYPTION";
    readonly Tls: "TLS";
};
/**
 * Specifies the usage type for the certificate.
 */
export type CertificateUsage = (typeof CertificateUsage)[keyof typeof CertificateUsage];
export declare const ConnectorAs2ConfigPropertiesCompression: {
    readonly Zlib: "ZLIB";
    readonly Disabled: "DISABLED";
};
/**
 * Compression setting for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesCompression = (typeof ConnectorAs2ConfigPropertiesCompression)[keyof typeof ConnectorAs2ConfigPropertiesCompression];
export declare const ConnectorAs2ConfigPropertiesEncryptionAlgorithm: {
    readonly Aes128Cbc: "AES128_CBC";
    readonly Aes192Cbc: "AES192_CBC";
    readonly Aes256Cbc: "AES256_CBC";
    readonly None: "NONE";
    readonly DesEde3Cbc: "DES_EDE3_CBC";
};
/**
 * Encryption algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesEncryptionAlgorithm = (typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm];
export declare const ConnectorAs2ConfigPropertiesMdnResponse: {
    readonly Sync: "SYNC";
    readonly None: "NONE";
};
/**
 * MDN Response setting for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesMdnResponse = (typeof ConnectorAs2ConfigPropertiesMdnResponse)[keyof typeof ConnectorAs2ConfigPropertiesMdnResponse];
export declare const ConnectorAs2ConfigPropertiesMdnSigningAlgorithm: {
    readonly Sha256: "SHA256";
    readonly Sha384: "SHA384";
    readonly Sha512: "SHA512";
    readonly Sha1: "SHA1";
    readonly None: "NONE";
    readonly Default: "DEFAULT";
};
/**
 * MDN Signing algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesMdnSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm];
export declare const ConnectorAs2ConfigPropertiesSigningAlgorithm: {
    readonly Sha256: "SHA256";
    readonly Sha384: "SHA384";
    readonly Sha512: "SHA512";
    readonly Sha1: "SHA1";
    readonly None: "NONE";
};
/**
 * Signing algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesSigningAlgorithm];
export declare const ProfileType: {
    readonly Local: "LOCAL";
    readonly Partner: "PARTNER";
};
/**
 * Enum specifying whether the profile is local or associated with a trading partner.
 */
export type ProfileType = (typeof ProfileType)[keyof typeof ProfileType];
export declare const ServerAs2Transport: {
    readonly Http: "HTTP";
};
export type ServerAs2Transport = (typeof ServerAs2Transport)[keyof typeof ServerAs2Transport];
export declare const ServerDirectoryListingOptimization: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * Indicates whether optimization to directory listing on S3 servers is used. Disabled by default for compatibility.
 */
export type ServerDirectoryListingOptimization = (typeof ServerDirectoryListingOptimization)[keyof typeof ServerDirectoryListingOptimization];
export declare const ServerDomain: {
    readonly S3: "S3";
    readonly Efs: "EFS";
};
export type ServerDomain = (typeof ServerDomain)[keyof typeof ServerDomain];
export declare const ServerEndpointType: {
    readonly Public: "PUBLIC";
    readonly Vpc: "VPC";
    readonly VpcEndpoint: "VPC_ENDPOINT";
};
export type ServerEndpointType = (typeof ServerEndpointType)[keyof typeof ServerEndpointType];
export declare const ServerIdentityProviderType: {
    readonly ServiceManaged: "SERVICE_MANAGED";
    readonly ApiGateway: "API_GATEWAY";
    readonly AwsDirectoryService: "AWS_DIRECTORY_SERVICE";
    readonly AwsLambda: "AWS_LAMBDA";
};
export type ServerIdentityProviderType = (typeof ServerIdentityProviderType)[keyof typeof ServerIdentityProviderType];
export declare const ServerProtocol: {
    readonly Sftp: "SFTP";
    readonly Ftp: "FTP";
    readonly Ftps: "FTPS";
    readonly As2: "AS2";
};
export type ServerProtocol = (typeof ServerProtocol)[keyof typeof ServerProtocol];
export declare const ServerSetStatOption: {
    readonly Default: "DEFAULT";
    readonly EnableNoOp: "ENABLE_NO_OP";
};
export type ServerSetStatOption = (typeof ServerSetStatOption)[keyof typeof ServerSetStatOption];
export declare const ServerSftpAuthenticationMethods: {
    readonly Password: "PASSWORD";
    readonly PublicKey: "PUBLIC_KEY";
    readonly PublicKeyOrPassword: "PUBLIC_KEY_OR_PASSWORD";
    readonly PublicKeyAndPassword: "PUBLIC_KEY_AND_PASSWORD";
};
export type ServerSftpAuthenticationMethods = (typeof ServerSftpAuthenticationMethods)[keyof typeof ServerSftpAuthenticationMethods];
export declare const ServerState: {
    readonly Offline: "OFFLINE";
    readonly Online: "ONLINE";
    readonly Starting: "STARTING";
    readonly Stopping: "STOPPING";
    readonly StartFailed: "START_FAILED";
    readonly StopFailed: "STOP_FAILED";
};
export type ServerState = (typeof ServerState)[keyof typeof ServerState];
export declare const ServerTlsSessionResumptionMode: {
    readonly Disabled: "DISABLED";
    readonly Enabled: "ENABLED";
    readonly Enforced: "ENFORCED";
};
export type ServerTlsSessionResumptionMode = (typeof ServerTlsSessionResumptionMode)[keyof typeof ServerTlsSessionResumptionMode];
export declare const UserHomeDirectoryType: {
    readonly Path: "PATH";
    readonly Logical: "LOGICAL";
};
export type UserHomeDirectoryType = (typeof UserHomeDirectoryType)[keyof typeof UserHomeDirectoryType];
export declare const UserMapType: {
    readonly File: "FILE";
    readonly Directory: "DIRECTORY";
};
export type UserMapType = (typeof UserMapType)[keyof typeof UserMapType];
export declare const WorkflowStepCopyStepDetailsPropertiesOverwriteExisting: {
    readonly True: "TRUE";
    readonly False: "FALSE";
};
/**
 * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
 */
export type WorkflowStepCopyStepDetailsPropertiesOverwriteExisting = (typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting)[keyof typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting];
export declare const WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting: {
    readonly True: "TRUE";
    readonly False: "FALSE";
};
/**
 * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
 */
export type WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting = (typeof WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting)[keyof typeof WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting];
export declare const WorkflowStepDecryptStepDetailsPropertiesType: {
    readonly Pgp: "PGP";
};
/**
 * Specifies which encryption method to use.
 */
export type WorkflowStepDecryptStepDetailsPropertiesType = (typeof WorkflowStepDecryptStepDetailsPropertiesType)[keyof typeof WorkflowStepDecryptStepDetailsPropertiesType];
export declare const WorkflowStepType: {
    readonly Copy: "COPY";
    readonly Custom: "CUSTOM";
    readonly Decrypt: "DECRYPT";
    readonly Delete: "DELETE";
    readonly Tag: "TAG";
};
export type WorkflowStepType = (typeof WorkflowStepType)[keyof typeof WorkflowStepType];
