export declare const CustomDbEngineVersionStatus: {
    readonly Available: "available";
    readonly Inactive: "inactive";
    readonly InactiveExceptRestore: "inactive-except-restore";
};
/**
 * A value that indicates the status of a custom engine version (CEV).
 */
export type CustomDbEngineVersionStatus = (typeof CustomDbEngineVersionStatus)[keyof typeof CustomDbEngineVersionStatus];
export declare const DbInstanceProcessorFeatureName: {
    readonly CoreCount: "coreCount";
    readonly ThreadsPerCore: "threadsPerCore";
};
/**
 * The name of the processor feature. Valid names are ``coreCount`` and ``threadsPerCore``.
 */
export type DbInstanceProcessorFeatureName = (typeof DbInstanceProcessorFeatureName)[keyof typeof DbInstanceProcessorFeatureName];
export declare const DbProxyAuthFormatAuthScheme: {
    readonly Secrets: "SECRETS";
};
/**
 * The type of authentication that the proxy uses for connections from the proxy to the underlying database.
 */
export type DbProxyAuthFormatAuthScheme = (typeof DbProxyAuthFormatAuthScheme)[keyof typeof DbProxyAuthFormatAuthScheme];
export declare const DbProxyAuthFormatClientPasswordAuthType: {
    readonly MysqlNativePassword: "MYSQL_NATIVE_PASSWORD";
    readonly PostgresScramSha256: "POSTGRES_SCRAM_SHA_256";
    readonly PostgresMd5: "POSTGRES_MD5";
    readonly SqlServerAuthentication: "SQL_SERVER_AUTHENTICATION";
};
/**
 * The type of authentication the proxy uses for connections from clients.
 */
export type DbProxyAuthFormatClientPasswordAuthType = (typeof DbProxyAuthFormatClientPasswordAuthType)[keyof typeof DbProxyAuthFormatClientPasswordAuthType];
export declare const DbProxyAuthFormatIamAuth: {
    readonly Disabled: "DISABLED";
    readonly Required: "REQUIRED";
    readonly Enabled: "ENABLED";
};
/**
 * Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
 */
export type DbProxyAuthFormatIamAuth = (typeof DbProxyAuthFormatIamAuth)[keyof typeof DbProxyAuthFormatIamAuth];
export declare const DbProxyEndpointTargetRole: {
    readonly ReadWrite: "READ_WRITE";
    readonly ReadOnly: "READ_ONLY";
};
/**
 * A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
 */
export type DbProxyEndpointTargetRole = (typeof DbProxyEndpointTargetRole)[keyof typeof DbProxyEndpointTargetRole];
export declare const DbProxyEngineFamily: {
    readonly Mysql: "MYSQL";
    readonly Postgresql: "POSTGRESQL";
    readonly Sqlserver: "SQLSERVER";
};
/**
 * The kinds of databases that the proxy can connect to.
 */
export type DbProxyEngineFamily = (typeof DbProxyEngineFamily)[keyof typeof DbProxyEngineFamily];
export declare const DbProxyTargetGroupTargetGroupName: {
    readonly Default: "default";
};
/**
 * The identifier for the DBProxyTargetGroup
 */
export type DbProxyTargetGroupTargetGroupName = (typeof DbProxyTargetGroupTargetGroupName)[keyof typeof DbProxyTargetGroupTargetGroupName];
export declare const GlobalClusterEngine: {
    readonly Aurora: "aurora";
    readonly AuroraMysql: "aurora-mysql";
    readonly AuroraPostgresql: "aurora-postgresql";
};
/**
 * The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
 * If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
 */
export type GlobalClusterEngine = (typeof GlobalClusterEngine)[keyof typeof GlobalClusterEngine];
