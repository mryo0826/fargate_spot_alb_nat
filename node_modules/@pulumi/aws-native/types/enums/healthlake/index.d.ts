export declare const FhirDatastoreDatastoreStatus: {
    readonly Creating: "CREATING";
    readonly Active: "ACTIVE";
    readonly Deleting: "DELETING";
    readonly Deleted: "DELETED";
};
/**
 * The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
 */
export type FhirDatastoreDatastoreStatus = (typeof FhirDatastoreDatastoreStatus)[keyof typeof FhirDatastoreDatastoreStatus];
export declare const FhirDatastoreDatastoreTypeVersion: {
    readonly R4: "R4";
};
/**
 * The FHIR version. Only R4 version data is supported.
 */
export type FhirDatastoreDatastoreTypeVersion = (typeof FhirDatastoreDatastoreTypeVersion)[keyof typeof FhirDatastoreDatastoreTypeVersion];
export declare const FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy: {
    readonly SmartOnFhirV1: "SMART_ON_FHIR_V1";
    readonly AwsAuth: "AWS_AUTH";
};
/**
 * Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
 */
export type FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy = (typeof FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy)[keyof typeof FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy];
export declare const FhirDatastoreKmsEncryptionConfigCmkType: {
    readonly CustomerManagedKmsKey: "CUSTOMER_MANAGED_KMS_KEY";
    readonly AwsOwnedKmsKey: "AWS_OWNED_KMS_KEY";
};
/**
 * The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
 */
export type FhirDatastoreKmsEncryptionConfigCmkType = (typeof FhirDatastoreKmsEncryptionConfigCmkType)[keyof typeof FhirDatastoreKmsEncryptionConfigCmkType];
export declare const FhirDatastorePreloadDataConfigPreloadDataType: {
    readonly Synthea: "SYNTHEA";
};
/**
 * The type of preloaded data. Only Synthea preloaded data is supported.
 */
export type FhirDatastorePreloadDataConfigPreloadDataType = (typeof FhirDatastorePreloadDataConfigPreloadDataType)[keyof typeof FhirDatastorePreloadDataConfigPreloadDataType];
