export declare const ObservabilityConfigurationTraceConfigurationVendor: {
    readonly Awsxray: "AWSXRAY";
};
/**
 * The implementation provider chosen for tracing App Runner services.
 */
export type ObservabilityConfigurationTraceConfigurationVendor = (typeof ObservabilityConfigurationTraceConfigurationVendor)[keyof typeof ObservabilityConfigurationTraceConfigurationVendor];
export declare const ServiceCodeConfigurationConfigurationSource: {
    readonly Repository: "REPOSITORY";
    readonly Api: "API";
};
/**
 * Configuration Source
 */
export type ServiceCodeConfigurationConfigurationSource = (typeof ServiceCodeConfigurationConfigurationSource)[keyof typeof ServiceCodeConfigurationConfigurationSource];
export declare const ServiceCodeConfigurationValuesRuntime: {
    readonly Python3: "PYTHON_3";
    readonly Nodejs12: "NODEJS_12";
    readonly Nodejs14: "NODEJS_14";
    readonly Corretto8: "CORRETTO_8";
    readonly Corretto11: "CORRETTO_11";
    readonly Nodejs16: "NODEJS_16";
    readonly Go1: "GO_1";
    readonly Dotnet6: "DOTNET_6";
    readonly Php81: "PHP_81";
    readonly Ruby31: "RUBY_31";
    readonly Python311: "PYTHON_311";
    readonly Nodejs18: "NODEJS_18";
};
/**
 * Runtime
 */
export type ServiceCodeConfigurationValuesRuntime = (typeof ServiceCodeConfigurationValuesRuntime)[keyof typeof ServiceCodeConfigurationValuesRuntime];
export declare const ServiceEgressConfigurationEgressType: {
    readonly Default: "DEFAULT";
    readonly Vpc: "VPC";
};
/**
 * Network egress type.
 */
export type ServiceEgressConfigurationEgressType = (typeof ServiceEgressConfigurationEgressType)[keyof typeof ServiceEgressConfigurationEgressType];
export declare const ServiceHealthCheckConfigurationProtocol: {
    readonly Tcp: "TCP";
    readonly Http: "HTTP";
};
/**
 * Health Check Protocol
 */
export type ServiceHealthCheckConfigurationProtocol = (typeof ServiceHealthCheckConfigurationProtocol)[keyof typeof ServiceHealthCheckConfigurationProtocol];
export declare const ServiceImageRepositoryImageRepositoryType: {
    readonly Ecr: "ECR";
    readonly EcrPublic: "ECR_PUBLIC";
};
/**
 * Image Repository Type
 */
export type ServiceImageRepositoryImageRepositoryType = (typeof ServiceImageRepositoryImageRepositoryType)[keyof typeof ServiceImageRepositoryImageRepositoryType];
export declare const ServiceNetworkConfigurationIpAddressType: {
    readonly Ipv4: "IPV4";
    readonly DualStack: "DUAL_STACK";
};
/**
 * App Runner service endpoint IP address type
 */
export type ServiceNetworkConfigurationIpAddressType = (typeof ServiceNetworkConfigurationIpAddressType)[keyof typeof ServiceNetworkConfigurationIpAddressType];
export declare const ServiceSourceCodeVersionType: {
    readonly Branch: "BRANCH";
};
/**
 * Source Code Version Type
 */
export type ServiceSourceCodeVersionType = (typeof ServiceSourceCodeVersionType)[keyof typeof ServiceSourceCodeVersionType];
export declare const VpcIngressConnectionStatus: {
    readonly Available: "AVAILABLE";
    readonly PendingCreation: "PENDING_CREATION";
    readonly PendingUpdate: "PENDING_UPDATE";
    readonly PendingDeletion: "PENDING_DELETION";
    readonly FailedCreation: "FAILED_CREATION";
    readonly FailedUpdate: "FAILED_UPDATE";
    readonly FailedDeletion: "FAILED_DELETION";
    readonly Deleted: "DELETED";
};
/**
 * The current status of the VpcIngressConnection.
 */
export type VpcIngressConnectionStatus = (typeof VpcIngressConnectionStatus)[keyof typeof VpcIngressConnectionStatus];
