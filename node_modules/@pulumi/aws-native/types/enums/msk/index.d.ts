export declare const ClusterEncryptionInTransitClientBroker: {
    readonly Tls: "TLS";
    readonly TlsPlaintext: "TLS_PLAINTEXT";
    readonly Plaintext: "PLAINTEXT";
};
export type ClusterEncryptionInTransitClientBroker = (typeof ClusterEncryptionInTransitClientBroker)[keyof typeof ClusterEncryptionInTransitClientBroker];
export declare const ClusterEnhancedMonitoring: {
    readonly Default: "DEFAULT";
    readonly PerBroker: "PER_BROKER";
    readonly PerTopicPerBroker: "PER_TOPIC_PER_BROKER";
    readonly PerTopicPerPartition: "PER_TOPIC_PER_PARTITION";
};
export type ClusterEnhancedMonitoring = (typeof ClusterEnhancedMonitoring)[keyof typeof ClusterEnhancedMonitoring];
export declare const ClusterStorageMode: {
    readonly Local: "LOCAL";
    readonly Tiered: "TIERED";
};
export type ClusterStorageMode = (typeof ClusterStorageMode)[keyof typeof ClusterStorageMode];
export declare const ReplicatorReplicationInfoTargetCompressionType: {
    readonly None: "NONE";
    readonly Gzip: "GZIP";
    readonly Snappy: "SNAPPY";
    readonly Lz4: "LZ4";
    readonly Zstd: "ZSTD";
};
/**
 * The type of compression to use writing records to target Kafka cluster.
 */
export type ReplicatorReplicationInfoTargetCompressionType = (typeof ReplicatorReplicationInfoTargetCompressionType)[keyof typeof ReplicatorReplicationInfoTargetCompressionType];
export declare const ReplicatorReplicationStartingPositionType: {
    readonly Latest: "LATEST";
    readonly Earliest: "EARLIEST";
};
/**
 * The type of replication starting position.
 */
export type ReplicatorReplicationStartingPositionType = (typeof ReplicatorReplicationStartingPositionType)[keyof typeof ReplicatorReplicationStartingPositionType];
export declare const ReplicatorReplicationTopicNameConfigurationType: {
    readonly PrefixedWithSourceClusterAlias: "PREFIXED_WITH_SOURCE_CLUSTER_ALIAS";
    readonly Identical: "IDENTICAL";
};
/**
 * The type of replicated topic name.
 */
export type ReplicatorReplicationTopicNameConfigurationType = (typeof ReplicatorReplicationTopicNameConfigurationType)[keyof typeof ReplicatorReplicationTopicNameConfigurationType];
export declare const VpcConnectionAuthentication: {
    readonly SaslIam: "SASL_IAM";
    readonly SaslScram: "SASL_SCRAM";
    readonly Tls: "TLS";
};
/**
 * The type of private link authentication
 */
export type VpcConnectionAuthentication = (typeof VpcConnectionAuthentication)[keyof typeof VpcConnectionAuthentication];
