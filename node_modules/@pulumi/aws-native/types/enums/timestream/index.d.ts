export declare const InfluxDbInstanceDbInstanceType: {
    readonly DbInfluxMedium: "db.influx.medium";
    readonly DbInfluxLarge: "db.influx.large";
    readonly DbInfluxXlarge: "db.influx.xlarge";
    readonly DbInflux2xlarge: "db.influx.2xlarge";
    readonly DbInflux4xlarge: "db.influx.4xlarge";
    readonly DbInflux8xlarge: "db.influx.8xlarge";
    readonly DbInflux12xlarge: "db.influx.12xlarge";
    readonly DbInflux16xlarge: "db.influx.16xlarge";
};
/**
 * The compute instance of the InfluxDB instance.
 */
export type InfluxDbInstanceDbInstanceType = (typeof InfluxDbInstanceDbInstanceType)[keyof typeof InfluxDbInstanceDbInstanceType];
export declare const InfluxDbInstanceDbStorageType: {
    readonly InfluxIoIncludedT1: "InfluxIOIncludedT1";
    readonly InfluxIoIncludedT2: "InfluxIOIncludedT2";
    readonly InfluxIoIncludedT3: "InfluxIOIncludedT3";
};
/**
 * The storage type of the InfluxDB instance.
 */
export type InfluxDbInstanceDbStorageType = (typeof InfluxDbInstanceDbStorageType)[keyof typeof InfluxDbInstanceDbStorageType];
export declare const InfluxDbInstanceDeploymentType: {
    readonly SingleAz: "SINGLE_AZ";
    readonly WithMultiazStandby: "WITH_MULTIAZ_STANDBY";
};
/**
 * Deployment type of the InfluxDB Instance.
 */
export type InfluxDbInstanceDeploymentType = (typeof InfluxDbInstanceDeploymentType)[keyof typeof InfluxDbInstanceDeploymentType];
export declare const InfluxDbInstanceStatus: {
    readonly Creating: "CREATING";
    readonly Available: "AVAILABLE";
    readonly Deleting: "DELETING";
    readonly Modifying: "MODIFYING";
    readonly Updating: "UPDATING";
    readonly Deleted: "DELETED";
    readonly Failed: "FAILED";
};
/**
 * Status of the InfluxDB Instance.
 */
export type InfluxDbInstanceStatus = (typeof InfluxDbInstanceStatus)[keyof typeof InfluxDbInstanceStatus];
export declare const ScheduledQueryDimensionValueType: {
    readonly Varchar: "VARCHAR";
};
/**
 * Type for the dimension.
 */
export type ScheduledQueryDimensionValueType = (typeof ScheduledQueryDimensionValueType)[keyof typeof ScheduledQueryDimensionValueType];
export declare const ScheduledQueryEncryptionOption: {
    readonly SseS3: "SSE_S3";
    readonly SseKms: "SSE_KMS";
};
/**
 * Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default.
 */
export type ScheduledQueryEncryptionOption = (typeof ScheduledQueryEncryptionOption)[keyof typeof ScheduledQueryEncryptionOption];
export declare const ScheduledQueryMixedMeasureMappingMeasureValueType: {
    readonly Bigint: "BIGINT";
    readonly Boolean: "BOOLEAN";
    readonly Double: "DOUBLE";
    readonly Varchar: "VARCHAR";
    readonly Multi: "MULTI";
};
/**
 * Type of the value that is to be read from SourceColumn. If the mapping is for MULTI, use MeasureValueType.MULTI.
 */
export type ScheduledQueryMixedMeasureMappingMeasureValueType = (typeof ScheduledQueryMixedMeasureMappingMeasureValueType)[keyof typeof ScheduledQueryMixedMeasureMappingMeasureValueType];
export declare const ScheduledQueryMultiMeasureAttributeMappingMeasureValueType: {
    readonly Bigint: "BIGINT";
    readonly Boolean: "BOOLEAN";
    readonly Double: "DOUBLE";
    readonly Varchar: "VARCHAR";
    readonly Timestamp: "TIMESTAMP";
};
/**
 * Value type of the measure value column to be read from the query result.
 */
export type ScheduledQueryMultiMeasureAttributeMappingMeasureValueType = (typeof ScheduledQueryMultiMeasureAttributeMappingMeasureValueType)[keyof typeof ScheduledQueryMultiMeasureAttributeMappingMeasureValueType];
export declare const TablePartitionKeyEnforcementLevel: {
    readonly Required: "REQUIRED";
    readonly Optional: "OPTIONAL";
};
/**
 * The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified).
 */
export type TablePartitionKeyEnforcementLevel = (typeof TablePartitionKeyEnforcementLevel)[keyof typeof TablePartitionKeyEnforcementLevel];
export declare const TablePartitionKeyType: {
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
/**
 * The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key).
 */
export type TablePartitionKeyType = (typeof TablePartitionKeyType)[keyof typeof TablePartitionKeyType];
