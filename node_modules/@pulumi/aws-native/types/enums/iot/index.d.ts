export declare const AuthorizerStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * The status of the authorizer.
 *
 * Valid values: `ACTIVE` | `INACTIVE`
 */
export type AuthorizerStatus = (typeof AuthorizerStatus)[keyof typeof AuthorizerStatus];
export declare const CaCertificateAutoRegistrationStatus: {
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
};
/**
 * Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
 */
export type CaCertificateAutoRegistrationStatus = (typeof CaCertificateAutoRegistrationStatus)[keyof typeof CaCertificateAutoRegistrationStatus];
export declare const CaCertificateCertificateMode: {
    readonly Default: "DEFAULT";
    readonly SniOnly: "SNI_ONLY";
};
/**
 * The mode of the CA.
 *
 * All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
 *
 * Valid values are "DEFAULT" and "SNI_ONLY".
 */
export type CaCertificateCertificateMode = (typeof CaCertificateCertificateMode)[keyof typeof CaCertificateCertificateMode];
export declare const CaCertificateStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * The status of the CA certificate.
 *
 * Valid values are "ACTIVE" and "INACTIVE".
 */
export type CaCertificateStatus = (typeof CaCertificateStatus)[keyof typeof CaCertificateStatus];
export declare const CertificateMode: {
    readonly Default: "DEFAULT";
    readonly SniOnly: "SNI_ONLY";
};
/**
 * Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.
 *
 * `DEFAULT` : A certificate in `DEFAULT` mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA). Devices with certificates in `DEFAULT` mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core . However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core .
 *
 * `SNI_ONLY` : A certificate in `SNI_ONLY` mode is registered without an issuer CA. Devices with certificates in `SNI_ONLY` mode must send the SNI extension when connecting to AWS IoT Core .
 */
export type CertificateMode = (typeof CertificateMode)[keyof typeof CertificateMode];
export declare const CertificateProviderOperation: {
    readonly CreateCertificateFromCsr: "CreateCertificateFromCsr";
};
export type CertificateProviderOperation = (typeof CertificateProviderOperation)[keyof typeof CertificateProviderOperation];
export declare const CertificateStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
    readonly Revoked: "REVOKED";
    readonly PendingTransfer: "PENDING_TRANSFER";
    readonly PendingActivation: "PENDING_ACTIVATION";
};
/**
 * The status of the certificate.
 *
 * Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
 *
 * The status value REGISTER_INACTIVE is deprecated and should not be used.
 */
export type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];
export declare const CommandNamespace: {
    readonly AwsIoT: "AWS-IoT";
    readonly AwsIoTFleetWise: "AWS-IoT-FleetWise";
};
/**
 * The namespace to which the command belongs.
 */
export type CommandNamespace = (typeof CommandNamespace)[keyof typeof CommandNamespace];
export declare const CustomMetricMetricType: {
    readonly StringList: "string-list";
    readonly IpAddressList: "ip-address-list";
    readonly NumberList: "number-list";
    readonly Number: "number";
};
/**
 * The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
 */
export type CustomMetricMetricType = (typeof CustomMetricMetricType)[keyof typeof CustomMetricMetricType];
export declare const DimensionType: {
    readonly TopicFilter: "TOPIC_FILTER";
};
/**
 * Specifies the type of the dimension.
 */
export type DimensionType = (typeof DimensionType)[keyof typeof DimensionType];
export declare const DomainConfigurationApplicationProtocol: {
    readonly SecureMqtt: "SECURE_MQTT";
    readonly MqttWss: "MQTT_WSS";
    readonly Https: "HTTPS";
    readonly Default: "DEFAULT";
};
/**
 * An enumerated string that speciﬁes the application-layer protocol.
 */
export type DomainConfigurationApplicationProtocol = (typeof DomainConfigurationApplicationProtocol)[keyof typeof DomainConfigurationApplicationProtocol];
export declare const DomainConfigurationAuthenticationType: {
    readonly AwsX509: "AWS_X509";
    readonly CustomAuth: "CUSTOM_AUTH";
    readonly AwsSigv4: "AWS_SIGV4";
    readonly CustomAuthX509: "CUSTOM_AUTH_X509";
    readonly Default: "DEFAULT";
};
/**
 * An enumerated string that speciﬁes the authentication type.
 */
export type DomainConfigurationAuthenticationType = (typeof DomainConfigurationAuthenticationType)[keyof typeof DomainConfigurationAuthenticationType];
export declare const DomainConfigurationDomainType: {
    readonly Endpoint: "ENDPOINT";
    readonly AwsManaged: "AWS_MANAGED";
    readonly CustomerManaged: "CUSTOMER_MANAGED";
};
/**
 * The type of service delivered by the domain.
 */
export type DomainConfigurationDomainType = (typeof DomainConfigurationDomainType)[keyof typeof DomainConfigurationDomainType];
export declare const DomainConfigurationServerCertificateSummaryServerCertificateStatus: {
    readonly Invalid: "INVALID";
    readonly Valid: "VALID";
};
/**
 * The status of the server certificate.
 */
export type DomainConfigurationServerCertificateSummaryServerCertificateStatus = (typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus)[keyof typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus];
export declare const DomainConfigurationServiceType: {
    readonly Data: "DATA";
    readonly CredentialProvider: "CREDENTIAL_PROVIDER";
    readonly Jobs: "JOBS";
};
/**
 * The type of service delivered by the endpoint.
 *
 * > AWS IoT Core currently supports only the `DATA` service type.
 */
export type DomainConfigurationServiceType = (typeof DomainConfigurationServiceType)[keyof typeof DomainConfigurationServiceType];
export declare const DomainConfigurationStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * The status to which the domain configuration should be updated.
 *
 * Valid values: `ENABLED` | `DISABLED`
 */
export type DomainConfigurationStatus = (typeof DomainConfigurationStatus)[keyof typeof DomainConfigurationStatus];
export declare const JobTemplateAction: {
    readonly Cancel: "CANCEL";
};
export type JobTemplateAction = (typeof JobTemplateAction)[keyof typeof JobTemplateAction];
export declare const JobTemplateFailureType: {
    readonly Failed: "FAILED";
    readonly Rejected: "REJECTED";
    readonly TimedOut: "TIMED_OUT";
    readonly All: "ALL";
};
export type JobTemplateFailureType = (typeof JobTemplateFailureType)[keyof typeof JobTemplateFailureType];
export declare const JobTemplateJobRetryFailureType: {
    readonly Failed: "FAILED";
    readonly TimedOut: "TIMED_OUT";
    readonly All: "ALL";
};
export type JobTemplateJobRetryFailureType = (typeof JobTemplateJobRetryFailureType)[keyof typeof JobTemplateJobRetryFailureType];
export declare const LoggingDefaultLogLevel: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Disabled: "DISABLED";
};
/**
 * The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export type LoggingDefaultLogLevel = (typeof LoggingDefaultLogLevel)[keyof typeof LoggingDefaultLogLevel];
export declare const MitigationActionEnableIoTLoggingParamsLogLevel: {
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly UnsetValue: "UNSET_VALUE";
};
/**
 *  Specifies which types of information are logged.
 */
export type MitigationActionEnableIoTLoggingParamsLogLevel = (typeof MitigationActionEnableIoTLoggingParamsLogLevel)[keyof typeof MitigationActionEnableIoTLoggingParamsLogLevel];
export declare const MitigationActionReplaceDefaultPolicyVersionParamsTemplateName: {
    readonly BlankPolicy: "BLANK_POLICY";
    readonly UnsetValue: "UNSET_VALUE";
};
/**
 * The name of the template to be applied. The only supported value is `BLANK_POLICY` .
 */
export type MitigationActionReplaceDefaultPolicyVersionParamsTemplateName = (typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName)[keyof typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName];
export declare const MitigationActionUpdateCaCertificateParamsAction: {
    readonly Deactivate: "DEACTIVATE";
    readonly UnsetValue: "UNSET_VALUE";
};
/**
 * The action that you want to apply to the CA certificate. The only supported value is `DEACTIVATE` .
 */
export type MitigationActionUpdateCaCertificateParamsAction = (typeof MitigationActionUpdateCaCertificateParamsAction)[keyof typeof MitigationActionUpdateCaCertificateParamsAction];
export declare const MitigationActionUpdateDeviceCertificateParamsAction: {
    readonly Deactivate: "DEACTIVATE";
    readonly UnsetValue: "UNSET_VALUE";
};
/**
 * The action that you want to apply to the device certificate. The only supported value is `DEACTIVATE` .
 */
export type MitigationActionUpdateDeviceCertificateParamsAction = (typeof MitigationActionUpdateDeviceCertificateParamsAction)[keyof typeof MitigationActionUpdateDeviceCertificateParamsAction];
export declare const ProvisioningTemplateTemplateType: {
    readonly FleetProvisioning: "FLEET_PROVISIONING";
    readonly Jitp: "JITP";
};
/**
 * The type of the provisioning template.
 */
export type ProvisioningTemplateTemplateType = (typeof ProvisioningTemplateTemplateType)[keyof typeof ProvisioningTemplateTemplateType];
export declare const ResourceSpecificLoggingLogLevel: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Disabled: "DISABLED";
};
/**
 * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export type ResourceSpecificLoggingLogLevel = (typeof ResourceSpecificLoggingLogLevel)[keyof typeof ResourceSpecificLoggingLogLevel];
export declare const ResourceSpecificLoggingTargetType: {
    readonly ThingGroup: "THING_GROUP";
    readonly ClientId: "CLIENT_ID";
    readonly SourceIp: "SOURCE_IP";
    readonly PrincipalId: "PRINCIPAL_ID";
    readonly EventType: "EVENT_TYPE";
};
/**
 * The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
 */
export type ResourceSpecificLoggingTargetType = (typeof ResourceSpecificLoggingTargetType)[keyof typeof ResourceSpecificLoggingTargetType];
export declare const ScheduledAuditDayOfWeek: {
    readonly Sun: "SUN";
    readonly Mon: "MON";
    readonly Tue: "TUE";
    readonly Wed: "WED";
    readonly Thu: "THU";
    readonly Fri: "FRI";
    readonly Sat: "SAT";
    readonly UnsetValue: "UNSET_VALUE";
};
/**
 * The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
 */
export type ScheduledAuditDayOfWeek = (typeof ScheduledAuditDayOfWeek)[keyof typeof ScheduledAuditDayOfWeek];
export declare const ScheduledAuditFrequency: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly Monthly: "MONTHLY";
};
/**
 * How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
 */
export type ScheduledAuditFrequency = (typeof ScheduledAuditFrequency)[keyof typeof ScheduledAuditFrequency];
export declare const SecurityProfileBehaviorCriteriaComparisonOperator: {
    readonly LessThan: "less-than";
    readonly LessThanEquals: "less-than-equals";
    readonly GreaterThan: "greater-than";
    readonly GreaterThanEquals: "greater-than-equals";
    readonly InCidrSet: "in-cidr-set";
    readonly NotInCidrSet: "not-in-cidr-set";
    readonly InPortSet: "in-port-set";
    readonly NotInPortSet: "not-in-port-set";
    readonly InSet: "in-set";
    readonly NotInSet: "not-in-set";
};
/**
 * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
 */
export type SecurityProfileBehaviorCriteriaComparisonOperator = (typeof SecurityProfileBehaviorCriteriaComparisonOperator)[keyof typeof SecurityProfileBehaviorCriteriaComparisonOperator];
export declare const SecurityProfileMachineLearningDetectionConfigConfidenceLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
/**
 * The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
 */
export type SecurityProfileMachineLearningDetectionConfigConfidenceLevel = (typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel)[keyof typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel];
export declare const SecurityProfileMetricDimensionOperator: {
    readonly In: "IN";
    readonly NotIn: "NOT_IN";
};
/**
 * Defines how the dimensionValues of a dimension are interpreted.
 */
export type SecurityProfileMetricDimensionOperator = (typeof SecurityProfileMetricDimensionOperator)[keyof typeof SecurityProfileMetricDimensionOperator];
export declare const SecurityProfileStatisticalThresholdStatistic: {
    readonly Average: "Average";
    readonly P0: "p0";
    readonly P01: "p0.1";
    readonly P001: "p0.01";
    readonly P1: "p1";
    readonly P10: "p10";
    readonly P50: "p50";
    readonly P90: "p90";
    readonly P99: "p99";
    readonly P999: "p99.9";
    readonly P9999: "p99.99";
    readonly P100: "p100";
};
/**
 * The percentile which resolves to a threshold value by which compliance with a behavior is determined
 */
export type SecurityProfileStatisticalThresholdStatistic = (typeof SecurityProfileStatisticalThresholdStatistic)[keyof typeof SecurityProfileStatisticalThresholdStatistic];
export declare const SoftwarePackageVersionPackageVersionStatus: {
    readonly Draft: "DRAFT";
    readonly Published: "PUBLISHED";
    readonly Deprecated: "DEPRECATED";
};
export type SoftwarePackageVersionPackageVersionStatus = (typeof SoftwarePackageVersionPackageVersionStatus)[keyof typeof SoftwarePackageVersionPackageVersionStatus];
export declare const ThingTypePropagatingAttributeConnectionAttribute: {
    readonly IotClientId: "iot:ClientId";
    readonly IotThingThingName: "iot:Thing.ThingName";
};
/**
 * The attribute associated with the connection details.
 */
export type ThingTypePropagatingAttributeConnectionAttribute = (typeof ThingTypePropagatingAttributeConnectionAttribute)[keyof typeof ThingTypePropagatingAttributeConnectionAttribute];
export declare const TopicRuleCannedAccessControlList: {
    readonly Private: "private";
    readonly PublicRead: "public-read";
    readonly PublicReadWrite: "public-read-write";
    readonly AwsExecRead: "aws-exec-read";
    readonly AuthenticatedRead: "authenticated-read";
    readonly BucketOwnerRead: "bucket-owner-read";
    readonly BucketOwnerFullControl: "bucket-owner-full-control";
    readonly LogDeliveryWrite: "log-delivery-write";
};
export type TopicRuleCannedAccessControlList = (typeof TopicRuleCannedAccessControlList)[keyof typeof TopicRuleCannedAccessControlList];
export declare const TopicRuleDestinationStatus: {
    readonly Enabled: "ENABLED";
    readonly InProgress: "IN_PROGRESS";
    readonly Disabled: "DISABLED";
};
export type TopicRuleDestinationStatus = (typeof TopicRuleDestinationStatus)[keyof typeof TopicRuleDestinationStatus];
