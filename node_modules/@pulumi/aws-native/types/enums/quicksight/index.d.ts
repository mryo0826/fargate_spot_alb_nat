export declare const AnalysisAnchorOption: {
    readonly Now: "NOW";
};
export type AnalysisAnchorOption = (typeof AnalysisAnchorOption)[keyof typeof AnalysisAnchorOption];
export declare const AnalysisArcThickness: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly Whole: "WHOLE";
};
export type AnalysisArcThickness = (typeof AnalysisArcThickness)[keyof typeof AnalysisArcThickness];
export declare const AnalysisArcThicknessOptions: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type AnalysisArcThicknessOptions = (typeof AnalysisArcThicknessOptions)[keyof typeof AnalysisArcThicknessOptions];
export declare const AnalysisAxisBinding: {
    readonly PrimaryYaxis: "PRIMARY_YAXIS";
    readonly SecondaryYaxis: "SECONDARY_YAXIS";
};
export type AnalysisAxisBinding = (typeof AnalysisAxisBinding)[keyof typeof AnalysisAxisBinding];
export declare const AnalysisBarChartOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly Vertical: "VERTICAL";
};
export type AnalysisBarChartOrientation = (typeof AnalysisBarChartOrientation)[keyof typeof AnalysisBarChartOrientation];
export declare const AnalysisBarsArrangement: {
    readonly Clustered: "CLUSTERED";
    readonly Stacked: "STACKED";
    readonly StackedPercent: "STACKED_PERCENT";
};
export type AnalysisBarsArrangement = (typeof AnalysisBarsArrangement)[keyof typeof AnalysisBarsArrangement];
export declare const AnalysisBaseMapStyleType: {
    readonly LightGray: "LIGHT_GRAY";
    readonly DarkGray: "DARK_GRAY";
    readonly Street: "STREET";
    readonly Imagery: "IMAGERY";
};
export type AnalysisBaseMapStyleType = (typeof AnalysisBaseMapStyleType)[keyof typeof AnalysisBaseMapStyleType];
export declare const AnalysisBoxPlotFillStyle: {
    readonly Solid: "SOLID";
    readonly Transparent: "TRANSPARENT";
};
export type AnalysisBoxPlotFillStyle = (typeof AnalysisBoxPlotFillStyle)[keyof typeof AnalysisBoxPlotFillStyle];
export declare const AnalysisCategoricalAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
};
export type AnalysisCategoricalAggregationFunction = (typeof AnalysisCategoricalAggregationFunction)[keyof typeof AnalysisCategoricalAggregationFunction];
export declare const AnalysisCategoryFilterMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
    readonly Contains: "CONTAINS";
    readonly DoesNotContain: "DOES_NOT_CONTAIN";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
};
export type AnalysisCategoryFilterMatchOperator = (typeof AnalysisCategoryFilterMatchOperator)[keyof typeof AnalysisCategoryFilterMatchOperator];
export declare const AnalysisCategoryFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type AnalysisCategoryFilterSelectAllOptions = (typeof AnalysisCategoryFilterSelectAllOptions)[keyof typeof AnalysisCategoryFilterSelectAllOptions];
export declare const AnalysisColorFillType: {
    readonly Discrete: "DISCRETE";
    readonly Gradient: "GRADIENT";
};
export type AnalysisColorFillType = (typeof AnalysisColorFillType)[keyof typeof AnalysisColorFillType];
export declare const AnalysisColumnRole: {
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
export type AnalysisColumnRole = (typeof AnalysisColumnRole)[keyof typeof AnalysisColumnRole];
export declare const AnalysisCommitMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type AnalysisCommitMode = (typeof AnalysisCommitMode)[keyof typeof AnalysisCommitMode];
export declare const AnalysisComparisonMethod: {
    readonly Difference: "DIFFERENCE";
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly Percent: "PERCENT";
};
export type AnalysisComparisonMethod = (typeof AnalysisComparisonMethod)[keyof typeof AnalysisComparisonMethod];
export declare const AnalysisConditionalFormattingIconDisplayOption: {
    readonly IconOnly: "ICON_ONLY";
};
export type AnalysisConditionalFormattingIconDisplayOption = (typeof AnalysisConditionalFormattingIconDisplayOption)[keyof typeof AnalysisConditionalFormattingIconDisplayOption];
export declare const AnalysisConditionalFormattingIconSetType: {
    readonly PlusMinus: "PLUS_MINUS";
    readonly CheckX: "CHECK_X";
    readonly ThreeColorArrow: "THREE_COLOR_ARROW";
    readonly ThreeGrayArrow: "THREE_GRAY_ARROW";
    readonly CaretUpMinusDown: "CARET_UP_MINUS_DOWN";
    readonly ThreeShape: "THREE_SHAPE";
    readonly ThreeCircle: "THREE_CIRCLE";
    readonly Flags: "FLAGS";
    readonly Bars: "BARS";
    readonly FourColorArrow: "FOUR_COLOR_ARROW";
    readonly FourGrayArrow: "FOUR_GRAY_ARROW";
};
export type AnalysisConditionalFormattingIconSetType = (typeof AnalysisConditionalFormattingIconSetType)[keyof typeof AnalysisConditionalFormattingIconSetType];
export declare const AnalysisCrossDatasetTypes: {
    readonly AllDatasets: "ALL_DATASETS";
    readonly SingleDataset: "SINGLE_DATASET";
};
export type AnalysisCrossDatasetTypes = (typeof AnalysisCrossDatasetTypes)[keyof typeof AnalysisCrossDatasetTypes];
export declare const AnalysisCustomContentImageScalingConfiguration: {
    readonly FitToHeight: "FIT_TO_HEIGHT";
    readonly FitToWidth: "FIT_TO_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
    readonly ScaleToVisual: "SCALE_TO_VISUAL";
};
export type AnalysisCustomContentImageScalingConfiguration = (typeof AnalysisCustomContentImageScalingConfiguration)[keyof typeof AnalysisCustomContentImageScalingConfiguration];
export declare const AnalysisCustomContentType: {
    readonly Image: "IMAGE";
    readonly OtherEmbeddedContent: "OTHER_EMBEDDED_CONTENT";
};
export type AnalysisCustomContentType = (typeof AnalysisCustomContentType)[keyof typeof AnalysisCustomContentType];
export declare const AnalysisDataLabelContent: {
    readonly Value: "VALUE";
    readonly Percent: "PERCENT";
    readonly ValueAndPercent: "VALUE_AND_PERCENT";
};
export type AnalysisDataLabelContent = (typeof AnalysisDataLabelContent)[keyof typeof AnalysisDataLabelContent];
export declare const AnalysisDataLabelOverlap: {
    readonly DisableOverlap: "DISABLE_OVERLAP";
    readonly EnableOverlap: "ENABLE_OVERLAP";
};
export type AnalysisDataLabelOverlap = (typeof AnalysisDataLabelOverlap)[keyof typeof AnalysisDataLabelOverlap];
export declare const AnalysisDataLabelPosition: {
    readonly Inside: "INSIDE";
    readonly Outside: "OUTSIDE";
    readonly Left: "LEFT";
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
    readonly Right: "RIGHT";
};
export type AnalysisDataLabelPosition = (typeof AnalysisDataLabelPosition)[keyof typeof AnalysisDataLabelPosition];
export declare const AnalysisDateAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Min: "MIN";
    readonly Max: "MAX";
};
export type AnalysisDateAggregationFunction = (typeof AnalysisDateAggregationFunction)[keyof typeof AnalysisDateAggregationFunction];
export declare const AnalysisDayOfTheWeek: {
    readonly Sunday: "SUNDAY";
    readonly Monday: "MONDAY";
    readonly Tuesday: "TUESDAY";
    readonly Wednesday: "WEDNESDAY";
    readonly Thursday: "THURSDAY";
    readonly Friday: "FRIDAY";
    readonly Saturday: "SATURDAY";
};
export type AnalysisDayOfTheWeek = (typeof AnalysisDayOfTheWeek)[keyof typeof AnalysisDayOfTheWeek];
export declare const AnalysisErrorType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly ParameterValueIncompatible: "PARAMETER_VALUE_INCOMPATIBLE";
    readonly ParameterTypeInvalid: "PARAMETER_TYPE_INVALID";
    readonly ParameterNotFound: "PARAMETER_NOT_FOUND";
    readonly ColumnTypeMismatch: "COLUMN_TYPE_MISMATCH";
    readonly ColumnGeographicRoleMismatch: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
    readonly ColumnReplacementMissing: "COLUMN_REPLACEMENT_MISSING";
};
export type AnalysisErrorType = (typeof AnalysisErrorType)[keyof typeof AnalysisErrorType];
export declare const AnalysisFilterNullOption: {
    readonly AllValues: "ALL_VALUES";
    readonly NullsOnly: "NULLS_ONLY";
    readonly NonNullsOnly: "NON_NULLS_ONLY";
};
export type AnalysisFilterNullOption = (typeof AnalysisFilterNullOption)[keyof typeof AnalysisFilterNullOption];
export declare const AnalysisFilterVisualScope: {
    readonly AllVisuals: "ALL_VISUALS";
    readonly SelectedVisuals: "SELECTED_VISUALS";
};
export type AnalysisFilterVisualScope = (typeof AnalysisFilterVisualScope)[keyof typeof AnalysisFilterVisualScope];
export declare const AnalysisFontDecoration: {
    readonly Underline: "UNDERLINE";
    readonly None: "NONE";
};
export type AnalysisFontDecoration = (typeof AnalysisFontDecoration)[keyof typeof AnalysisFontDecoration];
export declare const AnalysisFontStyle: {
    readonly Normal: "NORMAL";
    readonly Italic: "ITALIC";
};
export type AnalysisFontStyle = (typeof AnalysisFontStyle)[keyof typeof AnalysisFontStyle];
export declare const AnalysisFontWeightName: {
    readonly Normal: "NORMAL";
    readonly Bold: "BOLD";
};
export type AnalysisFontWeightName = (typeof AnalysisFontWeightName)[keyof typeof AnalysisFontWeightName];
export declare const AnalysisForecastComputationSeasonality: {
    readonly Automatic: "AUTOMATIC";
    readonly Custom: "CUSTOM";
};
export type AnalysisForecastComputationSeasonality = (typeof AnalysisForecastComputationSeasonality)[keyof typeof AnalysisForecastComputationSeasonality];
export declare const AnalysisFunnelChartMeasureDataLabelStyle: {
    readonly ValueOnly: "VALUE_ONLY";
    readonly PercentageByFirstStage: "PERCENTAGE_BY_FIRST_STAGE";
    readonly PercentageByPreviousStage: "PERCENTAGE_BY_PREVIOUS_STAGE";
    readonly ValueAndPercentageByFirstStage: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE";
    readonly ValueAndPercentageByPreviousStage: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE";
};
export type AnalysisFunnelChartMeasureDataLabelStyle = (typeof AnalysisFunnelChartMeasureDataLabelStyle)[keyof typeof AnalysisFunnelChartMeasureDataLabelStyle];
export declare const AnalysisGeospatialColorState: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * Defines view state of the color
 */
export type AnalysisGeospatialColorState = (typeof AnalysisGeospatialColorState)[keyof typeof AnalysisGeospatialColorState];
export declare const AnalysisGeospatialLayerType: {
    readonly Point: "POINT";
    readonly Line: "LINE";
    readonly Polygon: "POLYGON";
};
export type AnalysisGeospatialLayerType = (typeof AnalysisGeospatialLayerType)[keyof typeof AnalysisGeospatialLayerType];
export declare const AnalysisGeospatialMapNavigation: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type AnalysisGeospatialMapNavigation = (typeof AnalysisGeospatialMapNavigation)[keyof typeof AnalysisGeospatialMapNavigation];
export declare const AnalysisGeospatialSelectedPointStyle: {
    readonly Point: "POINT";
    readonly Cluster: "CLUSTER";
    readonly Heatmap: "HEATMAP";
};
export type AnalysisGeospatialSelectedPointStyle = (typeof AnalysisGeospatialSelectedPointStyle)[keyof typeof AnalysisGeospatialSelectedPointStyle];
export declare const AnalysisHistogramBinType: {
    readonly BinCount: "BIN_COUNT";
    readonly BinWidth: "BIN_WIDTH";
};
export type AnalysisHistogramBinType = (typeof AnalysisHistogramBinType)[keyof typeof AnalysisHistogramBinType];
export declare const AnalysisHorizontalTextAlignment: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
    readonly Auto: "AUTO";
};
export type AnalysisHorizontalTextAlignment = (typeof AnalysisHorizontalTextAlignment)[keyof typeof AnalysisHorizontalTextAlignment];
export declare const AnalysisIcon: {
    readonly CaretUp: "CARET_UP";
    readonly CaretDown: "CARET_DOWN";
    readonly Plus: "PLUS";
    readonly Minus: "MINUS";
    readonly ArrowUp: "ARROW_UP";
    readonly ArrowDown: "ARROW_DOWN";
    readonly ArrowLeft: "ARROW_LEFT";
    readonly ArrowUpLeft: "ARROW_UP_LEFT";
    readonly ArrowDownLeft: "ARROW_DOWN_LEFT";
    readonly ArrowRight: "ARROW_RIGHT";
    readonly ArrowUpRight: "ARROW_UP_RIGHT";
    readonly ArrowDownRight: "ARROW_DOWN_RIGHT";
    readonly FaceUp: "FACE_UP";
    readonly FaceDown: "FACE_DOWN";
    readonly FaceFlat: "FACE_FLAT";
    readonly OneBar: "ONE_BAR";
    readonly TwoBar: "TWO_BAR";
    readonly ThreeBar: "THREE_BAR";
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Flag: "FLAG";
    readonly ThumbsUp: "THUMBS_UP";
    readonly ThumbsDown: "THUMBS_DOWN";
    readonly Checkmark: "CHECKMARK";
    readonly X: "X";
};
export type AnalysisIcon = (typeof AnalysisIcon)[keyof typeof AnalysisIcon];
export declare const AnalysisImageCustomActionTrigger: {
    readonly Click: "CLICK";
    readonly Menu: "MENU";
};
export type AnalysisImageCustomActionTrigger = (typeof AnalysisImageCustomActionTrigger)[keyof typeof AnalysisImageCustomActionTrigger];
export declare const AnalysisKpiSparklineType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
};
export type AnalysisKpiSparklineType = (typeof AnalysisKpiSparklineType)[keyof typeof AnalysisKpiSparklineType];
export declare const AnalysisKpiVisualStandardLayoutType: {
    readonly Classic: "CLASSIC";
    readonly Vertical: "VERTICAL";
};
export type AnalysisKpiVisualStandardLayoutType = (typeof AnalysisKpiVisualStandardLayoutType)[keyof typeof AnalysisKpiVisualStandardLayoutType];
export declare const AnalysisLayerCustomActionTrigger: {
    readonly DataPointClick: "DATA_POINT_CLICK";
    readonly DataPointMenu: "DATA_POINT_MENU";
};
export type AnalysisLayerCustomActionTrigger = (typeof AnalysisLayerCustomActionTrigger)[keyof typeof AnalysisLayerCustomActionTrigger];
export declare const AnalysisLayoutElementType: {
    readonly Visual: "VISUAL";
    readonly FilterControl: "FILTER_CONTROL";
    readonly ParameterControl: "PARAMETER_CONTROL";
    readonly TextBox: "TEXT_BOX";
    readonly Image: "IMAGE";
};
export type AnalysisLayoutElementType = (typeof AnalysisLayoutElementType)[keyof typeof AnalysisLayoutElementType];
export declare const AnalysisLegendPosition: {
    readonly Auto: "AUTO";
    readonly Right: "RIGHT";
    readonly Bottom: "BOTTOM";
    readonly Top: "TOP";
};
export type AnalysisLegendPosition = (typeof AnalysisLegendPosition)[keyof typeof AnalysisLegendPosition];
export declare const AnalysisLineChartLineStyle: {
    readonly Solid: "SOLID";
    readonly Dotted: "DOTTED";
    readonly Dashed: "DASHED";
};
export type AnalysisLineChartLineStyle = (typeof AnalysisLineChartLineStyle)[keyof typeof AnalysisLineChartLineStyle];
export declare const AnalysisLineChartMarkerShape: {
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Diamond: "DIAMOND";
    readonly RoundedSquare: "ROUNDED_SQUARE";
};
export type AnalysisLineChartMarkerShape = (typeof AnalysisLineChartMarkerShape)[keyof typeof AnalysisLineChartMarkerShape];
export declare const AnalysisLineChartType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
    readonly StackedArea: "STACKED_AREA";
};
export type AnalysisLineChartType = (typeof AnalysisLineChartType)[keyof typeof AnalysisLineChartType];
export declare const AnalysisLineInterpolation: {
    readonly Linear: "LINEAR";
    readonly Smooth: "SMOOTH";
    readonly Stepped: "STEPPED";
};
export type AnalysisLineInterpolation = (typeof AnalysisLineInterpolation)[keyof typeof AnalysisLineInterpolation];
export declare const AnalysisMapZoomMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type AnalysisMapZoomMode = (typeof AnalysisMapZoomMode)[keyof typeof AnalysisMapZoomMode];
export declare const AnalysisMaximumMinimumComputationType: {
    readonly Maximum: "MAXIMUM";
    readonly Minimum: "MINIMUM";
};
export type AnalysisMaximumMinimumComputationType = (typeof AnalysisMaximumMinimumComputationType)[keyof typeof AnalysisMaximumMinimumComputationType];
export declare const AnalysisMissingDataTreatmentOption: {
    readonly Interpolate: "INTERPOLATE";
    readonly ShowAsZero: "SHOW_AS_ZERO";
    readonly ShowAsBlank: "SHOW_AS_BLANK";
};
export type AnalysisMissingDataTreatmentOption = (typeof AnalysisMissingDataTreatmentOption)[keyof typeof AnalysisMissingDataTreatmentOption];
export declare const AnalysisNegativeValueDisplayMode: {
    readonly Positive: "POSITIVE";
    readonly Negative: "NEGATIVE";
};
export type AnalysisNegativeValueDisplayMode = (typeof AnalysisNegativeValueDisplayMode)[keyof typeof AnalysisNegativeValueDisplayMode];
export declare const AnalysisNumberScale: {
    readonly None: "NONE";
    readonly Auto: "AUTO";
    readonly Thousands: "THOUSANDS";
    readonly Millions: "MILLIONS";
    readonly Billions: "BILLIONS";
    readonly Trillions: "TRILLIONS";
};
export type AnalysisNumberScale = (typeof AnalysisNumberScale)[keyof typeof AnalysisNumberScale];
export declare const AnalysisNumericEqualityMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
};
export type AnalysisNumericEqualityMatchOperator = (typeof AnalysisNumericEqualityMatchOperator)[keyof typeof AnalysisNumericEqualityMatchOperator];
export declare const AnalysisNumericFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type AnalysisNumericFilterSelectAllOptions = (typeof AnalysisNumericFilterSelectAllOptions)[keyof typeof AnalysisNumericFilterSelectAllOptions];
export declare const AnalysisNumericSeparatorSymbol: {
    readonly Comma: "COMMA";
    readonly Dot: "DOT";
    readonly Space: "SPACE";
};
export type AnalysisNumericSeparatorSymbol = (typeof AnalysisNumericSeparatorSymbol)[keyof typeof AnalysisNumericSeparatorSymbol];
export declare const AnalysisOtherCategories: {
    readonly Include: "INCLUDE";
    readonly Exclude: "EXCLUDE";
};
export type AnalysisOtherCategories = (typeof AnalysisOtherCategories)[keyof typeof AnalysisOtherCategories];
export declare const AnalysisPanelBorderStyle: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type AnalysisPanelBorderStyle = (typeof AnalysisPanelBorderStyle)[keyof typeof AnalysisPanelBorderStyle];
export declare const AnalysisPaperOrientation: {
    readonly Portrait: "PORTRAIT";
    readonly Landscape: "LANDSCAPE";
};
export type AnalysisPaperOrientation = (typeof AnalysisPaperOrientation)[keyof typeof AnalysisPaperOrientation];
export declare const AnalysisPaperSize: {
    readonly UsLetter: "US_LETTER";
    readonly UsLegal: "US_LEGAL";
    readonly UsTabloidLedger: "US_TABLOID_LEDGER";
    readonly A0: "A0";
    readonly A1: "A1";
    readonly A2: "A2";
    readonly A3: "A3";
    readonly A4: "A4";
    readonly A5: "A5";
    readonly JisB4: "JIS_B4";
    readonly JisB5: "JIS_B5";
};
export type AnalysisPaperSize = (typeof AnalysisPaperSize)[keyof typeof AnalysisPaperSize];
export declare const AnalysisParameterValueType: {
    readonly MultiValued: "MULTI_VALUED";
    readonly SingleValued: "SINGLE_VALUED";
};
export type AnalysisParameterValueType = (typeof AnalysisParameterValueType)[keyof typeof AnalysisParameterValueType];
export declare const AnalysisPivotTableConditionalFormattingScopeRole: {
    readonly Field: "FIELD";
    readonly FieldTotal: "FIELD_TOTAL";
    readonly GrandTotal: "GRAND_TOTAL";
};
export type AnalysisPivotTableConditionalFormattingScopeRole = (typeof AnalysisPivotTableConditionalFormattingScopeRole)[keyof typeof AnalysisPivotTableConditionalFormattingScopeRole];
export declare const AnalysisPivotTableDataPathType: {
    readonly HierarchyRowsLayoutColumn: "HIERARCHY_ROWS_LAYOUT_COLUMN";
    readonly MultipleRowMetricsColumn: "MULTIPLE_ROW_METRICS_COLUMN";
    readonly EmptyColumnHeader: "EMPTY_COLUMN_HEADER";
    readonly CountMetricColumn: "COUNT_METRIC_COLUMN";
};
export type AnalysisPivotTableDataPathType = (typeof AnalysisPivotTableDataPathType)[keyof typeof AnalysisPivotTableDataPathType];
export declare const AnalysisPivotTableFieldCollapseState: {
    readonly Collapsed: "COLLAPSED";
    readonly Expanded: "EXPANDED";
};
export type AnalysisPivotTableFieldCollapseState = (typeof AnalysisPivotTableFieldCollapseState)[keyof typeof AnalysisPivotTableFieldCollapseState];
export declare const AnalysisPivotTableMetricPlacement: {
    readonly Row: "ROW";
    readonly Column: "COLUMN";
};
export type AnalysisPivotTableMetricPlacement = (typeof AnalysisPivotTableMetricPlacement)[keyof typeof AnalysisPivotTableMetricPlacement];
export declare const AnalysisPivotTableRowsLayout: {
    readonly Tabular: "TABULAR";
    readonly Hierarchy: "HIERARCHY";
};
export type AnalysisPivotTableRowsLayout = (typeof AnalysisPivotTableRowsLayout)[keyof typeof AnalysisPivotTableRowsLayout];
export declare const AnalysisPivotTableSubtotalLevel: {
    readonly All: "ALL";
    readonly Custom: "CUSTOM";
    readonly Last: "LAST";
};
export type AnalysisPivotTableSubtotalLevel = (typeof AnalysisPivotTableSubtotalLevel)[keyof typeof AnalysisPivotTableSubtotalLevel];
export declare const AnalysisPluginVisualAxisName: {
    readonly GroupBy: "GROUP_BY";
    readonly Value: "VALUE";
};
export type AnalysisPluginVisualAxisName = (typeof AnalysisPluginVisualAxisName)[keyof typeof AnalysisPluginVisualAxisName];
export declare const AnalysisPrimaryValueDisplayType: {
    readonly Hidden: "HIDDEN";
    readonly Comparison: "COMPARISON";
    readonly Actual: "ACTUAL";
};
export type AnalysisPrimaryValueDisplayType = (typeof AnalysisPrimaryValueDisplayType)[keyof typeof AnalysisPrimaryValueDisplayType];
export declare const AnalysisQueryExecutionMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type AnalysisQueryExecutionMode = (typeof AnalysisQueryExecutionMode)[keyof typeof AnalysisQueryExecutionMode];
export declare const AnalysisRadarChartAxesRangeScale: {
    readonly Auto: "AUTO";
    readonly Independent: "INDEPENDENT";
    readonly Shared: "SHARED";
};
export type AnalysisRadarChartAxesRangeScale = (typeof AnalysisRadarChartAxesRangeScale)[keyof typeof AnalysisRadarChartAxesRangeScale];
export declare const AnalysisRadarChartShape: {
    readonly Circle: "CIRCLE";
    readonly Polygon: "POLYGON";
};
export type AnalysisRadarChartShape = (typeof AnalysisRadarChartShape)[keyof typeof AnalysisRadarChartShape];
export declare const AnalysisReferenceLineLabelHorizontalPosition: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
};
export type AnalysisReferenceLineLabelHorizontalPosition = (typeof AnalysisReferenceLineLabelHorizontalPosition)[keyof typeof AnalysisReferenceLineLabelHorizontalPosition];
export declare const AnalysisReferenceLineLabelVerticalPosition: {
    readonly Above: "ABOVE";
    readonly Below: "BELOW";
};
export type AnalysisReferenceLineLabelVerticalPosition = (typeof AnalysisReferenceLineLabelVerticalPosition)[keyof typeof AnalysisReferenceLineLabelVerticalPosition];
export declare const AnalysisReferenceLinePatternType: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type AnalysisReferenceLinePatternType = (typeof AnalysisReferenceLinePatternType)[keyof typeof AnalysisReferenceLinePatternType];
export declare const AnalysisReferenceLineSeriesType: {
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type AnalysisReferenceLineSeriesType = (typeof AnalysisReferenceLineSeriesType)[keyof typeof AnalysisReferenceLineSeriesType];
export declare const AnalysisReferenceLineValueLabelRelativePosition: {
    readonly BeforeCustomLabel: "BEFORE_CUSTOM_LABEL";
    readonly AfterCustomLabel: "AFTER_CUSTOM_LABEL";
};
export type AnalysisReferenceLineValueLabelRelativePosition = (typeof AnalysisReferenceLineValueLabelRelativePosition)[keyof typeof AnalysisReferenceLineValueLabelRelativePosition];
export declare const AnalysisRelativeDateType: {
    readonly Previous: "PREVIOUS";
    readonly This: "THIS";
    readonly Last: "LAST";
    readonly Now: "NOW";
    readonly Next: "NEXT";
};
export type AnalysisRelativeDateType = (typeof AnalysisRelativeDateType)[keyof typeof AnalysisRelativeDateType];
export declare const AnalysisRelativeFontSize: {
    readonly ExtraSmall: "EXTRA_SMALL";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly ExtraLarge: "EXTRA_LARGE";
};
export type AnalysisRelativeFontSize = (typeof AnalysisRelativeFontSize)[keyof typeof AnalysisRelativeFontSize];
export declare const AnalysisResizeOption: {
    readonly Fixed: "FIXED";
    readonly Responsive: "RESPONSIVE";
};
export type AnalysisResizeOption = (typeof AnalysisResizeOption)[keyof typeof AnalysisResizeOption];
export declare const AnalysisResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export type AnalysisResourceStatus = (typeof AnalysisResourceStatus)[keyof typeof AnalysisResourceStatus];
export declare const AnalysisSectionPageBreakStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type AnalysisSectionPageBreakStatus = (typeof AnalysisSectionPageBreakStatus)[keyof typeof AnalysisSectionPageBreakStatus];
export declare const AnalysisSelectAllValueOptions: {
    readonly AllValues: "ALL_VALUES";
};
export type AnalysisSelectAllValueOptions = (typeof AnalysisSelectAllValueOptions)[keyof typeof AnalysisSelectAllValueOptions];
export declare const AnalysisSelectedFieldOptions: {
    readonly AllFields: "ALL_FIELDS";
};
export type AnalysisSelectedFieldOptions = (typeof AnalysisSelectedFieldOptions)[keyof typeof AnalysisSelectedFieldOptions];
export declare const AnalysisSelectedTooltipType: {
    readonly Basic: "BASIC";
    readonly Detailed: "DETAILED";
};
export type AnalysisSelectedTooltipType = (typeof AnalysisSelectedTooltipType)[keyof typeof AnalysisSelectedTooltipType];
export declare const AnalysisSheetContentType: {
    readonly Paginated: "PAGINATED";
    readonly Interactive: "INTERACTIVE";
};
export type AnalysisSheetContentType = (typeof AnalysisSheetContentType)[keyof typeof AnalysisSheetContentType];
export declare const AnalysisSheetControlDateTimePickerType: {
    readonly SingleValued: "SINGLE_VALUED";
    readonly DateRange: "DATE_RANGE";
};
export type AnalysisSheetControlDateTimePickerType = (typeof AnalysisSheetControlDateTimePickerType)[keyof typeof AnalysisSheetControlDateTimePickerType];
export declare const AnalysisSheetControlListType: {
    readonly MultiSelect: "MULTI_SELECT";
    readonly SingleSelect: "SINGLE_SELECT";
};
export type AnalysisSheetControlListType = (typeof AnalysisSheetControlListType)[keyof typeof AnalysisSheetControlListType];
export declare const AnalysisSheetControlSliderType: {
    readonly SinglePoint: "SINGLE_POINT";
    readonly Range: "RANGE";
};
export type AnalysisSheetControlSliderType = (typeof AnalysisSheetControlSliderType)[keyof typeof AnalysisSheetControlSliderType];
export declare const AnalysisSheetImageScalingType: {
    readonly ScaleToWidth: "SCALE_TO_WIDTH";
    readonly ScaleToHeight: "SCALE_TO_HEIGHT";
    readonly ScaleToContainer: "SCALE_TO_CONTAINER";
    readonly ScaleNone: "SCALE_NONE";
};
export type AnalysisSheetImageScalingType = (typeof AnalysisSheetImageScalingType)[keyof typeof AnalysisSheetImageScalingType];
export declare const AnalysisSimpleAttributeAggregationFunction: {
    readonly UniqueValue: "UNIQUE_VALUE";
};
export type AnalysisSimpleAttributeAggregationFunction = (typeof AnalysisSimpleAttributeAggregationFunction)[keyof typeof AnalysisSimpleAttributeAggregationFunction];
export declare const AnalysisSimpleNumericalAggregationFunction: {
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Var: "VAR";
    readonly Varp: "VARP";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Median: "MEDIAN";
};
export type AnalysisSimpleNumericalAggregationFunction = (typeof AnalysisSimpleNumericalAggregationFunction)[keyof typeof AnalysisSimpleNumericalAggregationFunction];
export declare const AnalysisSimpleTotalAggregationFunction: {
    readonly Default: "DEFAULT";
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly None: "NONE";
};
export type AnalysisSimpleTotalAggregationFunction = (typeof AnalysisSimpleTotalAggregationFunction)[keyof typeof AnalysisSimpleTotalAggregationFunction];
export declare const AnalysisSingleYAxisOption: {
    readonly PrimaryYAxis: "PRIMARY_Y_AXIS";
};
export type AnalysisSingleYAxisOption = (typeof AnalysisSingleYAxisOption)[keyof typeof AnalysisSingleYAxisOption];
export declare const AnalysisSmallMultiplesAxisPlacement: {
    readonly Outside: "OUTSIDE";
    readonly Inside: "INSIDE";
};
export type AnalysisSmallMultiplesAxisPlacement = (typeof AnalysisSmallMultiplesAxisPlacement)[keyof typeof AnalysisSmallMultiplesAxisPlacement];
export declare const AnalysisSmallMultiplesAxisScale: {
    readonly Shared: "SHARED";
    readonly Independent: "INDEPENDENT";
};
export type AnalysisSmallMultiplesAxisScale = (typeof AnalysisSmallMultiplesAxisScale)[keyof typeof AnalysisSmallMultiplesAxisScale];
export declare const AnalysisSortDirection: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type AnalysisSortDirection = (typeof AnalysisSortDirection)[keyof typeof AnalysisSortDirection];
export declare const AnalysisSpecialValue: {
    readonly Empty: "EMPTY";
    readonly Null: "NULL";
    readonly Other: "OTHER";
};
export type AnalysisSpecialValue = (typeof AnalysisSpecialValue)[keyof typeof AnalysisSpecialValue];
export declare const AnalysisStyledCellType: {
    readonly Total: "TOTAL";
    readonly MetricHeader: "METRIC_HEADER";
    readonly Value: "VALUE";
};
export type AnalysisStyledCellType = (typeof AnalysisStyledCellType)[keyof typeof AnalysisStyledCellType];
export declare const AnalysisTableBorderStyle: {
    readonly None: "NONE";
    readonly Solid: "SOLID";
};
export type AnalysisTableBorderStyle = (typeof AnalysisTableBorderStyle)[keyof typeof AnalysisTableBorderStyle];
export declare const AnalysisTableCellImageScalingConfiguration: {
    readonly FitToCellHeight: "FIT_TO_CELL_HEIGHT";
    readonly FitToCellWidth: "FIT_TO_CELL_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
};
export type AnalysisTableCellImageScalingConfiguration = (typeof AnalysisTableCellImageScalingConfiguration)[keyof typeof AnalysisTableCellImageScalingConfiguration];
export declare const AnalysisTableFieldIconSetType: {
    readonly Link: "LINK";
};
export type AnalysisTableFieldIconSetType = (typeof AnalysisTableFieldIconSetType)[keyof typeof AnalysisTableFieldIconSetType];
export declare const AnalysisTableOrientation: {
    readonly Vertical: "VERTICAL";
    readonly Horizontal: "HORIZONTAL";
};
export type AnalysisTableOrientation = (typeof AnalysisTableOrientation)[keyof typeof AnalysisTableOrientation];
export declare const AnalysisTableTotalsPlacement: {
    readonly Start: "START";
    readonly End: "END";
    readonly Auto: "AUTO";
};
export type AnalysisTableTotalsPlacement = (typeof AnalysisTableTotalsPlacement)[keyof typeof AnalysisTableTotalsPlacement];
export declare const AnalysisTableTotalsScrollStatus: {
    readonly Pinned: "PINNED";
    readonly Scrolled: "SCROLLED";
};
export type AnalysisTableTotalsScrollStatus = (typeof AnalysisTableTotalsScrollStatus)[keyof typeof AnalysisTableTotalsScrollStatus];
export declare const AnalysisTargetVisualOptions: {
    readonly AllVisuals: "ALL_VISUALS";
};
export type AnalysisTargetVisualOptions = (typeof AnalysisTargetVisualOptions)[keyof typeof AnalysisTargetVisualOptions];
export declare const AnalysisTextWrap: {
    readonly None: "NONE";
    readonly Wrap: "WRAP";
};
export type AnalysisTextWrap = (typeof AnalysisTextWrap)[keyof typeof AnalysisTextWrap];
export declare const AnalysisTimeGranularity: {
    readonly Year: "YEAR";
    readonly Quarter: "QUARTER";
    readonly Month: "MONTH";
    readonly Week: "WEEK";
    readonly Day: "DAY";
    readonly Hour: "HOUR";
    readonly Minute: "MINUTE";
    readonly Second: "SECOND";
    readonly Millisecond: "MILLISECOND";
};
export type AnalysisTimeGranularity = (typeof AnalysisTimeGranularity)[keyof typeof AnalysisTimeGranularity];
export declare const AnalysisTooltipTarget: {
    readonly Both: "BOTH";
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type AnalysisTooltipTarget = (typeof AnalysisTooltipTarget)[keyof typeof AnalysisTooltipTarget];
export declare const AnalysisTooltipTitleType: {
    readonly None: "NONE";
    readonly PrimaryValue: "PRIMARY_VALUE";
};
export type AnalysisTooltipTitleType = (typeof AnalysisTooltipTitleType)[keyof typeof AnalysisTooltipTitleType];
export declare const AnalysisTopBottomComputationType: {
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
};
export type AnalysisTopBottomComputationType = (typeof AnalysisTopBottomComputationType)[keyof typeof AnalysisTopBottomComputationType];
export declare const AnalysisTopBottomSortOrder: {
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly AbsoluteDifference: "ABSOLUTE_DIFFERENCE";
};
export type AnalysisTopBottomSortOrder = (typeof AnalysisTopBottomSortOrder)[keyof typeof AnalysisTopBottomSortOrder];
export declare const AnalysisUrlTargetConfiguration: {
    readonly NewTab: "NEW_TAB";
    readonly NewWindow: "NEW_WINDOW";
    readonly SameTab: "SAME_TAB";
};
export type AnalysisUrlTargetConfiguration = (typeof AnalysisUrlTargetConfiguration)[keyof typeof AnalysisUrlTargetConfiguration];
export declare const AnalysisValidationStrategyMode: {
    readonly Strict: "STRICT";
    readonly Lenient: "LENIENT";
};
export type AnalysisValidationStrategyMode = (typeof AnalysisValidationStrategyMode)[keyof typeof AnalysisValidationStrategyMode];
export declare const AnalysisValueWhenUnsetOption: {
    readonly RecommendedValue: "RECOMMENDED_VALUE";
    readonly Null: "NULL";
};
export type AnalysisValueWhenUnsetOption = (typeof AnalysisValueWhenUnsetOption)[keyof typeof AnalysisValueWhenUnsetOption];
export declare const AnalysisVerticalTextAlignment: {
    readonly Top: "TOP";
    readonly Middle: "MIDDLE";
    readonly Bottom: "BOTTOM";
    readonly Auto: "AUTO";
};
export type AnalysisVerticalTextAlignment = (typeof AnalysisVerticalTextAlignment)[keyof typeof AnalysisVerticalTextAlignment];
export declare const AnalysisVisibility: {
    readonly Hidden: "HIDDEN";
    readonly Visible: "VISIBLE";
};
export type AnalysisVisibility = (typeof AnalysisVisibility)[keyof typeof AnalysisVisibility];
export declare const AnalysisVisualCustomActionTrigger: {
    readonly DataPointClick: "DATA_POINT_CLICK";
    readonly DataPointMenu: "DATA_POINT_MENU";
};
export type AnalysisVisualCustomActionTrigger = (typeof AnalysisVisualCustomActionTrigger)[keyof typeof AnalysisVisualCustomActionTrigger];
export declare const AnalysisWidgetStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type AnalysisWidgetStatus = (typeof AnalysisWidgetStatus)[keyof typeof AnalysisWidgetStatus];
export declare const AnalysisWordCloudCloudLayout: {
    readonly Fluid: "FLUID";
    readonly Normal: "NORMAL";
};
export type AnalysisWordCloudCloudLayout = (typeof AnalysisWordCloudCloudLayout)[keyof typeof AnalysisWordCloudCloudLayout];
export declare const AnalysisWordCloudWordCasing: {
    readonly LowerCase: "LOWER_CASE";
    readonly ExistingCase: "EXISTING_CASE";
};
export type AnalysisWordCloudWordCasing = (typeof AnalysisWordCloudWordCasing)[keyof typeof AnalysisWordCloudWordCasing];
export declare const AnalysisWordCloudWordOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly HorizontalAndVertical: "HORIZONTAL_AND_VERTICAL";
};
export type AnalysisWordCloudWordOrientation = (typeof AnalysisWordCloudWordOrientation)[keyof typeof AnalysisWordCloudWordOrientation];
export declare const AnalysisWordCloudWordPadding: {
    readonly None: "NONE";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type AnalysisWordCloudWordPadding = (typeof AnalysisWordCloudWordPadding)[keyof typeof AnalysisWordCloudWordPadding];
export declare const AnalysisWordCloudWordScaling: {
    readonly Emphasize: "EMPHASIZE";
    readonly Normal: "NORMAL";
};
export type AnalysisWordCloudWordScaling = (typeof AnalysisWordCloudWordScaling)[keyof typeof AnalysisWordCloudWordScaling];
export declare const CustomPermissionsCapabilityState: {
    readonly Deny: "DENY";
};
export type CustomPermissionsCapabilityState = (typeof CustomPermissionsCapabilityState)[keyof typeof CustomPermissionsCapabilityState];
export declare const DashboardAnchorOption: {
    readonly Now: "NOW";
};
export type DashboardAnchorOption = (typeof DashboardAnchorOption)[keyof typeof DashboardAnchorOption];
export declare const DashboardArcThickness: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly Whole: "WHOLE";
};
export type DashboardArcThickness = (typeof DashboardArcThickness)[keyof typeof DashboardArcThickness];
export declare const DashboardArcThicknessOptions: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type DashboardArcThicknessOptions = (typeof DashboardArcThicknessOptions)[keyof typeof DashboardArcThicknessOptions];
export declare const DashboardAxisBinding: {
    readonly PrimaryYaxis: "PRIMARY_YAXIS";
    readonly SecondaryYaxis: "SECONDARY_YAXIS";
};
export type DashboardAxisBinding = (typeof DashboardAxisBinding)[keyof typeof DashboardAxisBinding];
export declare const DashboardBarChartOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly Vertical: "VERTICAL";
};
export type DashboardBarChartOrientation = (typeof DashboardBarChartOrientation)[keyof typeof DashboardBarChartOrientation];
export declare const DashboardBarsArrangement: {
    readonly Clustered: "CLUSTERED";
    readonly Stacked: "STACKED";
    readonly StackedPercent: "STACKED_PERCENT";
};
export type DashboardBarsArrangement = (typeof DashboardBarsArrangement)[keyof typeof DashboardBarsArrangement];
export declare const DashboardBaseMapStyleType: {
    readonly LightGray: "LIGHT_GRAY";
    readonly DarkGray: "DARK_GRAY";
    readonly Street: "STREET";
    readonly Imagery: "IMAGERY";
};
export type DashboardBaseMapStyleType = (typeof DashboardBaseMapStyleType)[keyof typeof DashboardBaseMapStyleType];
export declare const DashboardBehavior: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type DashboardBehavior = (typeof DashboardBehavior)[keyof typeof DashboardBehavior];
export declare const DashboardBoxPlotFillStyle: {
    readonly Solid: "SOLID";
    readonly Transparent: "TRANSPARENT";
};
export type DashboardBoxPlotFillStyle = (typeof DashboardBoxPlotFillStyle)[keyof typeof DashboardBoxPlotFillStyle];
export declare const DashboardCategoricalAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
};
export type DashboardCategoricalAggregationFunction = (typeof DashboardCategoricalAggregationFunction)[keyof typeof DashboardCategoricalAggregationFunction];
export declare const DashboardCategoryFilterMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
    readonly Contains: "CONTAINS";
    readonly DoesNotContain: "DOES_NOT_CONTAIN";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
};
export type DashboardCategoryFilterMatchOperator = (typeof DashboardCategoryFilterMatchOperator)[keyof typeof DashboardCategoryFilterMatchOperator];
export declare const DashboardCategoryFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type DashboardCategoryFilterSelectAllOptions = (typeof DashboardCategoryFilterSelectAllOptions)[keyof typeof DashboardCategoryFilterSelectAllOptions];
export declare const DashboardColorFillType: {
    readonly Discrete: "DISCRETE";
    readonly Gradient: "GRADIENT";
};
export type DashboardColorFillType = (typeof DashboardColorFillType)[keyof typeof DashboardColorFillType];
export declare const DashboardColumnRole: {
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
export type DashboardColumnRole = (typeof DashboardColumnRole)[keyof typeof DashboardColumnRole];
export declare const DashboardCommitMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type DashboardCommitMode = (typeof DashboardCommitMode)[keyof typeof DashboardCommitMode];
export declare const DashboardComparisonMethod: {
    readonly Difference: "DIFFERENCE";
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly Percent: "PERCENT";
};
export type DashboardComparisonMethod = (typeof DashboardComparisonMethod)[keyof typeof DashboardComparisonMethod];
export declare const DashboardConditionalFormattingIconDisplayOption: {
    readonly IconOnly: "ICON_ONLY";
};
export type DashboardConditionalFormattingIconDisplayOption = (typeof DashboardConditionalFormattingIconDisplayOption)[keyof typeof DashboardConditionalFormattingIconDisplayOption];
export declare const DashboardConditionalFormattingIconSetType: {
    readonly PlusMinus: "PLUS_MINUS";
    readonly CheckX: "CHECK_X";
    readonly ThreeColorArrow: "THREE_COLOR_ARROW";
    readonly ThreeGrayArrow: "THREE_GRAY_ARROW";
    readonly CaretUpMinusDown: "CARET_UP_MINUS_DOWN";
    readonly ThreeShape: "THREE_SHAPE";
    readonly ThreeCircle: "THREE_CIRCLE";
    readonly Flags: "FLAGS";
    readonly Bars: "BARS";
    readonly FourColorArrow: "FOUR_COLOR_ARROW";
    readonly FourGrayArrow: "FOUR_GRAY_ARROW";
};
export type DashboardConditionalFormattingIconSetType = (typeof DashboardConditionalFormattingIconSetType)[keyof typeof DashboardConditionalFormattingIconSetType];
export declare const DashboardCrossDatasetTypes: {
    readonly AllDatasets: "ALL_DATASETS";
    readonly SingleDataset: "SINGLE_DATASET";
};
export type DashboardCrossDatasetTypes = (typeof DashboardCrossDatasetTypes)[keyof typeof DashboardCrossDatasetTypes];
export declare const DashboardCustomContentImageScalingConfiguration: {
    readonly FitToHeight: "FIT_TO_HEIGHT";
    readonly FitToWidth: "FIT_TO_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
    readonly ScaleToVisual: "SCALE_TO_VISUAL";
};
export type DashboardCustomContentImageScalingConfiguration = (typeof DashboardCustomContentImageScalingConfiguration)[keyof typeof DashboardCustomContentImageScalingConfiguration];
export declare const DashboardCustomContentType: {
    readonly Image: "IMAGE";
    readonly OtherEmbeddedContent: "OTHER_EMBEDDED_CONTENT";
};
export type DashboardCustomContentType = (typeof DashboardCustomContentType)[keyof typeof DashboardCustomContentType];
export declare const DashboardDataLabelContent: {
    readonly Value: "VALUE";
    readonly Percent: "PERCENT";
    readonly ValueAndPercent: "VALUE_AND_PERCENT";
};
export type DashboardDataLabelContent = (typeof DashboardDataLabelContent)[keyof typeof DashboardDataLabelContent];
export declare const DashboardDataLabelOverlap: {
    readonly DisableOverlap: "DISABLE_OVERLAP";
    readonly EnableOverlap: "ENABLE_OVERLAP";
};
export type DashboardDataLabelOverlap = (typeof DashboardDataLabelOverlap)[keyof typeof DashboardDataLabelOverlap];
export declare const DashboardDataLabelPosition: {
    readonly Inside: "INSIDE";
    readonly Outside: "OUTSIDE";
    readonly Left: "LEFT";
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
    readonly Right: "RIGHT";
};
export type DashboardDataLabelPosition = (typeof DashboardDataLabelPosition)[keyof typeof DashboardDataLabelPosition];
export declare const DashboardDateAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Min: "MIN";
    readonly Max: "MAX";
};
export type DashboardDateAggregationFunction = (typeof DashboardDateAggregationFunction)[keyof typeof DashboardDateAggregationFunction];
export declare const DashboardDayOfTheWeek: {
    readonly Sunday: "SUNDAY";
    readonly Monday: "MONDAY";
    readonly Tuesday: "TUESDAY";
    readonly Wednesday: "WEDNESDAY";
    readonly Thursday: "THURSDAY";
    readonly Friday: "FRIDAY";
    readonly Saturday: "SATURDAY";
};
export type DashboardDayOfTheWeek = (typeof DashboardDayOfTheWeek)[keyof typeof DashboardDayOfTheWeek];
export declare const DashboardErrorType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly ParameterValueIncompatible: "PARAMETER_VALUE_INCOMPATIBLE";
    readonly ParameterTypeInvalid: "PARAMETER_TYPE_INVALID";
    readonly ParameterNotFound: "PARAMETER_NOT_FOUND";
    readonly ColumnTypeMismatch: "COLUMN_TYPE_MISMATCH";
    readonly ColumnGeographicRoleMismatch: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
    readonly ColumnReplacementMissing: "COLUMN_REPLACEMENT_MISSING";
};
export type DashboardErrorType = (typeof DashboardErrorType)[keyof typeof DashboardErrorType];
export declare const DashboardFilterNullOption: {
    readonly AllValues: "ALL_VALUES";
    readonly NullsOnly: "NULLS_ONLY";
    readonly NonNullsOnly: "NON_NULLS_ONLY";
};
export type DashboardFilterNullOption = (typeof DashboardFilterNullOption)[keyof typeof DashboardFilterNullOption];
export declare const DashboardFilterVisualScope: {
    readonly AllVisuals: "ALL_VISUALS";
    readonly SelectedVisuals: "SELECTED_VISUALS";
};
export type DashboardFilterVisualScope = (typeof DashboardFilterVisualScope)[keyof typeof DashboardFilterVisualScope];
export declare const DashboardFontDecoration: {
    readonly Underline: "UNDERLINE";
    readonly None: "NONE";
};
export type DashboardFontDecoration = (typeof DashboardFontDecoration)[keyof typeof DashboardFontDecoration];
export declare const DashboardFontStyle: {
    readonly Normal: "NORMAL";
    readonly Italic: "ITALIC";
};
export type DashboardFontStyle = (typeof DashboardFontStyle)[keyof typeof DashboardFontStyle];
export declare const DashboardFontWeightName: {
    readonly Normal: "NORMAL";
    readonly Bold: "BOLD";
};
export type DashboardFontWeightName = (typeof DashboardFontWeightName)[keyof typeof DashboardFontWeightName];
export declare const DashboardForecastComputationSeasonality: {
    readonly Automatic: "AUTOMATIC";
    readonly Custom: "CUSTOM";
};
export type DashboardForecastComputationSeasonality = (typeof DashboardForecastComputationSeasonality)[keyof typeof DashboardForecastComputationSeasonality];
export declare const DashboardFunnelChartMeasureDataLabelStyle: {
    readonly ValueOnly: "VALUE_ONLY";
    readonly PercentageByFirstStage: "PERCENTAGE_BY_FIRST_STAGE";
    readonly PercentageByPreviousStage: "PERCENTAGE_BY_PREVIOUS_STAGE";
    readonly ValueAndPercentageByFirstStage: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE";
    readonly ValueAndPercentageByPreviousStage: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE";
};
export type DashboardFunnelChartMeasureDataLabelStyle = (typeof DashboardFunnelChartMeasureDataLabelStyle)[keyof typeof DashboardFunnelChartMeasureDataLabelStyle];
export declare const DashboardGeospatialColorState: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
/**
 * Defines view state of the color
 */
export type DashboardGeospatialColorState = (typeof DashboardGeospatialColorState)[keyof typeof DashboardGeospatialColorState];
export declare const DashboardGeospatialLayerType: {
    readonly Point: "POINT";
    readonly Line: "LINE";
    readonly Polygon: "POLYGON";
};
export type DashboardGeospatialLayerType = (typeof DashboardGeospatialLayerType)[keyof typeof DashboardGeospatialLayerType];
export declare const DashboardGeospatialMapNavigation: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type DashboardGeospatialMapNavigation = (typeof DashboardGeospatialMapNavigation)[keyof typeof DashboardGeospatialMapNavigation];
export declare const DashboardGeospatialSelectedPointStyle: {
    readonly Point: "POINT";
    readonly Cluster: "CLUSTER";
    readonly Heatmap: "HEATMAP";
};
export type DashboardGeospatialSelectedPointStyle = (typeof DashboardGeospatialSelectedPointStyle)[keyof typeof DashboardGeospatialSelectedPointStyle];
export declare const DashboardHistogramBinType: {
    readonly BinCount: "BIN_COUNT";
    readonly BinWidth: "BIN_WIDTH";
};
export type DashboardHistogramBinType = (typeof DashboardHistogramBinType)[keyof typeof DashboardHistogramBinType];
export declare const DashboardHorizontalTextAlignment: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
    readonly Auto: "AUTO";
};
export type DashboardHorizontalTextAlignment = (typeof DashboardHorizontalTextAlignment)[keyof typeof DashboardHorizontalTextAlignment];
export declare const DashboardIcon: {
    readonly CaretUp: "CARET_UP";
    readonly CaretDown: "CARET_DOWN";
    readonly Plus: "PLUS";
    readonly Minus: "MINUS";
    readonly ArrowUp: "ARROW_UP";
    readonly ArrowDown: "ARROW_DOWN";
    readonly ArrowLeft: "ARROW_LEFT";
    readonly ArrowUpLeft: "ARROW_UP_LEFT";
    readonly ArrowDownLeft: "ARROW_DOWN_LEFT";
    readonly ArrowRight: "ARROW_RIGHT";
    readonly ArrowUpRight: "ARROW_UP_RIGHT";
    readonly ArrowDownRight: "ARROW_DOWN_RIGHT";
    readonly FaceUp: "FACE_UP";
    readonly FaceDown: "FACE_DOWN";
    readonly FaceFlat: "FACE_FLAT";
    readonly OneBar: "ONE_BAR";
    readonly TwoBar: "TWO_BAR";
    readonly ThreeBar: "THREE_BAR";
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Flag: "FLAG";
    readonly ThumbsUp: "THUMBS_UP";
    readonly ThumbsDown: "THUMBS_DOWN";
    readonly Checkmark: "CHECKMARK";
    readonly X: "X";
};
export type DashboardIcon = (typeof DashboardIcon)[keyof typeof DashboardIcon];
export declare const DashboardImageCustomActionTrigger: {
    readonly Click: "CLICK";
    readonly Menu: "MENU";
};
export type DashboardImageCustomActionTrigger = (typeof DashboardImageCustomActionTrigger)[keyof typeof DashboardImageCustomActionTrigger];
export declare const DashboardKpiSparklineType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
};
export type DashboardKpiSparklineType = (typeof DashboardKpiSparklineType)[keyof typeof DashboardKpiSparklineType];
export declare const DashboardKpiVisualStandardLayoutType: {
    readonly Classic: "CLASSIC";
    readonly Vertical: "VERTICAL";
};
export type DashboardKpiVisualStandardLayoutType = (typeof DashboardKpiVisualStandardLayoutType)[keyof typeof DashboardKpiVisualStandardLayoutType];
export declare const DashboardLayerCustomActionTrigger: {
    readonly DataPointClick: "DATA_POINT_CLICK";
    readonly DataPointMenu: "DATA_POINT_MENU";
};
export type DashboardLayerCustomActionTrigger = (typeof DashboardLayerCustomActionTrigger)[keyof typeof DashboardLayerCustomActionTrigger];
export declare const DashboardLayoutElementType: {
    readonly Visual: "VISUAL";
    readonly FilterControl: "FILTER_CONTROL";
    readonly ParameterControl: "PARAMETER_CONTROL";
    readonly TextBox: "TEXT_BOX";
    readonly Image: "IMAGE";
};
export type DashboardLayoutElementType = (typeof DashboardLayoutElementType)[keyof typeof DashboardLayoutElementType];
export declare const DashboardLegendPosition: {
    readonly Auto: "AUTO";
    readonly Right: "RIGHT";
    readonly Bottom: "BOTTOM";
    readonly Top: "TOP";
};
export type DashboardLegendPosition = (typeof DashboardLegendPosition)[keyof typeof DashboardLegendPosition];
export declare const DashboardLineChartLineStyle: {
    readonly Solid: "SOLID";
    readonly Dotted: "DOTTED";
    readonly Dashed: "DASHED";
};
export type DashboardLineChartLineStyle = (typeof DashboardLineChartLineStyle)[keyof typeof DashboardLineChartLineStyle];
export declare const DashboardLineChartMarkerShape: {
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Diamond: "DIAMOND";
    readonly RoundedSquare: "ROUNDED_SQUARE";
};
export type DashboardLineChartMarkerShape = (typeof DashboardLineChartMarkerShape)[keyof typeof DashboardLineChartMarkerShape];
export declare const DashboardLineChartType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
    readonly StackedArea: "STACKED_AREA";
};
export type DashboardLineChartType = (typeof DashboardLineChartType)[keyof typeof DashboardLineChartType];
export declare const DashboardLineInterpolation: {
    readonly Linear: "LINEAR";
    readonly Smooth: "SMOOTH";
    readonly Stepped: "STEPPED";
};
export type DashboardLineInterpolation = (typeof DashboardLineInterpolation)[keyof typeof DashboardLineInterpolation];
export declare const DashboardMapZoomMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type DashboardMapZoomMode = (typeof DashboardMapZoomMode)[keyof typeof DashboardMapZoomMode];
export declare const DashboardMaximumMinimumComputationType: {
    readonly Maximum: "MAXIMUM";
    readonly Minimum: "MINIMUM";
};
export type DashboardMaximumMinimumComputationType = (typeof DashboardMaximumMinimumComputationType)[keyof typeof DashboardMaximumMinimumComputationType];
export declare const DashboardMissingDataTreatmentOption: {
    readonly Interpolate: "INTERPOLATE";
    readonly ShowAsZero: "SHOW_AS_ZERO";
    readonly ShowAsBlank: "SHOW_AS_BLANK";
};
export type DashboardMissingDataTreatmentOption = (typeof DashboardMissingDataTreatmentOption)[keyof typeof DashboardMissingDataTreatmentOption];
export declare const DashboardNegativeValueDisplayMode: {
    readonly Positive: "POSITIVE";
    readonly Negative: "NEGATIVE";
};
export type DashboardNegativeValueDisplayMode = (typeof DashboardNegativeValueDisplayMode)[keyof typeof DashboardNegativeValueDisplayMode];
export declare const DashboardNumberScale: {
    readonly None: "NONE";
    readonly Auto: "AUTO";
    readonly Thousands: "THOUSANDS";
    readonly Millions: "MILLIONS";
    readonly Billions: "BILLIONS";
    readonly Trillions: "TRILLIONS";
};
export type DashboardNumberScale = (typeof DashboardNumberScale)[keyof typeof DashboardNumberScale];
export declare const DashboardNumericEqualityMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
};
export type DashboardNumericEqualityMatchOperator = (typeof DashboardNumericEqualityMatchOperator)[keyof typeof DashboardNumericEqualityMatchOperator];
export declare const DashboardNumericFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type DashboardNumericFilterSelectAllOptions = (typeof DashboardNumericFilterSelectAllOptions)[keyof typeof DashboardNumericFilterSelectAllOptions];
export declare const DashboardNumericSeparatorSymbol: {
    readonly Comma: "COMMA";
    readonly Dot: "DOT";
    readonly Space: "SPACE";
};
export type DashboardNumericSeparatorSymbol = (typeof DashboardNumericSeparatorSymbol)[keyof typeof DashboardNumericSeparatorSymbol];
export declare const DashboardOtherCategories: {
    readonly Include: "INCLUDE";
    readonly Exclude: "EXCLUDE";
};
export type DashboardOtherCategories = (typeof DashboardOtherCategories)[keyof typeof DashboardOtherCategories];
export declare const DashboardPanelBorderStyle: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type DashboardPanelBorderStyle = (typeof DashboardPanelBorderStyle)[keyof typeof DashboardPanelBorderStyle];
export declare const DashboardPaperOrientation: {
    readonly Portrait: "PORTRAIT";
    readonly Landscape: "LANDSCAPE";
};
export type DashboardPaperOrientation = (typeof DashboardPaperOrientation)[keyof typeof DashboardPaperOrientation];
export declare const DashboardPaperSize: {
    readonly UsLetter: "US_LETTER";
    readonly UsLegal: "US_LEGAL";
    readonly UsTabloidLedger: "US_TABLOID_LEDGER";
    readonly A0: "A0";
    readonly A1: "A1";
    readonly A2: "A2";
    readonly A3: "A3";
    readonly A4: "A4";
    readonly A5: "A5";
    readonly JisB4: "JIS_B4";
    readonly JisB5: "JIS_B5";
};
export type DashboardPaperSize = (typeof DashboardPaperSize)[keyof typeof DashboardPaperSize];
export declare const DashboardParameterValueType: {
    readonly MultiValued: "MULTI_VALUED";
    readonly SingleValued: "SINGLE_VALUED";
};
export type DashboardParameterValueType = (typeof DashboardParameterValueType)[keyof typeof DashboardParameterValueType];
export declare const DashboardPivotTableConditionalFormattingScopeRole: {
    readonly Field: "FIELD";
    readonly FieldTotal: "FIELD_TOTAL";
    readonly GrandTotal: "GRAND_TOTAL";
};
export type DashboardPivotTableConditionalFormattingScopeRole = (typeof DashboardPivotTableConditionalFormattingScopeRole)[keyof typeof DashboardPivotTableConditionalFormattingScopeRole];
export declare const DashboardPivotTableDataPathType: {
    readonly HierarchyRowsLayoutColumn: "HIERARCHY_ROWS_LAYOUT_COLUMN";
    readonly MultipleRowMetricsColumn: "MULTIPLE_ROW_METRICS_COLUMN";
    readonly EmptyColumnHeader: "EMPTY_COLUMN_HEADER";
    readonly CountMetricColumn: "COUNT_METRIC_COLUMN";
};
export type DashboardPivotTableDataPathType = (typeof DashboardPivotTableDataPathType)[keyof typeof DashboardPivotTableDataPathType];
export declare const DashboardPivotTableFieldCollapseState: {
    readonly Collapsed: "COLLAPSED";
    readonly Expanded: "EXPANDED";
};
export type DashboardPivotTableFieldCollapseState = (typeof DashboardPivotTableFieldCollapseState)[keyof typeof DashboardPivotTableFieldCollapseState];
export declare const DashboardPivotTableMetricPlacement: {
    readonly Row: "ROW";
    readonly Column: "COLUMN";
};
export type DashboardPivotTableMetricPlacement = (typeof DashboardPivotTableMetricPlacement)[keyof typeof DashboardPivotTableMetricPlacement];
export declare const DashboardPivotTableRowsLayout: {
    readonly Tabular: "TABULAR";
    readonly Hierarchy: "HIERARCHY";
};
export type DashboardPivotTableRowsLayout = (typeof DashboardPivotTableRowsLayout)[keyof typeof DashboardPivotTableRowsLayout];
export declare const DashboardPivotTableSubtotalLevel: {
    readonly All: "ALL";
    readonly Custom: "CUSTOM";
    readonly Last: "LAST";
};
export type DashboardPivotTableSubtotalLevel = (typeof DashboardPivotTableSubtotalLevel)[keyof typeof DashboardPivotTableSubtotalLevel];
export declare const DashboardPluginVisualAxisName: {
    readonly GroupBy: "GROUP_BY";
    readonly Value: "VALUE";
};
export type DashboardPluginVisualAxisName = (typeof DashboardPluginVisualAxisName)[keyof typeof DashboardPluginVisualAxisName];
export declare const DashboardPrimaryValueDisplayType: {
    readonly Hidden: "HIDDEN";
    readonly Comparison: "COMPARISON";
    readonly Actual: "ACTUAL";
};
export type DashboardPrimaryValueDisplayType = (typeof DashboardPrimaryValueDisplayType)[keyof typeof DashboardPrimaryValueDisplayType];
export declare const DashboardRadarChartAxesRangeScale: {
    readonly Auto: "AUTO";
    readonly Independent: "INDEPENDENT";
    readonly Shared: "SHARED";
};
export type DashboardRadarChartAxesRangeScale = (typeof DashboardRadarChartAxesRangeScale)[keyof typeof DashboardRadarChartAxesRangeScale];
export declare const DashboardRadarChartShape: {
    readonly Circle: "CIRCLE";
    readonly Polygon: "POLYGON";
};
export type DashboardRadarChartShape = (typeof DashboardRadarChartShape)[keyof typeof DashboardRadarChartShape];
export declare const DashboardReferenceLineLabelHorizontalPosition: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
};
export type DashboardReferenceLineLabelHorizontalPosition = (typeof DashboardReferenceLineLabelHorizontalPosition)[keyof typeof DashboardReferenceLineLabelHorizontalPosition];
export declare const DashboardReferenceLineLabelVerticalPosition: {
    readonly Above: "ABOVE";
    readonly Below: "BELOW";
};
export type DashboardReferenceLineLabelVerticalPosition = (typeof DashboardReferenceLineLabelVerticalPosition)[keyof typeof DashboardReferenceLineLabelVerticalPosition];
export declare const DashboardReferenceLinePatternType: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type DashboardReferenceLinePatternType = (typeof DashboardReferenceLinePatternType)[keyof typeof DashboardReferenceLinePatternType];
export declare const DashboardReferenceLineSeriesType: {
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type DashboardReferenceLineSeriesType = (typeof DashboardReferenceLineSeriesType)[keyof typeof DashboardReferenceLineSeriesType];
export declare const DashboardReferenceLineValueLabelRelativePosition: {
    readonly BeforeCustomLabel: "BEFORE_CUSTOM_LABEL";
    readonly AfterCustomLabel: "AFTER_CUSTOM_LABEL";
};
export type DashboardReferenceLineValueLabelRelativePosition = (typeof DashboardReferenceLineValueLabelRelativePosition)[keyof typeof DashboardReferenceLineValueLabelRelativePosition];
export declare const DashboardRelativeDateType: {
    readonly Previous: "PREVIOUS";
    readonly This: "THIS";
    readonly Last: "LAST";
    readonly Now: "NOW";
    readonly Next: "NEXT";
};
export type DashboardRelativeDateType = (typeof DashboardRelativeDateType)[keyof typeof DashboardRelativeDateType];
export declare const DashboardRelativeFontSize: {
    readonly ExtraSmall: "EXTRA_SMALL";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly ExtraLarge: "EXTRA_LARGE";
};
export type DashboardRelativeFontSize = (typeof DashboardRelativeFontSize)[keyof typeof DashboardRelativeFontSize];
export declare const DashboardResizeOption: {
    readonly Fixed: "FIXED";
    readonly Responsive: "RESPONSIVE";
};
export type DashboardResizeOption = (typeof DashboardResizeOption)[keyof typeof DashboardResizeOption];
export declare const DashboardResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export type DashboardResourceStatus = (typeof DashboardResourceStatus)[keyof typeof DashboardResourceStatus];
export declare const DashboardSectionPageBreakStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type DashboardSectionPageBreakStatus = (typeof DashboardSectionPageBreakStatus)[keyof typeof DashboardSectionPageBreakStatus];
export declare const DashboardSelectAllValueOptions: {
    readonly AllValues: "ALL_VALUES";
};
export type DashboardSelectAllValueOptions = (typeof DashboardSelectAllValueOptions)[keyof typeof DashboardSelectAllValueOptions];
export declare const DashboardSelectedFieldOptions: {
    readonly AllFields: "ALL_FIELDS";
};
export type DashboardSelectedFieldOptions = (typeof DashboardSelectedFieldOptions)[keyof typeof DashboardSelectedFieldOptions];
export declare const DashboardSelectedTooltipType: {
    readonly Basic: "BASIC";
    readonly Detailed: "DETAILED";
};
export type DashboardSelectedTooltipType = (typeof DashboardSelectedTooltipType)[keyof typeof DashboardSelectedTooltipType];
export declare const DashboardSheetContentType: {
    readonly Paginated: "PAGINATED";
    readonly Interactive: "INTERACTIVE";
};
export type DashboardSheetContentType = (typeof DashboardSheetContentType)[keyof typeof DashboardSheetContentType];
export declare const DashboardSheetControlDateTimePickerType: {
    readonly SingleValued: "SINGLE_VALUED";
    readonly DateRange: "DATE_RANGE";
};
export type DashboardSheetControlDateTimePickerType = (typeof DashboardSheetControlDateTimePickerType)[keyof typeof DashboardSheetControlDateTimePickerType];
export declare const DashboardSheetControlListType: {
    readonly MultiSelect: "MULTI_SELECT";
    readonly SingleSelect: "SINGLE_SELECT";
};
export type DashboardSheetControlListType = (typeof DashboardSheetControlListType)[keyof typeof DashboardSheetControlListType];
export declare const DashboardSheetControlSliderType: {
    readonly SinglePoint: "SINGLE_POINT";
    readonly Range: "RANGE";
};
export type DashboardSheetControlSliderType = (typeof DashboardSheetControlSliderType)[keyof typeof DashboardSheetControlSliderType];
export declare const DashboardSheetImageScalingType: {
    readonly ScaleToWidth: "SCALE_TO_WIDTH";
    readonly ScaleToHeight: "SCALE_TO_HEIGHT";
    readonly ScaleToContainer: "SCALE_TO_CONTAINER";
    readonly ScaleNone: "SCALE_NONE";
};
export type DashboardSheetImageScalingType = (typeof DashboardSheetImageScalingType)[keyof typeof DashboardSheetImageScalingType];
export declare const DashboardSimpleAttributeAggregationFunction: {
    readonly UniqueValue: "UNIQUE_VALUE";
};
export type DashboardSimpleAttributeAggregationFunction = (typeof DashboardSimpleAttributeAggregationFunction)[keyof typeof DashboardSimpleAttributeAggregationFunction];
export declare const DashboardSimpleNumericalAggregationFunction: {
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Var: "VAR";
    readonly Varp: "VARP";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Median: "MEDIAN";
};
export type DashboardSimpleNumericalAggregationFunction = (typeof DashboardSimpleNumericalAggregationFunction)[keyof typeof DashboardSimpleNumericalAggregationFunction];
export declare const DashboardSimpleTotalAggregationFunction: {
    readonly Default: "DEFAULT";
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly None: "NONE";
};
export type DashboardSimpleTotalAggregationFunction = (typeof DashboardSimpleTotalAggregationFunction)[keyof typeof DashboardSimpleTotalAggregationFunction];
export declare const DashboardSingleYAxisOption: {
    readonly PrimaryYAxis: "PRIMARY_Y_AXIS";
};
export type DashboardSingleYAxisOption = (typeof DashboardSingleYAxisOption)[keyof typeof DashboardSingleYAxisOption];
export declare const DashboardSmallMultiplesAxisPlacement: {
    readonly Outside: "OUTSIDE";
    readonly Inside: "INSIDE";
};
export type DashboardSmallMultiplesAxisPlacement = (typeof DashboardSmallMultiplesAxisPlacement)[keyof typeof DashboardSmallMultiplesAxisPlacement];
export declare const DashboardSmallMultiplesAxisScale: {
    readonly Shared: "SHARED";
    readonly Independent: "INDEPENDENT";
};
export type DashboardSmallMultiplesAxisScale = (typeof DashboardSmallMultiplesAxisScale)[keyof typeof DashboardSmallMultiplesAxisScale];
export declare const DashboardSortDirection: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type DashboardSortDirection = (typeof DashboardSortDirection)[keyof typeof DashboardSortDirection];
export declare const DashboardSpecialValue: {
    readonly Empty: "EMPTY";
    readonly Null: "NULL";
    readonly Other: "OTHER";
};
export type DashboardSpecialValue = (typeof DashboardSpecialValue)[keyof typeof DashboardSpecialValue];
export declare const DashboardStyledCellType: {
    readonly Total: "TOTAL";
    readonly MetricHeader: "METRIC_HEADER";
    readonly Value: "VALUE";
};
export type DashboardStyledCellType = (typeof DashboardStyledCellType)[keyof typeof DashboardStyledCellType];
export declare const DashboardTableBorderStyle: {
    readonly None: "NONE";
    readonly Solid: "SOLID";
};
export type DashboardTableBorderStyle = (typeof DashboardTableBorderStyle)[keyof typeof DashboardTableBorderStyle];
export declare const DashboardTableCellImageScalingConfiguration: {
    readonly FitToCellHeight: "FIT_TO_CELL_HEIGHT";
    readonly FitToCellWidth: "FIT_TO_CELL_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
};
export type DashboardTableCellImageScalingConfiguration = (typeof DashboardTableCellImageScalingConfiguration)[keyof typeof DashboardTableCellImageScalingConfiguration];
export declare const DashboardTableFieldIconSetType: {
    readonly Link: "LINK";
};
export type DashboardTableFieldIconSetType = (typeof DashboardTableFieldIconSetType)[keyof typeof DashboardTableFieldIconSetType];
export declare const DashboardTableOrientation: {
    readonly Vertical: "VERTICAL";
    readonly Horizontal: "HORIZONTAL";
};
export type DashboardTableOrientation = (typeof DashboardTableOrientation)[keyof typeof DashboardTableOrientation];
export declare const DashboardTableTotalsPlacement: {
    readonly Start: "START";
    readonly End: "END";
    readonly Auto: "AUTO";
};
export type DashboardTableTotalsPlacement = (typeof DashboardTableTotalsPlacement)[keyof typeof DashboardTableTotalsPlacement];
export declare const DashboardTableTotalsScrollStatus: {
    readonly Pinned: "PINNED";
    readonly Scrolled: "SCROLLED";
};
export type DashboardTableTotalsScrollStatus = (typeof DashboardTableTotalsScrollStatus)[keyof typeof DashboardTableTotalsScrollStatus];
export declare const DashboardTargetVisualOptions: {
    readonly AllVisuals: "ALL_VISUALS";
};
export type DashboardTargetVisualOptions = (typeof DashboardTargetVisualOptions)[keyof typeof DashboardTargetVisualOptions];
export declare const DashboardTextWrap: {
    readonly None: "NONE";
    readonly Wrap: "WRAP";
};
export type DashboardTextWrap = (typeof DashboardTextWrap)[keyof typeof DashboardTextWrap];
export declare const DashboardTimeGranularity: {
    readonly Year: "YEAR";
    readonly Quarter: "QUARTER";
    readonly Month: "MONTH";
    readonly Week: "WEEK";
    readonly Day: "DAY";
    readonly Hour: "HOUR";
    readonly Minute: "MINUTE";
    readonly Second: "SECOND";
    readonly Millisecond: "MILLISECOND";
};
export type DashboardTimeGranularity = (typeof DashboardTimeGranularity)[keyof typeof DashboardTimeGranularity];
export declare const DashboardTooltipTarget: {
    readonly Both: "BOTH";
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type DashboardTooltipTarget = (typeof DashboardTooltipTarget)[keyof typeof DashboardTooltipTarget];
export declare const DashboardTooltipTitleType: {
    readonly None: "NONE";
    readonly PrimaryValue: "PRIMARY_VALUE";
};
export type DashboardTooltipTitleType = (typeof DashboardTooltipTitleType)[keyof typeof DashboardTooltipTitleType];
export declare const DashboardTopBottomComputationType: {
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
};
export type DashboardTopBottomComputationType = (typeof DashboardTopBottomComputationType)[keyof typeof DashboardTopBottomComputationType];
export declare const DashboardTopBottomSortOrder: {
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly AbsoluteDifference: "ABSOLUTE_DIFFERENCE";
};
export type DashboardTopBottomSortOrder = (typeof DashboardTopBottomSortOrder)[keyof typeof DashboardTopBottomSortOrder];
export declare const DashboardUiState: {
    readonly Expanded: "EXPANDED";
    readonly Collapsed: "COLLAPSED";
};
export type DashboardUiState = (typeof DashboardUiState)[keyof typeof DashboardUiState];
export declare const DashboardUrlTargetConfiguration: {
    readonly NewTab: "NEW_TAB";
    readonly NewWindow: "NEW_WINDOW";
    readonly SameTab: "SAME_TAB";
};
export type DashboardUrlTargetConfiguration = (typeof DashboardUrlTargetConfiguration)[keyof typeof DashboardUrlTargetConfiguration];
export declare const DashboardValidationStrategyMode: {
    readonly Strict: "STRICT";
    readonly Lenient: "LENIENT";
};
export type DashboardValidationStrategyMode = (typeof DashboardValidationStrategyMode)[keyof typeof DashboardValidationStrategyMode];
export declare const DashboardValueWhenUnsetOption: {
    readonly RecommendedValue: "RECOMMENDED_VALUE";
    readonly Null: "NULL";
};
export type DashboardValueWhenUnsetOption = (typeof DashboardValueWhenUnsetOption)[keyof typeof DashboardValueWhenUnsetOption];
export declare const DashboardVerticalTextAlignment: {
    readonly Top: "TOP";
    readonly Middle: "MIDDLE";
    readonly Bottom: "BOTTOM";
    readonly Auto: "AUTO";
};
export type DashboardVerticalTextAlignment = (typeof DashboardVerticalTextAlignment)[keyof typeof DashboardVerticalTextAlignment];
export declare const DashboardVisibility: {
    readonly Hidden: "HIDDEN";
    readonly Visible: "VISIBLE";
};
export type DashboardVisibility = (typeof DashboardVisibility)[keyof typeof DashboardVisibility];
export declare const DashboardVisualCustomActionTrigger: {
    readonly DataPointClick: "DATA_POINT_CLICK";
    readonly DataPointMenu: "DATA_POINT_MENU";
};
export type DashboardVisualCustomActionTrigger = (typeof DashboardVisualCustomActionTrigger)[keyof typeof DashboardVisualCustomActionTrigger];
export declare const DashboardWidgetStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type DashboardWidgetStatus = (typeof DashboardWidgetStatus)[keyof typeof DashboardWidgetStatus];
export declare const DashboardWordCloudCloudLayout: {
    readonly Fluid: "FLUID";
    readonly Normal: "NORMAL";
};
export type DashboardWordCloudCloudLayout = (typeof DashboardWordCloudCloudLayout)[keyof typeof DashboardWordCloudCloudLayout];
export declare const DashboardWordCloudWordCasing: {
    readonly LowerCase: "LOWER_CASE";
    readonly ExistingCase: "EXISTING_CASE";
};
export type DashboardWordCloudWordCasing = (typeof DashboardWordCloudWordCasing)[keyof typeof DashboardWordCloudWordCasing];
export declare const DashboardWordCloudWordOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly HorizontalAndVertical: "HORIZONTAL_AND_VERTICAL";
};
export type DashboardWordCloudWordOrientation = (typeof DashboardWordCloudWordOrientation)[keyof typeof DashboardWordCloudWordOrientation];
export declare const DashboardWordCloudWordPadding: {
    readonly None: "NONE";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type DashboardWordCloudWordPadding = (typeof DashboardWordCloudWordPadding)[keyof typeof DashboardWordCloudWordPadding];
export declare const DashboardWordCloudWordScaling: {
    readonly Emphasize: "EMPHASIZE";
    readonly Normal: "NORMAL";
};
export type DashboardWordCloudWordScaling = (typeof DashboardWordCloudWordScaling)[keyof typeof DashboardWordCloudWordScaling];
export declare const DataSetColumnDataSubType: {
    readonly Float: "FLOAT";
    readonly Fixed: "FIXED";
};
export type DataSetColumnDataSubType = (typeof DataSetColumnDataSubType)[keyof typeof DataSetColumnDataSubType];
export declare const DataSetColumnDataType: {
    readonly String: "STRING";
    readonly Integer: "INTEGER";
    readonly Decimal: "DECIMAL";
    readonly Datetime: "DATETIME";
};
export type DataSetColumnDataType = (typeof DataSetColumnDataType)[keyof typeof DataSetColumnDataType];
export declare const DataSetColumnTagName: {
    readonly ColumnGeographicRole: "COLUMN_GEOGRAPHIC_ROLE";
    readonly ColumnDescription: "COLUMN_DESCRIPTION";
};
export type DataSetColumnTagName = (typeof DataSetColumnTagName)[keyof typeof DataSetColumnTagName];
export declare const DataSetDatasetParameterValueType: {
    readonly MultiValued: "MULTI_VALUED";
    readonly SingleValued: "SINGLE_VALUED";
};
export type DataSetDatasetParameterValueType = (typeof DataSetDatasetParameterValueType)[keyof typeof DataSetDatasetParameterValueType];
export declare const DataSetFileFormat: {
    readonly Csv: "CSV";
    readonly Tsv: "TSV";
    readonly Clf: "CLF";
    readonly Elf: "ELF";
    readonly Xlsx: "XLSX";
    readonly Json: "JSON";
};
export type DataSetFileFormat = (typeof DataSetFileFormat)[keyof typeof DataSetFileFormat];
export declare const DataSetGeoSpatialCountryCode: {
    readonly Us: "US";
};
export type DataSetGeoSpatialCountryCode = (typeof DataSetGeoSpatialCountryCode)[keyof typeof DataSetGeoSpatialCountryCode];
export declare const DataSetGeoSpatialDataRole: {
    readonly Country: "COUNTRY";
    readonly State: "STATE";
    readonly County: "COUNTY";
    readonly City: "CITY";
    readonly Postcode: "POSTCODE";
    readonly Longitude: "LONGITUDE";
    readonly Latitude: "LATITUDE";
    readonly Political1: "POLITICAL1";
    readonly CensusTract: "CENSUS_TRACT";
    readonly CensusBlockGroup: "CENSUS_BLOCK_GROUP";
    readonly CensusBlock: "CENSUS_BLOCK";
};
export type DataSetGeoSpatialDataRole = (typeof DataSetGeoSpatialDataRole)[keyof typeof DataSetGeoSpatialDataRole];
export declare const DataSetImportMode: {
    readonly Spice: "SPICE";
    readonly DirectQuery: "DIRECT_QUERY";
};
export type DataSetImportMode = (typeof DataSetImportMode)[keyof typeof DataSetImportMode];
export declare const DataSetInputColumnDataType: {
    readonly String: "STRING";
    readonly Integer: "INTEGER";
    readonly Decimal: "DECIMAL";
    readonly Datetime: "DATETIME";
    readonly Bit: "BIT";
    readonly Boolean: "BOOLEAN";
    readonly Json: "JSON";
};
export type DataSetInputColumnDataType = (typeof DataSetInputColumnDataType)[keyof typeof DataSetInputColumnDataType];
export declare const DataSetJoinType: {
    readonly Inner: "INNER";
    readonly Outer: "OUTER";
    readonly Left: "LEFT";
    readonly Right: "RIGHT";
};
export type DataSetJoinType = (typeof DataSetJoinType)[keyof typeof DataSetJoinType];
export declare const DataSetLookbackWindowSizeUnit: {
    readonly Hour: "HOUR";
    readonly Day: "DAY";
    readonly Week: "WEEK";
};
export type DataSetLookbackWindowSizeUnit = (typeof DataSetLookbackWindowSizeUnit)[keyof typeof DataSetLookbackWindowSizeUnit];
export declare const DataSetRowLevelPermissionFormatVersion: {
    readonly Version1: "VERSION_1";
    readonly Version2: "VERSION_2";
};
export type DataSetRowLevelPermissionFormatVersion = (typeof DataSetRowLevelPermissionFormatVersion)[keyof typeof DataSetRowLevelPermissionFormatVersion];
export declare const DataSetRowLevelPermissionPolicy: {
    readonly GrantAccess: "GRANT_ACCESS";
    readonly DenyAccess: "DENY_ACCESS";
};
export type DataSetRowLevelPermissionPolicy = (typeof DataSetRowLevelPermissionPolicy)[keyof typeof DataSetRowLevelPermissionPolicy];
export declare const DataSetStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type DataSetStatus = (typeof DataSetStatus)[keyof typeof DataSetStatus];
export declare const DataSetTextQualifier: {
    readonly DoubleQuote: "DOUBLE_QUOTE";
    readonly SingleQuote: "SINGLE_QUOTE";
};
export type DataSetTextQualifier = (typeof DataSetTextQualifier)[keyof typeof DataSetTextQualifier];
export declare const DataSetTimeGranularity: {
    readonly Year: "YEAR";
    readonly Quarter: "QUARTER";
    readonly Month: "MONTH";
    readonly Week: "WEEK";
    readonly Day: "DAY";
    readonly Hour: "HOUR";
    readonly Minute: "MINUTE";
    readonly Second: "SECOND";
    readonly Millisecond: "MILLISECOND";
};
export type DataSetTimeGranularity = (typeof DataSetTimeGranularity)[keyof typeof DataSetTimeGranularity];
export declare const DataSourceAuthenticationType: {
    readonly Password: "PASSWORD";
    readonly Token: "TOKEN";
    readonly X509: "X509";
};
export type DataSourceAuthenticationType = (typeof DataSourceAuthenticationType)[keyof typeof DataSourceAuthenticationType];
export declare const DataSourceErrorInfoType: {
    readonly AccessDenied: "ACCESS_DENIED";
    readonly CopySourceNotFound: "COPY_SOURCE_NOT_FOUND";
    readonly Timeout: "TIMEOUT";
    readonly EngineVersionNotSupported: "ENGINE_VERSION_NOT_SUPPORTED";
    readonly UnknownHost: "UNKNOWN_HOST";
    readonly GenericSqlFailure: "GENERIC_SQL_FAILURE";
    readonly Conflict: "CONFLICT";
    readonly Unknown: "UNKNOWN";
};
export type DataSourceErrorInfoType = (typeof DataSourceErrorInfoType)[keyof typeof DataSourceErrorInfoType];
export declare const DataSourceResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export type DataSourceResourceStatus = (typeof DataSourceResourceStatus)[keyof typeof DataSourceResourceStatus];
export declare const DataSourceStarburstProductType: {
    readonly Galaxy: "GALAXY";
    readonly Enterprise: "ENTERPRISE";
};
export type DataSourceStarburstProductType = (typeof DataSourceStarburstProductType)[keyof typeof DataSourceStarburstProductType];
export declare const DataSourceType: {
    readonly AdobeAnalytics: "ADOBE_ANALYTICS";
    readonly AmazonElasticsearch: "AMAZON_ELASTICSEARCH";
    readonly AmazonOpensearch: "AMAZON_OPENSEARCH";
    readonly Athena: "ATHENA";
    readonly Aurora: "AURORA";
    readonly AuroraPostgresql: "AURORA_POSTGRESQL";
    readonly AwsIotAnalytics: "AWS_IOT_ANALYTICS";
    readonly Databricks: "DATABRICKS";
    readonly Denodo: "DENODO";
    readonly Dremio: "DREMIO";
    readonly Dynamodb: "DYNAMODB";
    readonly Saphana: "SAPHANA";
    readonly Db2as400: "DB2_AS400";
    readonly Exasol: "EXASOL";
    readonly File: "FILE";
    readonly Github: "GITHUB";
    readonly Jira: "JIRA";
    readonly Mariadb: "MARIADB";
    readonly Mysql: "MYSQL";
    readonly Oracle: "ORACLE";
    readonly Postgresql: "POSTGRESQL";
    readonly Presto: "PRESTO";
    readonly Redshift: "REDSHIFT";
    readonly S3: "S3";
    readonly S3Tables: "S3_TABLES";
    readonly Salesforce: "SALESFORCE";
    readonly Servicenow: "SERVICENOW";
    readonly Snowflake: "SNOWFLAKE";
    readonly Spark: "SPARK";
    readonly Sqlserver: "SQLSERVER";
    readonly Teradata: "TERADATA";
    readonly Timestream: "TIMESTREAM";
    readonly Twitter: "TWITTER";
    readonly Bigquery: "BIGQUERY";
    readonly GoogleAnalytics: "GOOGLE_ANALYTICS";
    readonly Trino: "TRINO";
    readonly Starburst: "STARBURST";
    readonly Mongo: "MONGO";
    readonly MongoAtlas: "MONGO_ATLAS";
    readonly Documentdb: "DOCUMENTDB";
    readonly Appflow: "APPFLOW";
    readonly Impala: "IMPALA";
    readonly Glue: "GLUE";
};
export type DataSourceType = (typeof DataSourceType)[keyof typeof DataSourceType];
export declare const FolderSharingModel: {
    readonly Account: "ACCOUNT";
    readonly Namespace: "NAMESPACE";
};
export type FolderSharingModel = (typeof FolderSharingModel)[keyof typeof FolderSharingModel];
export declare const FolderType: {
    readonly Shared: "SHARED";
    readonly Restricted: "RESTRICTED";
};
export type FolderType = (typeof FolderType)[keyof typeof FolderType];
export declare const RefreshScheduleMapRefreshType: {
    readonly FullRefresh: "FULL_REFRESH";
    readonly IncrementalRefresh: "INCREMENTAL_REFRESH";
};
/**
 * The type of refresh that a dataset undergoes. Valid values are as follows:
 *
 * - `FULL_REFRESH` : A complete refresh of a dataset.
 * - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
 *
 * For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
 */
export type RefreshScheduleMapRefreshType = (typeof RefreshScheduleMapRefreshType)[keyof typeof RefreshScheduleMapRefreshType];
export declare const RefreshScheduleMapScheduleFrequencyPropertiesInterval: {
    readonly Minute15: "MINUTE15";
    readonly Minute30: "MINUTE30";
    readonly Hourly: "HOURLY";
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
};
export type RefreshScheduleMapScheduleFrequencyPropertiesInterval = (typeof RefreshScheduleMapScheduleFrequencyPropertiesInterval)[keyof typeof RefreshScheduleMapScheduleFrequencyPropertiesInterval];
export declare const RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek: {
    readonly Sunday: "SUNDAY";
    readonly Monday: "MONDAY";
    readonly Tuesday: "TUESDAY";
    readonly Wednesday: "WEDNESDAY";
    readonly Thursday: "THURSDAY";
    readonly Friday: "FRIDAY";
    readonly Saturday: "SATURDAY";
};
export type RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek = (typeof RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek)[keyof typeof RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek];
export declare const TemplateAnchorOption: {
    readonly Now: "NOW";
};
export type TemplateAnchorOption = (typeof TemplateAnchorOption)[keyof typeof TemplateAnchorOption];
export declare const TemplateArcThickness: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly Whole: "WHOLE";
};
export type TemplateArcThickness = (typeof TemplateArcThickness)[keyof typeof TemplateArcThickness];
export declare const TemplateArcThicknessOptions: {
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type TemplateArcThicknessOptions = (typeof TemplateArcThicknessOptions)[keyof typeof TemplateArcThicknessOptions];
export declare const TemplateAxisBinding: {
    readonly PrimaryYaxis: "PRIMARY_YAXIS";
    readonly SecondaryYaxis: "SECONDARY_YAXIS";
};
export type TemplateAxisBinding = (typeof TemplateAxisBinding)[keyof typeof TemplateAxisBinding];
export declare const TemplateBarChartOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly Vertical: "VERTICAL";
};
export type TemplateBarChartOrientation = (typeof TemplateBarChartOrientation)[keyof typeof TemplateBarChartOrientation];
export declare const TemplateBarsArrangement: {
    readonly Clustered: "CLUSTERED";
    readonly Stacked: "STACKED";
    readonly StackedPercent: "STACKED_PERCENT";
};
export type TemplateBarsArrangement = (typeof TemplateBarsArrangement)[keyof typeof TemplateBarsArrangement];
export declare const TemplateBaseMapStyleType: {
    readonly LightGray: "LIGHT_GRAY";
    readonly DarkGray: "DARK_GRAY";
    readonly Street: "STREET";
    readonly Imagery: "IMAGERY";
};
export type TemplateBaseMapStyleType = (typeof TemplateBaseMapStyleType)[keyof typeof TemplateBaseMapStyleType];
export declare const TemplateBoxPlotFillStyle: {
    readonly Solid: "SOLID";
    readonly Transparent: "TRANSPARENT";
};
export type TemplateBoxPlotFillStyle = (typeof TemplateBoxPlotFillStyle)[keyof typeof TemplateBoxPlotFillStyle];
export declare const TemplateCategoricalAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
};
export type TemplateCategoricalAggregationFunction = (typeof TemplateCategoricalAggregationFunction)[keyof typeof TemplateCategoricalAggregationFunction];
export declare const TemplateCategoryFilterMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
    readonly Contains: "CONTAINS";
    readonly DoesNotContain: "DOES_NOT_CONTAIN";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
};
export type TemplateCategoryFilterMatchOperator = (typeof TemplateCategoryFilterMatchOperator)[keyof typeof TemplateCategoryFilterMatchOperator];
export declare const TemplateCategoryFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type TemplateCategoryFilterSelectAllOptions = (typeof TemplateCategoryFilterSelectAllOptions)[keyof typeof TemplateCategoryFilterSelectAllOptions];
export declare const TemplateColorFillType: {
    readonly Discrete: "DISCRETE";
    readonly Gradient: "GRADIENT";
};
export type TemplateColorFillType = (typeof TemplateColorFillType)[keyof typeof TemplateColorFillType];
export declare const TemplateColumnRole: {
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
export type TemplateColumnRole = (typeof TemplateColumnRole)[keyof typeof TemplateColumnRole];
export declare const TemplateCommitMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type TemplateCommitMode = (typeof TemplateCommitMode)[keyof typeof TemplateCommitMode];
export declare const TemplateComparisonMethod: {
    readonly Difference: "DIFFERENCE";
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly Percent: "PERCENT";
};
export type TemplateComparisonMethod = (typeof TemplateComparisonMethod)[keyof typeof TemplateComparisonMethod];
export declare const TemplateConditionalFormattingIconDisplayOption: {
    readonly IconOnly: "ICON_ONLY";
};
export type TemplateConditionalFormattingIconDisplayOption = (typeof TemplateConditionalFormattingIconDisplayOption)[keyof typeof TemplateConditionalFormattingIconDisplayOption];
export declare const TemplateConditionalFormattingIconSetType: {
    readonly PlusMinus: "PLUS_MINUS";
    readonly CheckX: "CHECK_X";
    readonly ThreeColorArrow: "THREE_COLOR_ARROW";
    readonly ThreeGrayArrow: "THREE_GRAY_ARROW";
    readonly CaretUpMinusDown: "CARET_UP_MINUS_DOWN";
    readonly ThreeShape: "THREE_SHAPE";
    readonly ThreeCircle: "THREE_CIRCLE";
    readonly Flags: "FLAGS";
    readonly Bars: "BARS";
    readonly FourColorArrow: "FOUR_COLOR_ARROW";
    readonly FourGrayArrow: "FOUR_GRAY_ARROW";
};
export type TemplateConditionalFormattingIconSetType = (typeof TemplateConditionalFormattingIconSetType)[keyof typeof TemplateConditionalFormattingIconSetType];
export declare const TemplateCrossDatasetTypes: {
    readonly AllDatasets: "ALL_DATASETS";
    readonly SingleDataset: "SINGLE_DATASET";
};
export type TemplateCrossDatasetTypes = (typeof TemplateCrossDatasetTypes)[keyof typeof TemplateCrossDatasetTypes];
export declare const TemplateCustomContentImageScalingConfiguration: {
    readonly FitToHeight: "FIT_TO_HEIGHT";
    readonly FitToWidth: "FIT_TO_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
    readonly ScaleToVisual: "SCALE_TO_VISUAL";
};
export type TemplateCustomContentImageScalingConfiguration = (typeof TemplateCustomContentImageScalingConfiguration)[keyof typeof TemplateCustomContentImageScalingConfiguration];
export declare const TemplateCustomContentType: {
    readonly Image: "IMAGE";
    readonly OtherEmbeddedContent: "OTHER_EMBEDDED_CONTENT";
};
export type TemplateCustomContentType = (typeof TemplateCustomContentType)[keyof typeof TemplateCustomContentType];
export declare const TemplateDataLabelContent: {
    readonly Value: "VALUE";
    readonly Percent: "PERCENT";
    readonly ValueAndPercent: "VALUE_AND_PERCENT";
};
export type TemplateDataLabelContent = (typeof TemplateDataLabelContent)[keyof typeof TemplateDataLabelContent];
export declare const TemplateDataLabelOverlap: {
    readonly DisableOverlap: "DISABLE_OVERLAP";
    readonly EnableOverlap: "ENABLE_OVERLAP";
};
export type TemplateDataLabelOverlap = (typeof TemplateDataLabelOverlap)[keyof typeof TemplateDataLabelOverlap];
export declare const TemplateDataLabelPosition: {
    readonly Inside: "INSIDE";
    readonly Outside: "OUTSIDE";
    readonly Left: "LEFT";
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
    readonly Right: "RIGHT";
};
export type TemplateDataLabelPosition = (typeof TemplateDataLabelPosition)[keyof typeof TemplateDataLabelPosition];
export declare const TemplateDateAggregationFunction: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Min: "MIN";
    readonly Max: "MAX";
};
export type TemplateDateAggregationFunction = (typeof TemplateDateAggregationFunction)[keyof typeof TemplateDateAggregationFunction];
export declare const TemplateDayOfTheWeek: {
    readonly Sunday: "SUNDAY";
    readonly Monday: "MONDAY";
    readonly Tuesday: "TUESDAY";
    readonly Wednesday: "WEDNESDAY";
    readonly Thursday: "THURSDAY";
    readonly Friday: "FRIDAY";
    readonly Saturday: "SATURDAY";
};
export type TemplateDayOfTheWeek = (typeof TemplateDayOfTheWeek)[keyof typeof TemplateDayOfTheWeek];
export declare const TemplateErrorType: {
    readonly SourceNotFound: "SOURCE_NOT_FOUND";
    readonly DataSetNotFound: "DATA_SET_NOT_FOUND";
    readonly InternalFailure: "INTERNAL_FAILURE";
    readonly AccessDenied: "ACCESS_DENIED";
};
export type TemplateErrorType = (typeof TemplateErrorType)[keyof typeof TemplateErrorType];
export declare const TemplateFilterNullOption: {
    readonly AllValues: "ALL_VALUES";
    readonly NullsOnly: "NULLS_ONLY";
    readonly NonNullsOnly: "NON_NULLS_ONLY";
};
export type TemplateFilterNullOption = (typeof TemplateFilterNullOption)[keyof typeof TemplateFilterNullOption];
export declare const TemplateFilterVisualScope: {
    readonly AllVisuals: "ALL_VISUALS";
    readonly SelectedVisuals: "SELECTED_VISUALS";
};
export type TemplateFilterVisualScope = (typeof TemplateFilterVisualScope)[keyof typeof TemplateFilterVisualScope];
export declare const TemplateFontDecoration: {
    readonly Underline: "UNDERLINE";
    readonly None: "NONE";
};
export type TemplateFontDecoration = (typeof TemplateFontDecoration)[keyof typeof TemplateFontDecoration];
export declare const TemplateFontStyle: {
    readonly Normal: "NORMAL";
    readonly Italic: "ITALIC";
};
export type TemplateFontStyle = (typeof TemplateFontStyle)[keyof typeof TemplateFontStyle];
export declare const TemplateFontWeightName: {
    readonly Normal: "NORMAL";
    readonly Bold: "BOLD";
};
export type TemplateFontWeightName = (typeof TemplateFontWeightName)[keyof typeof TemplateFontWeightName];
export declare const TemplateForecastComputationSeasonality: {
    readonly Automatic: "AUTOMATIC";
    readonly Custom: "CUSTOM";
};
export type TemplateForecastComputationSeasonality = (typeof TemplateForecastComputationSeasonality)[keyof typeof TemplateForecastComputationSeasonality];
export declare const TemplateFunnelChartMeasureDataLabelStyle: {
    readonly ValueOnly: "VALUE_ONLY";
    readonly PercentageByFirstStage: "PERCENTAGE_BY_FIRST_STAGE";
    readonly PercentageByPreviousStage: "PERCENTAGE_BY_PREVIOUS_STAGE";
    readonly ValueAndPercentageByFirstStage: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE";
    readonly ValueAndPercentageByPreviousStage: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE";
};
export type TemplateFunnelChartMeasureDataLabelStyle = (typeof TemplateFunnelChartMeasureDataLabelStyle)[keyof typeof TemplateFunnelChartMeasureDataLabelStyle];
export declare const TemplateGeospatialSelectedPointStyle: {
    readonly Point: "POINT";
    readonly Cluster: "CLUSTER";
    readonly Heatmap: "HEATMAP";
};
export type TemplateGeospatialSelectedPointStyle = (typeof TemplateGeospatialSelectedPointStyle)[keyof typeof TemplateGeospatialSelectedPointStyle];
export declare const TemplateHistogramBinType: {
    readonly BinCount: "BIN_COUNT";
    readonly BinWidth: "BIN_WIDTH";
};
export type TemplateHistogramBinType = (typeof TemplateHistogramBinType)[keyof typeof TemplateHistogramBinType];
export declare const TemplateHorizontalTextAlignment: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
    readonly Auto: "AUTO";
};
export type TemplateHorizontalTextAlignment = (typeof TemplateHorizontalTextAlignment)[keyof typeof TemplateHorizontalTextAlignment];
export declare const TemplateIcon: {
    readonly CaretUp: "CARET_UP";
    readonly CaretDown: "CARET_DOWN";
    readonly Plus: "PLUS";
    readonly Minus: "MINUS";
    readonly ArrowUp: "ARROW_UP";
    readonly ArrowDown: "ARROW_DOWN";
    readonly ArrowLeft: "ARROW_LEFT";
    readonly ArrowUpLeft: "ARROW_UP_LEFT";
    readonly ArrowDownLeft: "ARROW_DOWN_LEFT";
    readonly ArrowRight: "ARROW_RIGHT";
    readonly ArrowUpRight: "ARROW_UP_RIGHT";
    readonly ArrowDownRight: "ARROW_DOWN_RIGHT";
    readonly FaceUp: "FACE_UP";
    readonly FaceDown: "FACE_DOWN";
    readonly FaceFlat: "FACE_FLAT";
    readonly OneBar: "ONE_BAR";
    readonly TwoBar: "TWO_BAR";
    readonly ThreeBar: "THREE_BAR";
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Flag: "FLAG";
    readonly ThumbsUp: "THUMBS_UP";
    readonly ThumbsDown: "THUMBS_DOWN";
    readonly Checkmark: "CHECKMARK";
    readonly X: "X";
};
export type TemplateIcon = (typeof TemplateIcon)[keyof typeof TemplateIcon];
export declare const TemplateImageCustomActionTrigger: {
    readonly Click: "CLICK";
    readonly Menu: "MENU";
};
export type TemplateImageCustomActionTrigger = (typeof TemplateImageCustomActionTrigger)[keyof typeof TemplateImageCustomActionTrigger];
export declare const TemplateKpiSparklineType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
};
export type TemplateKpiSparklineType = (typeof TemplateKpiSparklineType)[keyof typeof TemplateKpiSparklineType];
export declare const TemplateKpiVisualStandardLayoutType: {
    readonly Classic: "CLASSIC";
    readonly Vertical: "VERTICAL";
};
export type TemplateKpiVisualStandardLayoutType = (typeof TemplateKpiVisualStandardLayoutType)[keyof typeof TemplateKpiVisualStandardLayoutType];
export declare const TemplateLayoutElementType: {
    readonly Visual: "VISUAL";
    readonly FilterControl: "FILTER_CONTROL";
    readonly ParameterControl: "PARAMETER_CONTROL";
    readonly TextBox: "TEXT_BOX";
    readonly Image: "IMAGE";
};
export type TemplateLayoutElementType = (typeof TemplateLayoutElementType)[keyof typeof TemplateLayoutElementType];
export declare const TemplateLegendPosition: {
    readonly Auto: "AUTO";
    readonly Right: "RIGHT";
    readonly Bottom: "BOTTOM";
    readonly Top: "TOP";
};
export type TemplateLegendPosition = (typeof TemplateLegendPosition)[keyof typeof TemplateLegendPosition];
export declare const TemplateLineChartLineStyle: {
    readonly Solid: "SOLID";
    readonly Dotted: "DOTTED";
    readonly Dashed: "DASHED";
};
export type TemplateLineChartLineStyle = (typeof TemplateLineChartLineStyle)[keyof typeof TemplateLineChartLineStyle];
export declare const TemplateLineChartMarkerShape: {
    readonly Circle: "CIRCLE";
    readonly Triangle: "TRIANGLE";
    readonly Square: "SQUARE";
    readonly Diamond: "DIAMOND";
    readonly RoundedSquare: "ROUNDED_SQUARE";
};
export type TemplateLineChartMarkerShape = (typeof TemplateLineChartMarkerShape)[keyof typeof TemplateLineChartMarkerShape];
export declare const TemplateLineChartType: {
    readonly Line: "LINE";
    readonly Area: "AREA";
    readonly StackedArea: "STACKED_AREA";
};
export type TemplateLineChartType = (typeof TemplateLineChartType)[keyof typeof TemplateLineChartType];
export declare const TemplateLineInterpolation: {
    readonly Linear: "LINEAR";
    readonly Smooth: "SMOOTH";
    readonly Stepped: "STEPPED";
};
export type TemplateLineInterpolation = (typeof TemplateLineInterpolation)[keyof typeof TemplateLineInterpolation];
export declare const TemplateMapZoomMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type TemplateMapZoomMode = (typeof TemplateMapZoomMode)[keyof typeof TemplateMapZoomMode];
export declare const TemplateMaximumMinimumComputationType: {
    readonly Maximum: "MAXIMUM";
    readonly Minimum: "MINIMUM";
};
export type TemplateMaximumMinimumComputationType = (typeof TemplateMaximumMinimumComputationType)[keyof typeof TemplateMaximumMinimumComputationType];
export declare const TemplateMissingDataTreatmentOption: {
    readonly Interpolate: "INTERPOLATE";
    readonly ShowAsZero: "SHOW_AS_ZERO";
    readonly ShowAsBlank: "SHOW_AS_BLANK";
};
export type TemplateMissingDataTreatmentOption = (typeof TemplateMissingDataTreatmentOption)[keyof typeof TemplateMissingDataTreatmentOption];
export declare const TemplateNegativeValueDisplayMode: {
    readonly Positive: "POSITIVE";
    readonly Negative: "NEGATIVE";
};
export type TemplateNegativeValueDisplayMode = (typeof TemplateNegativeValueDisplayMode)[keyof typeof TemplateNegativeValueDisplayMode];
export declare const TemplateNumberScale: {
    readonly None: "NONE";
    readonly Auto: "AUTO";
    readonly Thousands: "THOUSANDS";
    readonly Millions: "MILLIONS";
    readonly Billions: "BILLIONS";
    readonly Trillions: "TRILLIONS";
};
export type TemplateNumberScale = (typeof TemplateNumberScale)[keyof typeof TemplateNumberScale];
export declare const TemplateNumericEqualityMatchOperator: {
    readonly Equals: "EQUALS";
    readonly DoesNotEqual: "DOES_NOT_EQUAL";
};
export type TemplateNumericEqualityMatchOperator = (typeof TemplateNumericEqualityMatchOperator)[keyof typeof TemplateNumericEqualityMatchOperator];
export declare const TemplateNumericFilterSelectAllOptions: {
    readonly FilterAllValues: "FILTER_ALL_VALUES";
};
export type TemplateNumericFilterSelectAllOptions = (typeof TemplateNumericFilterSelectAllOptions)[keyof typeof TemplateNumericFilterSelectAllOptions];
export declare const TemplateNumericSeparatorSymbol: {
    readonly Comma: "COMMA";
    readonly Dot: "DOT";
    readonly Space: "SPACE";
};
export type TemplateNumericSeparatorSymbol = (typeof TemplateNumericSeparatorSymbol)[keyof typeof TemplateNumericSeparatorSymbol];
export declare const TemplateOtherCategories: {
    readonly Include: "INCLUDE";
    readonly Exclude: "EXCLUDE";
};
export type TemplateOtherCategories = (typeof TemplateOtherCategories)[keyof typeof TemplateOtherCategories];
export declare const TemplatePanelBorderStyle: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type TemplatePanelBorderStyle = (typeof TemplatePanelBorderStyle)[keyof typeof TemplatePanelBorderStyle];
export declare const TemplatePaperOrientation: {
    readonly Portrait: "PORTRAIT";
    readonly Landscape: "LANDSCAPE";
};
export type TemplatePaperOrientation = (typeof TemplatePaperOrientation)[keyof typeof TemplatePaperOrientation];
export declare const TemplatePaperSize: {
    readonly UsLetter: "US_LETTER";
    readonly UsLegal: "US_LEGAL";
    readonly UsTabloidLedger: "US_TABLOID_LEDGER";
    readonly A0: "A0";
    readonly A1: "A1";
    readonly A2: "A2";
    readonly A3: "A3";
    readonly A4: "A4";
    readonly A5: "A5";
    readonly JisB4: "JIS_B4";
    readonly JisB5: "JIS_B5";
};
export type TemplatePaperSize = (typeof TemplatePaperSize)[keyof typeof TemplatePaperSize];
export declare const TemplateParameterValueType: {
    readonly MultiValued: "MULTI_VALUED";
    readonly SingleValued: "SINGLE_VALUED";
};
export type TemplateParameterValueType = (typeof TemplateParameterValueType)[keyof typeof TemplateParameterValueType];
export declare const TemplatePivotTableConditionalFormattingScopeRole: {
    readonly Field: "FIELD";
    readonly FieldTotal: "FIELD_TOTAL";
    readonly GrandTotal: "GRAND_TOTAL";
};
export type TemplatePivotTableConditionalFormattingScopeRole = (typeof TemplatePivotTableConditionalFormattingScopeRole)[keyof typeof TemplatePivotTableConditionalFormattingScopeRole];
export declare const TemplatePivotTableDataPathType: {
    readonly HierarchyRowsLayoutColumn: "HIERARCHY_ROWS_LAYOUT_COLUMN";
    readonly MultipleRowMetricsColumn: "MULTIPLE_ROW_METRICS_COLUMN";
    readonly EmptyColumnHeader: "EMPTY_COLUMN_HEADER";
    readonly CountMetricColumn: "COUNT_METRIC_COLUMN";
};
export type TemplatePivotTableDataPathType = (typeof TemplatePivotTableDataPathType)[keyof typeof TemplatePivotTableDataPathType];
export declare const TemplatePivotTableFieldCollapseState: {
    readonly Collapsed: "COLLAPSED";
    readonly Expanded: "EXPANDED";
};
export type TemplatePivotTableFieldCollapseState = (typeof TemplatePivotTableFieldCollapseState)[keyof typeof TemplatePivotTableFieldCollapseState];
export declare const TemplatePivotTableMetricPlacement: {
    readonly Row: "ROW";
    readonly Column: "COLUMN";
};
export type TemplatePivotTableMetricPlacement = (typeof TemplatePivotTableMetricPlacement)[keyof typeof TemplatePivotTableMetricPlacement];
export declare const TemplatePivotTableRowsLayout: {
    readonly Tabular: "TABULAR";
    readonly Hierarchy: "HIERARCHY";
};
export type TemplatePivotTableRowsLayout = (typeof TemplatePivotTableRowsLayout)[keyof typeof TemplatePivotTableRowsLayout];
export declare const TemplatePivotTableSubtotalLevel: {
    readonly All: "ALL";
    readonly Custom: "CUSTOM";
    readonly Last: "LAST";
};
export type TemplatePivotTableSubtotalLevel = (typeof TemplatePivotTableSubtotalLevel)[keyof typeof TemplatePivotTableSubtotalLevel];
export declare const TemplatePluginVisualAxisName: {
    readonly GroupBy: "GROUP_BY";
    readonly Value: "VALUE";
};
export type TemplatePluginVisualAxisName = (typeof TemplatePluginVisualAxisName)[keyof typeof TemplatePluginVisualAxisName];
export declare const TemplatePrimaryValueDisplayType: {
    readonly Hidden: "HIDDEN";
    readonly Comparison: "COMPARISON";
    readonly Actual: "ACTUAL";
};
export type TemplatePrimaryValueDisplayType = (typeof TemplatePrimaryValueDisplayType)[keyof typeof TemplatePrimaryValueDisplayType];
export declare const TemplateQueryExecutionMode: {
    readonly Auto: "AUTO";
    readonly Manual: "MANUAL";
};
export type TemplateQueryExecutionMode = (typeof TemplateQueryExecutionMode)[keyof typeof TemplateQueryExecutionMode];
export declare const TemplateRadarChartAxesRangeScale: {
    readonly Auto: "AUTO";
    readonly Independent: "INDEPENDENT";
    readonly Shared: "SHARED";
};
export type TemplateRadarChartAxesRangeScale = (typeof TemplateRadarChartAxesRangeScale)[keyof typeof TemplateRadarChartAxesRangeScale];
export declare const TemplateRadarChartShape: {
    readonly Circle: "CIRCLE";
    readonly Polygon: "POLYGON";
};
export type TemplateRadarChartShape = (typeof TemplateRadarChartShape)[keyof typeof TemplateRadarChartShape];
export declare const TemplateReferenceLineLabelHorizontalPosition: {
    readonly Left: "LEFT";
    readonly Center: "CENTER";
    readonly Right: "RIGHT";
};
export type TemplateReferenceLineLabelHorizontalPosition = (typeof TemplateReferenceLineLabelHorizontalPosition)[keyof typeof TemplateReferenceLineLabelHorizontalPosition];
export declare const TemplateReferenceLineLabelVerticalPosition: {
    readonly Above: "ABOVE";
    readonly Below: "BELOW";
};
export type TemplateReferenceLineLabelVerticalPosition = (typeof TemplateReferenceLineLabelVerticalPosition)[keyof typeof TemplateReferenceLineLabelVerticalPosition];
export declare const TemplateReferenceLinePatternType: {
    readonly Solid: "SOLID";
    readonly Dashed: "DASHED";
    readonly Dotted: "DOTTED";
};
export type TemplateReferenceLinePatternType = (typeof TemplateReferenceLinePatternType)[keyof typeof TemplateReferenceLinePatternType];
export declare const TemplateReferenceLineSeriesType: {
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type TemplateReferenceLineSeriesType = (typeof TemplateReferenceLineSeriesType)[keyof typeof TemplateReferenceLineSeriesType];
export declare const TemplateReferenceLineValueLabelRelativePosition: {
    readonly BeforeCustomLabel: "BEFORE_CUSTOM_LABEL";
    readonly AfterCustomLabel: "AFTER_CUSTOM_LABEL";
};
export type TemplateReferenceLineValueLabelRelativePosition = (typeof TemplateReferenceLineValueLabelRelativePosition)[keyof typeof TemplateReferenceLineValueLabelRelativePosition];
export declare const TemplateRelativeDateType: {
    readonly Previous: "PREVIOUS";
    readonly This: "THIS";
    readonly Last: "LAST";
    readonly Now: "NOW";
    readonly Next: "NEXT";
};
export type TemplateRelativeDateType = (typeof TemplateRelativeDateType)[keyof typeof TemplateRelativeDateType];
export declare const TemplateRelativeFontSize: {
    readonly ExtraSmall: "EXTRA_SMALL";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
    readonly ExtraLarge: "EXTRA_LARGE";
};
export type TemplateRelativeFontSize = (typeof TemplateRelativeFontSize)[keyof typeof TemplateRelativeFontSize];
export declare const TemplateResizeOption: {
    readonly Fixed: "FIXED";
    readonly Responsive: "RESPONSIVE";
};
export type TemplateResizeOption = (typeof TemplateResizeOption)[keyof typeof TemplateResizeOption];
export declare const TemplateResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export type TemplateResourceStatus = (typeof TemplateResourceStatus)[keyof typeof TemplateResourceStatus];
export declare const TemplateSectionPageBreakStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type TemplateSectionPageBreakStatus = (typeof TemplateSectionPageBreakStatus)[keyof typeof TemplateSectionPageBreakStatus];
export declare const TemplateSelectAllValueOptions: {
    readonly AllValues: "ALL_VALUES";
};
export type TemplateSelectAllValueOptions = (typeof TemplateSelectAllValueOptions)[keyof typeof TemplateSelectAllValueOptions];
export declare const TemplateSelectedFieldOptions: {
    readonly AllFields: "ALL_FIELDS";
};
export type TemplateSelectedFieldOptions = (typeof TemplateSelectedFieldOptions)[keyof typeof TemplateSelectedFieldOptions];
export declare const TemplateSelectedTooltipType: {
    readonly Basic: "BASIC";
    readonly Detailed: "DETAILED";
};
export type TemplateSelectedTooltipType = (typeof TemplateSelectedTooltipType)[keyof typeof TemplateSelectedTooltipType];
export declare const TemplateSheetContentType: {
    readonly Paginated: "PAGINATED";
    readonly Interactive: "INTERACTIVE";
};
export type TemplateSheetContentType = (typeof TemplateSheetContentType)[keyof typeof TemplateSheetContentType];
export declare const TemplateSheetControlDateTimePickerType: {
    readonly SingleValued: "SINGLE_VALUED";
    readonly DateRange: "DATE_RANGE";
};
export type TemplateSheetControlDateTimePickerType = (typeof TemplateSheetControlDateTimePickerType)[keyof typeof TemplateSheetControlDateTimePickerType];
export declare const TemplateSheetControlListType: {
    readonly MultiSelect: "MULTI_SELECT";
    readonly SingleSelect: "SINGLE_SELECT";
};
export type TemplateSheetControlListType = (typeof TemplateSheetControlListType)[keyof typeof TemplateSheetControlListType];
export declare const TemplateSheetControlSliderType: {
    readonly SinglePoint: "SINGLE_POINT";
    readonly Range: "RANGE";
};
export type TemplateSheetControlSliderType = (typeof TemplateSheetControlSliderType)[keyof typeof TemplateSheetControlSliderType];
export declare const TemplateSheetImageScalingType: {
    readonly ScaleToWidth: "SCALE_TO_WIDTH";
    readonly ScaleToHeight: "SCALE_TO_HEIGHT";
    readonly ScaleToContainer: "SCALE_TO_CONTAINER";
    readonly ScaleNone: "SCALE_NONE";
};
export type TemplateSheetImageScalingType = (typeof TemplateSheetImageScalingType)[keyof typeof TemplateSheetImageScalingType];
export declare const TemplateSimpleAttributeAggregationFunction: {
    readonly UniqueValue: "UNIQUE_VALUE";
};
export type TemplateSimpleAttributeAggregationFunction = (typeof TemplateSimpleAttributeAggregationFunction)[keyof typeof TemplateSimpleAttributeAggregationFunction];
export declare const TemplateSimpleNumericalAggregationFunction: {
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Var: "VAR";
    readonly Varp: "VARP";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Median: "MEDIAN";
};
export type TemplateSimpleNumericalAggregationFunction = (typeof TemplateSimpleNumericalAggregationFunction)[keyof typeof TemplateSimpleNumericalAggregationFunction];
export declare const TemplateSimpleTotalAggregationFunction: {
    readonly Default: "DEFAULT";
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly None: "NONE";
};
export type TemplateSimpleTotalAggregationFunction = (typeof TemplateSimpleTotalAggregationFunction)[keyof typeof TemplateSimpleTotalAggregationFunction];
export declare const TemplateSingleYAxisOption: {
    readonly PrimaryYAxis: "PRIMARY_Y_AXIS";
};
export type TemplateSingleYAxisOption = (typeof TemplateSingleYAxisOption)[keyof typeof TemplateSingleYAxisOption];
export declare const TemplateSmallMultiplesAxisPlacement: {
    readonly Outside: "OUTSIDE";
    readonly Inside: "INSIDE";
};
export type TemplateSmallMultiplesAxisPlacement = (typeof TemplateSmallMultiplesAxisPlacement)[keyof typeof TemplateSmallMultiplesAxisPlacement];
export declare const TemplateSmallMultiplesAxisScale: {
    readonly Shared: "SHARED";
    readonly Independent: "INDEPENDENT";
};
export type TemplateSmallMultiplesAxisScale = (typeof TemplateSmallMultiplesAxisScale)[keyof typeof TemplateSmallMultiplesAxisScale];
export declare const TemplateSortDirection: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type TemplateSortDirection = (typeof TemplateSortDirection)[keyof typeof TemplateSortDirection];
export declare const TemplateSpecialValue: {
    readonly Empty: "EMPTY";
    readonly Null: "NULL";
    readonly Other: "OTHER";
};
export type TemplateSpecialValue = (typeof TemplateSpecialValue)[keyof typeof TemplateSpecialValue];
export declare const TemplateStyledCellType: {
    readonly Total: "TOTAL";
    readonly MetricHeader: "METRIC_HEADER";
    readonly Value: "VALUE";
};
export type TemplateStyledCellType = (typeof TemplateStyledCellType)[keyof typeof TemplateStyledCellType];
export declare const TemplateTableBorderStyle: {
    readonly None: "NONE";
    readonly Solid: "SOLID";
};
export type TemplateTableBorderStyle = (typeof TemplateTableBorderStyle)[keyof typeof TemplateTableBorderStyle];
export declare const TemplateTableCellImageScalingConfiguration: {
    readonly FitToCellHeight: "FIT_TO_CELL_HEIGHT";
    readonly FitToCellWidth: "FIT_TO_CELL_WIDTH";
    readonly DoNotScale: "DO_NOT_SCALE";
};
export type TemplateTableCellImageScalingConfiguration = (typeof TemplateTableCellImageScalingConfiguration)[keyof typeof TemplateTableCellImageScalingConfiguration];
export declare const TemplateTableFieldIconSetType: {
    readonly Link: "LINK";
};
export type TemplateTableFieldIconSetType = (typeof TemplateTableFieldIconSetType)[keyof typeof TemplateTableFieldIconSetType];
export declare const TemplateTableOrientation: {
    readonly Vertical: "VERTICAL";
    readonly Horizontal: "HORIZONTAL";
};
export type TemplateTableOrientation = (typeof TemplateTableOrientation)[keyof typeof TemplateTableOrientation];
export declare const TemplateTableTotalsPlacement: {
    readonly Start: "START";
    readonly End: "END";
    readonly Auto: "AUTO";
};
export type TemplateTableTotalsPlacement = (typeof TemplateTableTotalsPlacement)[keyof typeof TemplateTableTotalsPlacement];
export declare const TemplateTableTotalsScrollStatus: {
    readonly Pinned: "PINNED";
    readonly Scrolled: "SCROLLED";
};
export type TemplateTableTotalsScrollStatus = (typeof TemplateTableTotalsScrollStatus)[keyof typeof TemplateTableTotalsScrollStatus];
export declare const TemplateTargetVisualOptions: {
    readonly AllVisuals: "ALL_VISUALS";
};
export type TemplateTargetVisualOptions = (typeof TemplateTargetVisualOptions)[keyof typeof TemplateTargetVisualOptions];
export declare const TemplateTextWrap: {
    readonly None: "NONE";
    readonly Wrap: "WRAP";
};
export type TemplateTextWrap = (typeof TemplateTextWrap)[keyof typeof TemplateTextWrap];
export declare const TemplateTimeGranularity: {
    readonly Year: "YEAR";
    readonly Quarter: "QUARTER";
    readonly Month: "MONTH";
    readonly Week: "WEEK";
    readonly Day: "DAY";
    readonly Hour: "HOUR";
    readonly Minute: "MINUTE";
    readonly Second: "SECOND";
    readonly Millisecond: "MILLISECOND";
};
export type TemplateTimeGranularity = (typeof TemplateTimeGranularity)[keyof typeof TemplateTimeGranularity];
export declare const TemplateTooltipTarget: {
    readonly Both: "BOTH";
    readonly Bar: "BAR";
    readonly Line: "LINE";
};
export type TemplateTooltipTarget = (typeof TemplateTooltipTarget)[keyof typeof TemplateTooltipTarget];
export declare const TemplateTooltipTitleType: {
    readonly None: "NONE";
    readonly PrimaryValue: "PRIMARY_VALUE";
};
export type TemplateTooltipTitleType = (typeof TemplateTooltipTitleType)[keyof typeof TemplateTooltipTitleType];
export declare const TemplateTopBottomComputationType: {
    readonly Top: "TOP";
    readonly Bottom: "BOTTOM";
};
export type TemplateTopBottomComputationType = (typeof TemplateTopBottomComputationType)[keyof typeof TemplateTopBottomComputationType];
export declare const TemplateTopBottomSortOrder: {
    readonly PercentDifference: "PERCENT_DIFFERENCE";
    readonly AbsoluteDifference: "ABSOLUTE_DIFFERENCE";
};
export type TemplateTopBottomSortOrder = (typeof TemplateTopBottomSortOrder)[keyof typeof TemplateTopBottomSortOrder];
export declare const TemplateUrlTargetConfiguration: {
    readonly NewTab: "NEW_TAB";
    readonly NewWindow: "NEW_WINDOW";
    readonly SameTab: "SAME_TAB";
};
export type TemplateUrlTargetConfiguration = (typeof TemplateUrlTargetConfiguration)[keyof typeof TemplateUrlTargetConfiguration];
export declare const TemplateValidationStrategyMode: {
    readonly Strict: "STRICT";
    readonly Lenient: "LENIENT";
};
export type TemplateValidationStrategyMode = (typeof TemplateValidationStrategyMode)[keyof typeof TemplateValidationStrategyMode];
export declare const TemplateValueWhenUnsetOption: {
    readonly RecommendedValue: "RECOMMENDED_VALUE";
    readonly Null: "NULL";
};
export type TemplateValueWhenUnsetOption = (typeof TemplateValueWhenUnsetOption)[keyof typeof TemplateValueWhenUnsetOption];
export declare const TemplateVerticalTextAlignment: {
    readonly Top: "TOP";
    readonly Middle: "MIDDLE";
    readonly Bottom: "BOTTOM";
    readonly Auto: "AUTO";
};
export type TemplateVerticalTextAlignment = (typeof TemplateVerticalTextAlignment)[keyof typeof TemplateVerticalTextAlignment];
export declare const TemplateVisibility: {
    readonly Hidden: "HIDDEN";
    readonly Visible: "VISIBLE";
};
export type TemplateVisibility = (typeof TemplateVisibility)[keyof typeof TemplateVisibility];
export declare const TemplateVisualCustomActionTrigger: {
    readonly DataPointClick: "DATA_POINT_CLICK";
    readonly DataPointMenu: "DATA_POINT_MENU";
};
export type TemplateVisualCustomActionTrigger = (typeof TemplateVisualCustomActionTrigger)[keyof typeof TemplateVisualCustomActionTrigger];
export declare const TemplateWidgetStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
export type TemplateWidgetStatus = (typeof TemplateWidgetStatus)[keyof typeof TemplateWidgetStatus];
export declare const TemplateWordCloudCloudLayout: {
    readonly Fluid: "FLUID";
    readonly Normal: "NORMAL";
};
export type TemplateWordCloudCloudLayout = (typeof TemplateWordCloudCloudLayout)[keyof typeof TemplateWordCloudCloudLayout];
export declare const TemplateWordCloudWordCasing: {
    readonly LowerCase: "LOWER_CASE";
    readonly ExistingCase: "EXISTING_CASE";
};
export type TemplateWordCloudWordCasing = (typeof TemplateWordCloudWordCasing)[keyof typeof TemplateWordCloudWordCasing];
export declare const TemplateWordCloudWordOrientation: {
    readonly Horizontal: "HORIZONTAL";
    readonly HorizontalAndVertical: "HORIZONTAL_AND_VERTICAL";
};
export type TemplateWordCloudWordOrientation = (typeof TemplateWordCloudWordOrientation)[keyof typeof TemplateWordCloudWordOrientation];
export declare const TemplateWordCloudWordPadding: {
    readonly None: "NONE";
    readonly Small: "SMALL";
    readonly Medium: "MEDIUM";
    readonly Large: "LARGE";
};
export type TemplateWordCloudWordPadding = (typeof TemplateWordCloudWordPadding)[keyof typeof TemplateWordCloudWordPadding];
export declare const TemplateWordCloudWordScaling: {
    readonly Emphasize: "EMPHASIZE";
    readonly Normal: "NORMAL";
};
export type TemplateWordCloudWordScaling = (typeof TemplateWordCloudWordScaling)[keyof typeof TemplateWordCloudWordScaling];
export declare const ThemeErrorType: {
    readonly InternalFailure: "INTERNAL_FAILURE";
};
export type ThemeErrorType = (typeof ThemeErrorType)[keyof typeof ThemeErrorType];
export declare const ThemeResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleted: "DELETED";
};
export type ThemeResourceStatus = (typeof ThemeResourceStatus)[keyof typeof ThemeResourceStatus];
export declare const ThemeType: {
    readonly Quicksight: "QUICKSIGHT";
    readonly Custom: "CUSTOM";
    readonly All: "ALL";
};
export type ThemeType = (typeof ThemeType)[keyof typeof ThemeType];
export declare const TopicAuthorSpecifiedAggregation: {
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly Median: "MEDIAN";
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Var: "VAR";
    readonly Varp: "VARP";
    readonly Percentile: "PERCENTILE";
};
export type TopicAuthorSpecifiedAggregation = (typeof TopicAuthorSpecifiedAggregation)[keyof typeof TopicAuthorSpecifiedAggregation];
export declare const TopicCategoryFilterFunction: {
    readonly Exact: "EXACT";
    readonly Contains: "CONTAINS";
};
export type TopicCategoryFilterFunction = (typeof TopicCategoryFilterFunction)[keyof typeof TopicCategoryFilterFunction];
export declare const TopicCategoryFilterType: {
    readonly CustomFilter: "CUSTOM_FILTER";
    readonly CustomFilterList: "CUSTOM_FILTER_LIST";
    readonly FilterList: "FILTER_LIST";
};
export type TopicCategoryFilterType = (typeof TopicCategoryFilterType)[keyof typeof TopicCategoryFilterType];
export declare const TopicColumnDataRole: {
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
export type TopicColumnDataRole = (typeof TopicColumnDataRole)[keyof typeof TopicColumnDataRole];
export declare const TopicColumnOrderingType: {
    readonly GreaterIsBetter: "GREATER_IS_BETTER";
    readonly LesserIsBetter: "LESSER_IS_BETTER";
    readonly Specified: "SPECIFIED";
};
export type TopicColumnOrderingType = (typeof TopicColumnOrderingType)[keyof typeof TopicColumnOrderingType];
export declare const TopicConstantType: {
    readonly Singular: "SINGULAR";
    readonly Range: "RANGE";
    readonly Collective: "COLLECTIVE";
};
export type TopicConstantType = (typeof TopicConstantType)[keyof typeof TopicConstantType];
export declare const TopicDefaultAggregation: {
    readonly Sum: "SUM";
    readonly Max: "MAX";
    readonly Min: "MIN";
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Average: "AVERAGE";
    readonly Median: "MEDIAN";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Var: "VAR";
    readonly Varp: "VARP";
};
export type TopicDefaultAggregation = (typeof TopicDefaultAggregation)[keyof typeof TopicDefaultAggregation];
export declare const TopicDisplayFormat: {
    readonly Auto: "AUTO";
    readonly Percent: "PERCENT";
    readonly Currency: "CURRENCY";
    readonly Number: "NUMBER";
    readonly Date: "DATE";
    readonly String: "STRING";
};
export type TopicDisplayFormat = (typeof TopicDisplayFormat)[keyof typeof TopicDisplayFormat];
export declare const TopicFilterClass: {
    readonly EnforcedValueFilter: "ENFORCED_VALUE_FILTER";
    readonly ConditionalValueFilter: "CONDITIONAL_VALUE_FILTER";
    readonly NamedValueFilter: "NAMED_VALUE_FILTER";
};
export type TopicFilterClass = (typeof TopicFilterClass)[keyof typeof TopicFilterClass];
export declare const TopicNamedEntityAggType: {
    readonly Sum: "SUM";
    readonly Min: "MIN";
    readonly Max: "MAX";
    readonly Count: "COUNT";
    readonly Average: "AVERAGE";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Var: "VAR";
    readonly Varp: "VARP";
    readonly Percentile: "PERCENTILE";
    readonly Median: "MEDIAN";
    readonly Custom: "CUSTOM";
};
export type TopicNamedEntityAggType = (typeof TopicNamedEntityAggType)[keyof typeof TopicNamedEntityAggType];
export declare const TopicNamedFilterAggType: {
    readonly NoAggregation: "NO_AGGREGATION";
    readonly Sum: "SUM";
    readonly Average: "AVERAGE";
    readonly Count: "COUNT";
    readonly DistinctCount: "DISTINCT_COUNT";
    readonly Max: "MAX";
    readonly Median: "MEDIAN";
    readonly Min: "MIN";
    readonly Stdev: "STDEV";
    readonly Stdevp: "STDEVP";
    readonly Var: "VAR";
    readonly Varp: "VARP";
};
export type TopicNamedFilterAggType = (typeof TopicNamedFilterAggType)[keyof typeof TopicNamedFilterAggType];
export declare const TopicNamedFilterType: {
    readonly CategoryFilter: "CATEGORY_FILTER";
    readonly NumericEqualityFilter: "NUMERIC_EQUALITY_FILTER";
    readonly NumericRangeFilter: "NUMERIC_RANGE_FILTER";
    readonly DateRangeFilter: "DATE_RANGE_FILTER";
    readonly RelativeDateFilter: "RELATIVE_DATE_FILTER";
};
export type TopicNamedFilterType = (typeof TopicNamedFilterType)[keyof typeof TopicNamedFilterType];
export declare const TopicNumberScale: {
    readonly None: "NONE";
    readonly Auto: "AUTO";
    readonly Thousands: "THOUSANDS";
    readonly Millions: "MILLIONS";
    readonly Billions: "BILLIONS";
    readonly Trillions: "TRILLIONS";
};
export type TopicNumberScale = (typeof TopicNumberScale)[keyof typeof TopicNumberScale];
export declare const TopicNumericSeparatorSymbol: {
    readonly Comma: "COMMA";
    readonly Dot: "DOT";
};
export type TopicNumericSeparatorSymbol = (typeof TopicNumericSeparatorSymbol)[keyof typeof TopicNumericSeparatorSymbol];
export declare const TopicPropertyRole: {
    readonly Primary: "PRIMARY";
    readonly Id: "ID";
};
export type TopicPropertyRole = (typeof TopicPropertyRole)[keyof typeof TopicPropertyRole];
export declare const TopicPropertyUsage: {
    readonly Inherit: "INHERIT";
    readonly Dimension: "DIMENSION";
    readonly Measure: "MEASURE";
};
export type TopicPropertyUsage = (typeof TopicPropertyUsage)[keyof typeof TopicPropertyUsage];
export declare const TopicRelativeDateFilterFunction: {
    readonly Previous: "PREVIOUS";
    readonly This: "THIS";
    readonly Last: "LAST";
    readonly Next: "NEXT";
    readonly Now: "NOW";
};
export type TopicRelativeDateFilterFunction = (typeof TopicRelativeDateFilterFunction)[keyof typeof TopicRelativeDateFilterFunction];
export declare const TopicTimeGranularity: {
    readonly Second: "SECOND";
    readonly Minute: "MINUTE";
    readonly Hour: "HOUR";
    readonly Day: "DAY";
    readonly Week: "WEEK";
    readonly Month: "MONTH";
    readonly Quarter: "QUARTER";
    readonly Year: "YEAR";
};
export type TopicTimeGranularity = (typeof TopicTimeGranularity)[keyof typeof TopicTimeGranularity];
export declare const TopicUndefinedSpecifiedValueType: {
    readonly Least: "LEAST";
    readonly Most: "MOST";
};
export type TopicUndefinedSpecifiedValueType = (typeof TopicUndefinedSpecifiedValueType)[keyof typeof TopicUndefinedSpecifiedValueType];
export declare const TopicUserExperienceVersion: {
    readonly Legacy: "LEGACY";
    readonly NewReaderExperience: "NEW_READER_EXPERIENCE";
};
export type TopicUserExperienceVersion = (typeof TopicUserExperienceVersion)[keyof typeof TopicUserExperienceVersion];
export declare const VpcConnectionNetworkInterfaceStatus: {
    readonly Creating: "CREATING";
    readonly Available: "AVAILABLE";
    readonly CreationFailed: "CREATION_FAILED";
    readonly Updating: "UPDATING";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly Deleting: "DELETING";
    readonly Deleted: "DELETED";
    readonly DeletionFailed: "DELETION_FAILED";
    readonly DeletionScheduled: "DELETION_SCHEDULED";
    readonly AttachmentFailedRollbackFailed: "ATTACHMENT_FAILED_ROLLBACK_FAILED";
};
export type VpcConnectionNetworkInterfaceStatus = (typeof VpcConnectionNetworkInterfaceStatus)[keyof typeof VpcConnectionNetworkInterfaceStatus];
export declare const VpcConnectionVpcConnectionAvailabilityStatus: {
    readonly Available: "AVAILABLE";
    readonly Unavailable: "UNAVAILABLE";
    readonly PartiallyAvailable: "PARTIALLY_AVAILABLE";
};
export type VpcConnectionVpcConnectionAvailabilityStatus = (typeof VpcConnectionVpcConnectionAvailabilityStatus)[keyof typeof VpcConnectionVpcConnectionAvailabilityStatus];
export declare const VpcConnectionVpcConnectionResourceStatus: {
    readonly CreationInProgress: "CREATION_IN_PROGRESS";
    readonly CreationSuccessful: "CREATION_SUCCESSFUL";
    readonly CreationFailed: "CREATION_FAILED";
    readonly UpdateInProgress: "UPDATE_IN_PROGRESS";
    readonly UpdateSuccessful: "UPDATE_SUCCESSFUL";
    readonly UpdateFailed: "UPDATE_FAILED";
    readonly DeletionInProgress: "DELETION_IN_PROGRESS";
    readonly DeletionFailed: "DELETION_FAILED";
    readonly Deleted: "DELETED";
};
export type VpcConnectionVpcConnectionResourceStatus = (typeof VpcConnectionVpcConnectionResourceStatus)[keyof typeof VpcConnectionVpcConnectionResourceStatus];
