"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuiteDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testSuiteDefinition = new aws_native.iotcoredeviceadvisor.SuiteDefinition("testSuiteDefinition", {suiteDefinitionConfiguration: {
 *     suiteDefinitionName: "SuiteDefinitionName",
 *     devicePermissionRoleArn: "arn:aws:iam::123456789012:role/RoleName",
 *     devices: [{
 *         thingArn: "arn:aws:iot:us-east-1:123456789012:thing/ThingName",
 *     }],
 *     rootGroup: `{
 * "configuration": {},
 * "tests": [{
 * "name": "TestGroup",
 * "configuration": {
 * "EXECUTION_TIMEOUT": "30"
 * },
 * "tests": [{
 * "name": "MQTTPublishTest",
 * "configuration": {
 * "TOPIC_FOR_PUBLISH_VALIDATION": "target"
 * },
 * "test": {
 * "id": "MQTT_Publish",
 * "version": "0.0.0"
 * }
 * }]
 * }]
 * }`,
 *     intendedForQualification: false,
 * }});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testSuiteDefinition = new aws_native.iotcoredeviceadvisor.SuiteDefinition("testSuiteDefinition", {suiteDefinitionConfiguration: {
 *     suiteDefinitionName: "SuiteDefinitionName",
 *     devicePermissionRoleArn: "arn:aws:iam::123456789012:role/RoleName",
 *     devices: [{
 *         thingArn: "arn:aws:iot:us-east-1:123456789012:thing/ThingName",
 *     }],
 *     rootGroup: "{ \"configuration\": {}, \"tests\": [{ \"name\": \"TestGroup\", \"configuration\": { \"EXECUTION_TIMEOUT\": \"30\" }, \"tests\": [{ \"name\": \"MQTTPublishTest\", \"configuration\": { \"TOPIC_FOR_PUBLISH_VALIDATION\": \"target\" }, \"test\": { \"id\": \"MQTT_Publish\", \"version\": \"0.0.0\" } }] }] }",
 *     intendedForQualification: false,
 * }});
 *
 * ```
 */
class SuiteDefinition extends pulumi.CustomResource {
    /**
     * Get an existing SuiteDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new SuiteDefinition(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SuiteDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SuiteDefinition.__pulumiType;
    }
    /**
     * Create a SuiteDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.suiteDefinitionConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'suiteDefinitionConfiguration'");
            }
            resourceInputs["suiteDefinitionConfiguration"] = args ? args.suiteDefinitionConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["suiteDefinitionArn"] = undefined /*out*/;
            resourceInputs["suiteDefinitionId"] = undefined /*out*/;
            resourceInputs["suiteDefinitionVersion"] = undefined /*out*/;
        }
        else {
            resourceInputs["suiteDefinitionArn"] = undefined /*out*/;
            resourceInputs["suiteDefinitionConfiguration"] = undefined /*out*/;
            resourceInputs["suiteDefinitionId"] = undefined /*out*/;
            resourceInputs["suiteDefinitionVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SuiteDefinition.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SuiteDefinition = SuiteDefinition;
/** @internal */
SuiteDefinition.__pulumiType = 'aws-native:iotcoredeviceadvisor:SuiteDefinition';
//# sourceMappingURL=suiteDefinition.js.map