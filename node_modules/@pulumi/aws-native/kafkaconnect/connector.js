"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connector = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::KafkaConnect::Connector
 */
class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Connector(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }
    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.connectorConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorConfiguration'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.kafkaClusterClientAuthentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterClientAuthentication'");
            }
            if ((!args || args.kafkaClusterEncryptionInTransit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterEncryptionInTransit'");
            }
            if ((!args || args.kafkaConnectVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnectVersion'");
            }
            if ((!args || args.plugins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugins'");
            }
            if ((!args || args.serviceExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRoleArn'");
            }
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["connectorConfiguration"] = args ? args.connectorConfiguration : undefined;
            resourceInputs["connectorDescription"] = args ? args.connectorDescription : undefined;
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["kafkaClusterClientAuthentication"] = args ? args.kafkaClusterClientAuthentication : undefined;
            resourceInputs["kafkaClusterEncryptionInTransit"] = args ? args.kafkaClusterEncryptionInTransit : undefined;
            resourceInputs["kafkaConnectVersion"] = args ? args.kafkaConnectVersion : undefined;
            resourceInputs["logDelivery"] = args ? args.logDelivery : undefined;
            resourceInputs["plugins"] = args ? args.plugins : undefined;
            resourceInputs["serviceExecutionRoleArn"] = args ? args.serviceExecutionRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workerConfiguration"] = args ? args.workerConfiguration : undefined;
            resourceInputs["connectorArn"] = undefined /*out*/;
        }
        else {
            resourceInputs["capacity"] = undefined /*out*/;
            resourceInputs["connectorArn"] = undefined /*out*/;
            resourceInputs["connectorConfiguration"] = undefined /*out*/;
            resourceInputs["connectorDescription"] = undefined /*out*/;
            resourceInputs["connectorName"] = undefined /*out*/;
            resourceInputs["kafkaCluster"] = undefined /*out*/;
            resourceInputs["kafkaClusterClientAuthentication"] = undefined /*out*/;
            resourceInputs["kafkaClusterEncryptionInTransit"] = undefined /*out*/;
            resourceInputs["kafkaConnectVersion"] = undefined /*out*/;
            resourceInputs["logDelivery"] = undefined /*out*/;
            resourceInputs["plugins"] = undefined /*out*/;
            resourceInputs["serviceExecutionRoleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["workerConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["connectorConfiguration.*", "connectorDescription", "connectorName", "kafkaCluster", "kafkaClusterClientAuthentication", "kafkaClusterEncryptionInTransit", "kafkaConnectVersion", "logDelivery", "plugins[*]", "serviceExecutionRoleArn", "workerConfiguration"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Connector.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Connector = Connector;
/** @internal */
Connector.__pulumiType = 'aws-native:kafkaconnect:Connector';
//# sourceMappingURL=connector.js.map