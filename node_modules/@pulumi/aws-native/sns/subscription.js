"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::SNS::Subscription
 */
class Subscription extends pulumi.CustomResource {
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Subscription(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }
    /**
     * Create a Subscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.topicArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicArn'");
            }
            resourceInputs["deliveryPolicy"] = args ? args.deliveryPolicy : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["filterPolicy"] = args ? args.filterPolicy : undefined;
            resourceInputs["filterPolicyScope"] = args ? args.filterPolicyScope : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["rawMessageDelivery"] = args ? args.rawMessageDelivery : undefined;
            resourceInputs["redrivePolicy"] = args ? args.redrivePolicy : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replayPolicy"] = args ? args.replayPolicy : undefined;
            resourceInputs["subscriptionRoleArn"] = args ? args.subscriptionRoleArn : undefined;
            resourceInputs["topicArn"] = args ? args.topicArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["deliveryPolicy"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["filterPolicy"] = undefined /*out*/;
            resourceInputs["filterPolicyScope"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["rawMessageDelivery"] = undefined /*out*/;
            resourceInputs["redrivePolicy"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["replayPolicy"] = undefined /*out*/;
            resourceInputs["subscriptionRoleArn"] = undefined /*out*/;
            resourceInputs["topicArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["endpoint", "protocol", "topicArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Subscription.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Subscription = Subscription;
/** @internal */
Subscription.__pulumiType = 'aws-native:sns:Subscription';
//# sourceMappingURL=subscription.js.map