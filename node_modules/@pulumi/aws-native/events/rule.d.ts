import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::Events::Rule
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const eventBridgeIAMrole = new aws_native.iam.Role("eventBridgeIAMrole", {
 *     assumeRolePolicyDocument: {
 *         version: "2012-10-17",
 *         statement: [{
 *             effect: "Allow",
 *             principal: {
 *                 service: "events.amazonaws.com",
 *             },
 *             action: "sts:AssumeRole",
 *         }],
 *     },
 *     path: "/",
 *     policies: [{
 *         policyName: "PutEventsDestinationBus",
 *         policyDocument: {
 *             version: "2012-10-17",
 *             statement: [{
 *                 effect: "Allow",
 *                 action: ["events:PutEvents"],
 *                 resource: ["arn:aws:events:us-east-1:123456789012:event-bus/CrossRegionDestinationBus"],
 *             }],
 *         },
 *     }],
 * });
 * const eventRuleRegion1 = new aws_native.events.Rule("eventRuleRegion1", {
 *     description: "Routes to us-east-1 event bus",
 *     eventBusName: "MyBusName",
 *     state: aws_native.events.RuleState.Enabled,
 *     eventPattern: {
 *         source: ["MyTestApp"],
 *         detail: ["MyTestAppDetail"],
 *     },
 *     targets: [{
 *         arn: "arn:aws:events:us-east-1:123456789012:event-bus/CrossRegionDestinationBus",
 *         id: " CrossRegionDestinationBus",
 *         roleArn: eventBridgeIAMrole.arn,
 *     }],
 * });
 *
 * ```
 */
export declare class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Rule;
    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Rule;
    /**
     * The ARN of the rule, such as arn:aws:events:us-east-2:123456789012:rule/example.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The description of the rule.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    readonly eventBusName: pulumi.Output<string | undefined>;
    /**
     * The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Rule` for more information about the expected schema for this property.
     */
    readonly eventPattern: pulumi.Output<any | undefined>;
    /**
     * The name of the rule.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the role that is used for target invocation.
     */
    readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
     */
    readonly scheduleExpression: pulumi.Output<string | undefined>;
    /**
     * The state of the rule.
     */
    readonly state: pulumi.Output<enums.events.RuleState | undefined>;
    /**
     * Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
     * Targets are the resources that are invoked when a rule is triggered.
     */
    readonly targets: pulumi.Output<outputs.events.RuleTarget[] | undefined>;
    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The event pattern of the rule. For more information, see Events and Event Patterns in the Amazon EventBridge User Guide.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::Rule` for more information about the expected schema for this property.
     */
    eventPattern?: any;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the role that is used for target invocation.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)". For more information, see Creating an Amazon EventBridge rule that runs on a schedule.
     */
    scheduleExpression?: pulumi.Input<string>;
    /**
     * The state of the rule.
     */
    state?: pulumi.Input<enums.events.RuleState>;
    /**
     * Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.
     * Targets are the resources that are invoked when a rule is triggered.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.events.RuleTargetArgs>[]>;
}
