import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::MediaLive::EventBridgeRuleTemplate Resource Type
 */
export declare class EventBridgeRuleTemplate extends pulumi.CustomResource {
    /**
     * Get an existing EventBridgeRuleTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventBridgeRuleTemplate;
    /**
     * Returns true if the given object is an instance of EventBridgeRuleTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EventBridgeRuleTemplate;
    /**
     * An eventbridge rule template's ARN (Amazon Resource Name)
     */
    readonly arn: pulumi.Output<string>;
    /**
     * An eventbridge rule template's id. AWS provided templates have ids that start with `aws-`
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * Placeholder documentation for __timestampIso8601
     */
    readonly createdAt: pulumi.Output<string>;
    /**
     * A resource's optional description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
     */
    readonly eventTargets: pulumi.Output<outputs.medialive.EventBridgeRuleTemplateTarget[] | undefined>;
    /**
     * The type of event to match with the rule.
     */
    readonly eventType: pulumi.Output<enums.medialive.EventBridgeRuleTemplateEventType>;
    /**
     * An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
     */
    readonly groupId: pulumi.Output<string>;
    /**
     * An eventbridge rule template group's identifier. Can be either be its id or current name.
     */
    readonly groupIdentifier: pulumi.Output<string>;
    /**
     * Placeholder documentation for __string
     */
    readonly identifier: pulumi.Output<string>;
    /**
     * Placeholder documentation for __timestampIso8601
     */
    readonly modifiedAt: pulumi.Output<string>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    readonly name: pulumi.Output<string>;
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a EventBridgeRuleTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventBridgeRuleTemplateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a EventBridgeRuleTemplate resource.
 */
export interface EventBridgeRuleTemplateArgs {
    /**
     * A resource's optional description.
     */
    description?: pulumi.Input<string>;
    /**
     * Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
     */
    eventTargets?: pulumi.Input<pulumi.Input<inputs.medialive.EventBridgeRuleTemplateTargetArgs>[]>;
    /**
     * The type of event to match with the rule.
     */
    eventType: pulumi.Input<enums.medialive.EventBridgeRuleTemplateEventType>;
    /**
     * An eventbridge rule template group's identifier. Can be either be its id or current name.
     */
    groupIdentifier: pulumi.Input<string>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
