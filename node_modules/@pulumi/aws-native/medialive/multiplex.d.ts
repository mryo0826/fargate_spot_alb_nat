import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::MediaLive::Multiplex
 */
export declare class Multiplex extends pulumi.CustomResource {
    /**
     * Get an existing Multiplex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Multiplex;
    /**
     * Returns true if the given object is an instance of Multiplex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Multiplex;
    /**
     * The unique arn of the multiplex.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * A list of availability zones for the multiplex.
     */
    readonly availabilityZones: pulumi.Output<string[]>;
    /**
     * The unique id of the multiplex.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * A list of the multiplex output destinations.
     */
    readonly destinations: pulumi.Output<outputs.medialive.MultiplexOutputDestination[] | undefined>;
    /**
     * Configuration for a multiplex event.
     */
    readonly multiplexSettings: pulumi.Output<outputs.medialive.MultiplexSettings>;
    /**
     * Name of multiplex.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The number of currently healthy pipelines.
     */
    readonly pipelinesRunningCount: pulumi.Output<number>;
    /**
     * The number of programs in the multiplex.
     */
    readonly programCount: pulumi.Output<number>;
    /**
     * The current state of the multiplex.
     */
    readonly state: pulumi.Output<enums.medialive.MultiplexState>;
    /**
     * A collection of key-value pairs.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Multiplex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MultiplexArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Multiplex resource.
 */
export interface MultiplexArgs {
    /**
     * A list of availability zones for the multiplex.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the multiplex output destinations.
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.medialive.MultiplexOutputDestinationArgs>[]>;
    /**
     * Configuration for a multiplex event.
     */
    multiplexSettings: pulumi.Input<inputs.medialive.MultiplexSettingsArgs>;
    /**
     * Name of multiplex.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
