import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::MediaLive::SdiSource Resource Type
 */
export declare class SdiSource extends pulumi.CustomResource {
    /**
     * Get an existing SdiSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SdiSource;
    /**
     * Returns true if the given object is an instance of SdiSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SdiSource;
    /**
     * The unique arn of the SdiSource.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The unique identifier of the SdiSource.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * The list of inputs currently using this SDI source.
     */
    readonly inputs: pulumi.Output<string[]>;
    readonly mode: pulumi.Output<enums.medialive.SdiSourceMode | undefined>;
    /**
     * The name of the SdiSource.
     */
    readonly name: pulumi.Output<string>;
    readonly state: pulumi.Output<enums.medialive.SdiSourceState>;
    /**
     * A collection of key-value pairs.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    readonly type: pulumi.Output<enums.medialive.SdiSourceType>;
    /**
     * Create a SdiSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SdiSourceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a SdiSource resource.
 */
export interface SdiSourceArgs {
    mode?: pulumi.Input<enums.medialive.SdiSourceMode>;
    /**
     * The name of the SdiSource.
     */
    name?: pulumi.Input<string>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    type: pulumi.Input<enums.medialive.SdiSourceType>;
}
