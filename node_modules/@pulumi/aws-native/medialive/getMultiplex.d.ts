import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::MediaLive::Multiplex
 */
export declare function getMultiplex(args: GetMultiplexArgs, opts?: pulumi.InvokeOptions): Promise<GetMultiplexResult>;
export interface GetMultiplexArgs {
    /**
     * The unique id of the multiplex.
     */
    id: string;
}
export interface GetMultiplexResult {
    /**
     * The unique arn of the multiplex.
     */
    readonly arn?: string;
    /**
     * A list of the multiplex output destinations.
     */
    readonly destinations?: outputs.medialive.MultiplexOutputDestination[];
    /**
     * The unique id of the multiplex.
     */
    readonly id?: string;
    /**
     * Configuration for a multiplex event.
     */
    readonly multiplexSettings?: outputs.medialive.MultiplexSettings;
    /**
     * Name of multiplex.
     */
    readonly name?: string;
    /**
     * The number of currently healthy pipelines.
     */
    readonly pipelinesRunningCount?: number;
    /**
     * The number of programs in the multiplex.
     */
    readonly programCount?: number;
    /**
     * The current state of the multiplex.
     */
    readonly state?: enums.medialive.MultiplexState;
    /**
     * A collection of key-value pairs.
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Resource schema for AWS::MediaLive::Multiplex
 */
export declare function getMultiplexOutput(args: GetMultiplexOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMultiplexResult>;
export interface GetMultiplexOutputArgs {
    /**
     * The unique id of the multiplex.
     */
    id: pulumi.Input<string>;
}
