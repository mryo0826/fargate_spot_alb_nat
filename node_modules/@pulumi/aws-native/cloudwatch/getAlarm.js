"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlarmOutput = exports.getAlarm = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ``AWS::CloudWatch::Alarm`` type specifies an alarm and associates it with the specified metric or metric math expression.
 *  When this operation creates an alarm, the alarm state is immediately set to ``INSUFFICIENT_DATA``. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.
 *  When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.
 */
function getAlarm(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:cloudwatch:getAlarm", {
        "alarmName": args.alarmName,
    }, opts);
}
exports.getAlarm = getAlarm;
/**
 * The ``AWS::CloudWatch::Alarm`` type specifies an alarm and associates it with the specified metric or metric math expression.
 *  When this operation creates an alarm, the alarm state is immediately set to ``INSUFFICIENT_DATA``. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.
 *  When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.
 */
function getAlarmOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:cloudwatch:getAlarm", {
        "alarmName": args.alarmName,
    }, opts);
}
exports.getAlarmOutput = getAlarmOutput;
//# sourceMappingURL=getAlarm.js.map