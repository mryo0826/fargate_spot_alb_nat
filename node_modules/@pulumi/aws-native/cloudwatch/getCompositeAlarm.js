"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompositeAlarmOutput = exports.getCompositeAlarm = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression
 */
function getCompositeAlarm(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:cloudwatch:getCompositeAlarm", {
        "alarmName": args.alarmName,
    }, opts);
}
exports.getCompositeAlarm = getCompositeAlarm;
/**
 * The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression
 */
function getCompositeAlarmOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:cloudwatch:getCompositeAlarm", {
        "alarmName": args.alarmName,
    }, opts);
}
exports.getCompositeAlarmOutput = getCompositeAlarmOutput;
//# sourceMappingURL=getCompositeAlarm.js.map