import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::DataSync::LocationNFS
 */
export declare class LocationNfs extends pulumi.CustomResource {
    /**
     * Get an existing LocationNfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocationNfs;
    /**
     * Returns true if the given object is an instance of LocationNfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LocationNfs;
    /**
     * The Amazon Resource Name (ARN) of the NFS location.
     */
    readonly locationArn: pulumi.Output<string>;
    /**
     * The URL of the NFS location that was described.
     */
    readonly locationUri: pulumi.Output<string>;
    /**
     * Specifies the options that DataSync can use to mount your NFS file server.
     */
    readonly mountOptions: pulumi.Output<outputs.datasync.LocationNfsMountOptions | undefined>;
    /**
     * Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect to your NFS file server.
     *
     * You can specify more than one agent. For more information, see [Using multiple DataSync agents](https://docs.aws.amazon.com/datasync/latest/userguide/do-i-need-datasync-agent.html#multiple-agents) .
     */
    readonly onPremConfig: pulumi.Output<outputs.datasync.LocationNfsOnPremConfig>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    readonly serverHostname: pulumi.Output<string | undefined>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
     */
    readonly subdirectory: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a LocationNfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationNfsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LocationNfs resource.
 */
export interface LocationNfsArgs {
    /**
     * Specifies the options that DataSync can use to mount your NFS file server.
     */
    mountOptions?: pulumi.Input<inputs.datasync.LocationNfsMountOptionsArgs>;
    /**
     * Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect to your NFS file server.
     *
     * You can specify more than one agent. For more information, see [Using multiple DataSync agents](https://docs.aws.amazon.com/datasync/latest/userguide/do-i-need-datasync-agent.html#multiple-agents) .
     */
    onPremConfig: pulumi.Input<inputs.datasync.LocationNfsOnPremConfigArgs>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
