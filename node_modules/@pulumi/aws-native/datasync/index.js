"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = exports.StorageSystem = exports.LocationSmb = exports.LocationS3 = exports.LocationObjectStorage = exports.LocationNfs = exports.LocationHdfs = exports.LocationFSxWindows = exports.LocationFSxOpenZfs = exports.LocationFSxOntap = exports.LocationFSxLustre = exports.LocationEfs = exports.LocationAzureBlob = exports.getTaskOutput = exports.getTask = exports.getStorageSystemOutput = exports.getStorageSystem = exports.getLocationSmbOutput = exports.getLocationSmb = exports.getLocationS3Output = exports.getLocationS3 = exports.getLocationObjectStorageOutput = exports.getLocationObjectStorage = exports.getLocationNfsOutput = exports.getLocationNfs = exports.getLocationHdfsOutput = exports.getLocationHdfs = exports.getLocationFSxWindowsOutput = exports.getLocationFSxWindows = exports.getLocationFSxOpenZfsOutput = exports.getLocationFSxOpenZfs = exports.getLocationFSxOntapOutput = exports.getLocationFSxOntap = exports.getLocationFSxLustreOutput = exports.getLocationFSxLustre = exports.getLocationEfsOutput = exports.getLocationEfs = exports.getLocationAzureBlobOutput = exports.getLocationAzureBlob = exports.getAgentOutput = exports.getAgent = exports.Agent = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Agent = null;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));
exports.getAgent = null;
exports.getAgentOutput = null;
utilities.lazyLoad(exports, ["getAgent", "getAgentOutput"], () => require("./getAgent"));
exports.getLocationAzureBlob = null;
exports.getLocationAzureBlobOutput = null;
utilities.lazyLoad(exports, ["getLocationAzureBlob", "getLocationAzureBlobOutput"], () => require("./getLocationAzureBlob"));
exports.getLocationEfs = null;
exports.getLocationEfsOutput = null;
utilities.lazyLoad(exports, ["getLocationEfs", "getLocationEfsOutput"], () => require("./getLocationEfs"));
exports.getLocationFSxLustre = null;
exports.getLocationFSxLustreOutput = null;
utilities.lazyLoad(exports, ["getLocationFSxLustre", "getLocationFSxLustreOutput"], () => require("./getLocationFSxLustre"));
exports.getLocationFSxOntap = null;
exports.getLocationFSxOntapOutput = null;
utilities.lazyLoad(exports, ["getLocationFSxOntap", "getLocationFSxOntapOutput"], () => require("./getLocationFSxOntap"));
exports.getLocationFSxOpenZfs = null;
exports.getLocationFSxOpenZfsOutput = null;
utilities.lazyLoad(exports, ["getLocationFSxOpenZfs", "getLocationFSxOpenZfsOutput"], () => require("./getLocationFSxOpenZfs"));
exports.getLocationFSxWindows = null;
exports.getLocationFSxWindowsOutput = null;
utilities.lazyLoad(exports, ["getLocationFSxWindows", "getLocationFSxWindowsOutput"], () => require("./getLocationFSxWindows"));
exports.getLocationHdfs = null;
exports.getLocationHdfsOutput = null;
utilities.lazyLoad(exports, ["getLocationHdfs", "getLocationHdfsOutput"], () => require("./getLocationHdfs"));
exports.getLocationNfs = null;
exports.getLocationNfsOutput = null;
utilities.lazyLoad(exports, ["getLocationNfs", "getLocationNfsOutput"], () => require("./getLocationNfs"));
exports.getLocationObjectStorage = null;
exports.getLocationObjectStorageOutput = null;
utilities.lazyLoad(exports, ["getLocationObjectStorage", "getLocationObjectStorageOutput"], () => require("./getLocationObjectStorage"));
exports.getLocationS3 = null;
exports.getLocationS3Output = null;
utilities.lazyLoad(exports, ["getLocationS3", "getLocationS3Output"], () => require("./getLocationS3"));
exports.getLocationSmb = null;
exports.getLocationSmbOutput = null;
utilities.lazyLoad(exports, ["getLocationSmb", "getLocationSmbOutput"], () => require("./getLocationSmb"));
exports.getStorageSystem = null;
exports.getStorageSystemOutput = null;
utilities.lazyLoad(exports, ["getStorageSystem", "getStorageSystemOutput"], () => require("./getStorageSystem"));
exports.getTask = null;
exports.getTaskOutput = null;
utilities.lazyLoad(exports, ["getTask", "getTaskOutput"], () => require("./getTask"));
exports.LocationAzureBlob = null;
utilities.lazyLoad(exports, ["LocationAzureBlob"], () => require("./locationAzureBlob"));
exports.LocationEfs = null;
utilities.lazyLoad(exports, ["LocationEfs"], () => require("./locationEfs"));
exports.LocationFSxLustre = null;
utilities.lazyLoad(exports, ["LocationFSxLustre"], () => require("./locationFSxLustre"));
exports.LocationFSxOntap = null;
utilities.lazyLoad(exports, ["LocationFSxOntap"], () => require("./locationFSxOntap"));
exports.LocationFSxOpenZfs = null;
utilities.lazyLoad(exports, ["LocationFSxOpenZfs"], () => require("./locationFSxOpenZfs"));
exports.LocationFSxWindows = null;
utilities.lazyLoad(exports, ["LocationFSxWindows"], () => require("./locationFSxWindows"));
exports.LocationHdfs = null;
utilities.lazyLoad(exports, ["LocationHdfs"], () => require("./locationHdfs"));
exports.LocationNfs = null;
utilities.lazyLoad(exports, ["LocationNfs"], () => require("./locationNfs"));
exports.LocationObjectStorage = null;
utilities.lazyLoad(exports, ["LocationObjectStorage"], () => require("./locationObjectStorage"));
exports.LocationS3 = null;
utilities.lazyLoad(exports, ["LocationS3"], () => require("./locationS3"));
exports.LocationSmb = null;
utilities.lazyLoad(exports, ["LocationSmb"], () => require("./locationSmb"));
exports.StorageSystem = null;
utilities.lazyLoad(exports, ["StorageSystem"], () => require("./storageSystem"));
exports.Task = null;
utilities.lazyLoad(exports, ["Task"], () => require("./task"));
// Export enums:
__exportStar(require("../types/enums/datasync"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:datasync:Agent":
                return new exports.Agent(name, undefined, { urn });
            case "aws-native:datasync:LocationAzureBlob":
                return new exports.LocationAzureBlob(name, undefined, { urn });
            case "aws-native:datasync:LocationEfs":
                return new exports.LocationEfs(name, undefined, { urn });
            case "aws-native:datasync:LocationFSxLustre":
                return new exports.LocationFSxLustre(name, undefined, { urn });
            case "aws-native:datasync:LocationFSxOntap":
                return new exports.LocationFSxOntap(name, undefined, { urn });
            case "aws-native:datasync:LocationFSxOpenZfs":
                return new exports.LocationFSxOpenZfs(name, undefined, { urn });
            case "aws-native:datasync:LocationFSxWindows":
                return new exports.LocationFSxWindows(name, undefined, { urn });
            case "aws-native:datasync:LocationHdfs":
                return new exports.LocationHdfs(name, undefined, { urn });
            case "aws-native:datasync:LocationNfs":
                return new exports.LocationNfs(name, undefined, { urn });
            case "aws-native:datasync:LocationObjectStorage":
                return new exports.LocationObjectStorage(name, undefined, { urn });
            case "aws-native:datasync:LocationS3":
                return new exports.LocationS3(name, undefined, { urn });
            case "aws-native:datasync:LocationSmb":
                return new exports.LocationSmb(name, undefined, { urn });
            case "aws-native:datasync:StorageSystem":
                return new exports.StorageSystem(name, undefined, { urn });
            case "aws-native:datasync:Task":
                return new exports.Task(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "datasync", _module);
//# sourceMappingURL=index.js.map