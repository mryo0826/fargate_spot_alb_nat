import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * The AWS::Lambda::EventInvokeConfig resource configures options for asynchronous invocation on a version or an alias.
 */
export declare function getEventInvokeConfig(args: GetEventInvokeConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetEventInvokeConfigResult>;
export interface GetEventInvokeConfigArgs {
    /**
     * The name of the Lambda function.
     */
    functionName: string;
    /**
     * The identifier of a version or alias.
     */
    qualifier: string;
}
export interface GetEventInvokeConfigResult {
    /**
     * A destination for events after they have been sent to a function for processing.
     *
     * **Destinations** - *Function* - The Amazon Resource Name (ARN) of a Lambda function.
     * - *Queue* - The ARN of a standard SQS queue.
     * - *Bucket* - The ARN of an Amazon S3 bucket.
     * - *Topic* - The ARN of a standard SNS topic.
     * - *Event Bus* - The ARN of an Amazon EventBridge event bus.
     *
     * > S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
     */
    readonly destinationConfig?: outputs.lambda.EventInvokeConfigDestinationConfig;
    /**
     * The maximum age of a request that Lambda sends to a function for processing.
     */
    readonly maximumEventAgeInSeconds?: number;
    /**
     * The maximum number of times to retry when the function returns an error.
     */
    readonly maximumRetryAttempts?: number;
}
/**
 * The AWS::Lambda::EventInvokeConfig resource configures options for asynchronous invocation on a version or an alias.
 */
export declare function getEventInvokeConfigOutput(args: GetEventInvokeConfigOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEventInvokeConfigResult>;
export interface GetEventInvokeConfigOutputArgs {
    /**
     * The name of the Lambda function.
     */
    functionName: pulumi.Input<string>;
    /**
     * The identifier of a version or alias.
     */
    qualifier: pulumi.Input<string>;
}
