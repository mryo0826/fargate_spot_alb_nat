"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::ElasticLoadBalancingV2::TargetGroup
 */
class TargetGroup extends pulumi.CustomResource {
    /**
     * Get an existing TargetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new TargetGroup(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TargetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetGroup.__pulumiType;
    }
    /**
     * Create a TargetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["healthCheckEnabled"] = args ? args.healthCheckEnabled : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            resourceInputs["healthCheckTimeoutSeconds"] = args ? args.healthCheckTimeoutSeconds : undefined;
            resourceInputs["healthyThresholdCount"] = args ? args.healthyThresholdCount : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["matcher"] = args ? args.matcher : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolVersion"] = args ? args.protocolVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetGroupAttributes"] = args ? args.targetGroupAttributes : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["unhealthyThresholdCount"] = args ? args.unhealthyThresholdCount : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["loadBalancerArns"] = undefined /*out*/;
            resourceInputs["targetGroupArn"] = undefined /*out*/;
            resourceInputs["targetGroupFullName"] = undefined /*out*/;
            resourceInputs["targetGroupName"] = undefined /*out*/;
        }
        else {
            resourceInputs["healthCheckEnabled"] = undefined /*out*/;
            resourceInputs["healthCheckIntervalSeconds"] = undefined /*out*/;
            resourceInputs["healthCheckPath"] = undefined /*out*/;
            resourceInputs["healthCheckPort"] = undefined /*out*/;
            resourceInputs["healthCheckProtocol"] = undefined /*out*/;
            resourceInputs["healthCheckTimeoutSeconds"] = undefined /*out*/;
            resourceInputs["healthyThresholdCount"] = undefined /*out*/;
            resourceInputs["ipAddressType"] = undefined /*out*/;
            resourceInputs["loadBalancerArns"] = undefined /*out*/;
            resourceInputs["matcher"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["protocolVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetGroupArn"] = undefined /*out*/;
            resourceInputs["targetGroupAttributes"] = undefined /*out*/;
            resourceInputs["targetGroupFullName"] = undefined /*out*/;
            resourceInputs["targetGroupName"] = undefined /*out*/;
            resourceInputs["targetType"] = undefined /*out*/;
            resourceInputs["targets"] = undefined /*out*/;
            resourceInputs["unhealthyThresholdCount"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["ipAddressType", "name", "port", "protocol", "protocolVersion", "targetType", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TargetGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TargetGroup = TargetGroup;
/** @internal */
TargetGroup.__pulumiType = 'aws-native:elasticloadbalancingv2:TargetGroup';
//# sourceMappingURL=targetGroup.js.map