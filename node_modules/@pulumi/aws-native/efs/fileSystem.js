"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ``AWS::EFS::FileSystem`` resource creates a new, empty file system in EFSlong (EFS). You must create a mount target ([AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)) to mount your EFS file system on an EC2 or other AWS cloud compute resource.
 */
class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new FileSystem(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }
    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["availabilityZoneName"] = args ? args.availabilityZoneName : undefined;
            resourceInputs["backupPolicy"] = args ? args.backupPolicy : undefined;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = args ? args.bypassPolicyLockoutSafetyCheck : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["fileSystemPolicy"] = args ? args.fileSystemPolicy : undefined;
            resourceInputs["fileSystemProtection"] = args ? args.fileSystemProtection : undefined;
            resourceInputs["fileSystemTags"] = args ? args.fileSystemTags : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["lifecyclePolicies"] = args ? args.lifecyclePolicies : undefined;
            resourceInputs["performanceMode"] = args ? args.performanceMode : undefined;
            resourceInputs["provisionedThroughputInMibps"] = args ? args.provisionedThroughputInMibps : undefined;
            resourceInputs["replicationConfiguration"] = args ? args.replicationConfiguration : undefined;
            resourceInputs["throughputMode"] = args ? args.throughputMode : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZoneName"] = undefined /*out*/;
            resourceInputs["backupPolicy"] = undefined /*out*/;
            resourceInputs["bypassPolicyLockoutSafetyCheck"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
            resourceInputs["fileSystemPolicy"] = undefined /*out*/;
            resourceInputs["fileSystemProtection"] = undefined /*out*/;
            resourceInputs["fileSystemTags"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["lifecyclePolicies"] = undefined /*out*/;
            resourceInputs["performanceMode"] = undefined /*out*/;
            resourceInputs["provisionedThroughputInMibps"] = undefined /*out*/;
            resourceInputs["replicationConfiguration"] = undefined /*out*/;
            resourceInputs["throughputMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["availabilityZoneName", "encrypted", "kmsKeyId", "performanceMode"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FileSystem = FileSystem;
/** @internal */
FileSystem.__pulumiType = 'aws-native:efs:FileSystem';
//# sourceMappingURL=fileSystem.js.map