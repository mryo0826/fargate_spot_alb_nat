"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addon = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Schema for AWS::EKS::Addon
 */
class Addon extends pulumi.CustomResource {
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Addon(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }
    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["addonName"] = args ? args.addonName : undefined;
            resourceInputs["addonVersion"] = args ? args.addonVersion : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["configurationValues"] = args ? args.configurationValues : undefined;
            resourceInputs["podIdentityAssociations"] = args ? args.podIdentityAssociations : undefined;
            resourceInputs["preserveOnDelete"] = args ? args.preserveOnDelete : undefined;
            resourceInputs["resolveConflicts"] = args ? args.resolveConflicts : undefined;
            resourceInputs["serviceAccountRoleArn"] = args ? args.serviceAccountRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        else {
            resourceInputs["addonName"] = undefined /*out*/;
            resourceInputs["addonVersion"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["configurationValues"] = undefined /*out*/;
            resourceInputs["podIdentityAssociations"] = undefined /*out*/;
            resourceInputs["preserveOnDelete"] = undefined /*out*/;
            resourceInputs["resolveConflicts"] = undefined /*out*/;
            resourceInputs["serviceAccountRoleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["addonName", "clusterName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Addon.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Addon = Addon;
/** @internal */
Addon.__pulumiType = 'aws-native:eks:Addon';
//# sourceMappingURL=addon.js.map