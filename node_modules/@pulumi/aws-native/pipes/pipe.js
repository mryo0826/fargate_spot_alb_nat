"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipe = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Definition of AWS::Pipes::Pipe Resource Type
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testPipe = new aws_native.pipes.Pipe("testPipe", {
 *     name: "PipeCfnExample",
 *     roleArn: "arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role",
 *     source: "arn:aws:sqs:us-east-1:123456789123:pipeDemoSource",
 *     enrichment: "arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*&#47;POST/pets",
 *     target: "arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testPipe = new aws_native.pipes.Pipe("testPipe", {
 *     name: "PipeCfnExample",
 *     roleArn: "arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role",
 *     source: "arn:aws:sqs:us-east-1:123456789123:pipeDemoSource",
 *     enrichment: "arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*&#47;POST/pets",
 *     target: "arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine",
 * });
 *
 * ```
 */
class Pipe extends pulumi.CustomResource {
    /**
     * Get an existing Pipe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Pipe(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pipe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipe.__pulumiType;
    }
    /**
     * Create a Pipe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["enrichment"] = args ? args.enrichment : undefined;
            resourceInputs["enrichmentParameters"] = args ? args.enrichmentParameters : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceParameters"] = args ? args.sourceParameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["targetParameters"] = args ? args.targetParameters : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["desiredState"] = undefined /*out*/;
            resourceInputs["enrichment"] = undefined /*out*/;
            resourceInputs["enrichmentParameters"] = undefined /*out*/;
            resourceInputs["kmsKeyIdentifier"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["logConfiguration"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["sourceParameters"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["target"] = undefined /*out*/;
            resourceInputs["targetParameters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "source", "sourceParameters.activeMqBrokerParameters.queueName", "sourceParameters.dynamoDbStreamParameters.startingPosition", "sourceParameters.kinesisStreamParameters.startingPosition", "sourceParameters.kinesisStreamParameters.startingPositionTimestamp", "sourceParameters.managedStreamingKafkaParameters.consumerGroupId", "sourceParameters.managedStreamingKafkaParameters.startingPosition", "sourceParameters.managedStreamingKafkaParameters.topicName", "sourceParameters.rabbitMqBrokerParameters.queueName", "sourceParameters.rabbitMqBrokerParameters.virtualHost", "sourceParameters.selfManagedKafkaParameters.additionalBootstrapServers[*]", "sourceParameters.selfManagedKafkaParameters.consumerGroupId", "sourceParameters.selfManagedKafkaParameters.startingPosition", "sourceParameters.selfManagedKafkaParameters.topicName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Pipe.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Pipe = Pipe;
/** @internal */
Pipe.__pulumiType = 'aws-native:pipes:Pipe';
//# sourceMappingURL=pipe.js.map