"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrincipalPermissions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ``AWS::LakeFormation::PrincipalPermissions`` resource represents the permissions that a principal has on a GLUDC resource (such as GLUlong databases or GLUlong tables). When you create a ``PrincipalPermissions`` resource, the permissions are granted via the LFlong ``GrantPermissions`` API operation. When you delete a ``PrincipalPermissions`` resource, the permissions on principal-resource pair are revoked via the LFlong ``RevokePermissions`` API operation.
 */
class PrincipalPermissions extends pulumi.CustomResource {
    /**
     * Get an existing PrincipalPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new PrincipalPermissions(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PrincipalPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrincipalPermissions.__pulumiType;
    }
    /**
     * Create a PrincipalPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.permissionsWithGrantOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionsWithGrantOption'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            resourceInputs["catalog"] = args ? args.catalog : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["permissionsWithGrantOption"] = args ? args.permissionsWithGrantOption : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["principalIdentifier"] = undefined /*out*/;
            resourceInputs["resourceIdentifier"] = undefined /*out*/;
        }
        else {
            resourceInputs["catalog"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["permissionsWithGrantOption"] = undefined /*out*/;
            resourceInputs["principal"] = undefined /*out*/;
            resourceInputs["principalIdentifier"] = undefined /*out*/;
            resourceInputs["resource"] = undefined /*out*/;
            resourceInputs["resourceIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["catalog", "permissions[*]", "permissionsWithGrantOption[*]", "principal", "resource"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(PrincipalPermissions.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PrincipalPermissions = PrincipalPermissions;
/** @internal */
PrincipalPermissions.__pulumiType = 'aws-native:lakeformation:PrincipalPermissions';
//# sourceMappingURL=principalPermissions.js.map