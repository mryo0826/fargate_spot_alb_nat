import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * A resource schema representing a Lake Formation Data Cells Filter.
 */
export declare class DataCellsFilter extends pulumi.CustomResource {
    /**
     * Get an existing DataCellsFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DataCellsFilter;
    /**
     * Returns true if the given object is an instance of DataCellsFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DataCellsFilter;
    /**
     * A list of columns to be included in this Data Cells Filter.
     */
    readonly columnNames: pulumi.Output<string[] | undefined>;
    /**
     * An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
     */
    readonly columnWildcard: pulumi.Output<outputs.lakeformation.DataCellsFilterColumnWildcard | undefined>;
    /**
     * The name of the Database that the Table resides in.
     */
    readonly databaseName: pulumi.Output<string>;
    /**
     * The desired name of the Data Cells Filter.
     */
    readonly name: pulumi.Output<string>;
    /**
     * An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
     */
    readonly rowFilter: pulumi.Output<outputs.lakeformation.DataCellsFilterRowFilter | undefined>;
    /**
     * The Catalog Id of the Table on which to create a Data Cells Filter.
     */
    readonly tableCatalogId: pulumi.Output<string>;
    /**
     * The name of the Table to create a Data Cells Filter for.
     */
    readonly tableName: pulumi.Output<string>;
    /**
     * Create a DataCellsFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataCellsFilterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DataCellsFilter resource.
 */
export interface DataCellsFilterArgs {
    /**
     * A list of columns to be included in this Data Cells Filter.
     */
    columnNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
     */
    columnWildcard?: pulumi.Input<inputs.lakeformation.DataCellsFilterColumnWildcardArgs>;
    /**
     * The name of the Database that the Table resides in.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The desired name of the Data Cells Filter.
     */
    name?: pulumi.Input<string>;
    /**
     * An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
     */
    rowFilter?: pulumi.Input<inputs.lakeformation.DataCellsFilterRowFilterArgs>;
    /**
     * The Catalog Id of the Table on which to create a Data Cells Filter.
     */
    tableCatalogId: pulumi.Input<string>;
    /**
     * The name of the Table to create a Data Cells Filter for.
     */
    tableName: pulumi.Input<string>;
}
