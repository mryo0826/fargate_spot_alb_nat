import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Creates a rule for the specified CON instance.
 */
export declare class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Rule;
    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Rule;
    /**
     * A list of actions to be run when the rule is triggered.
     */
    readonly actions: pulumi.Output<outputs.connect.RuleActions>;
    /**
     * The conditions of the rule.
     */
    readonly function: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the instance.
     */
    readonly instanceArn: pulumi.Output<string>;
    /**
     * The name of the rule.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The publish status of the rule.
     *   *Allowed values*: ``DRAFT`` | ``PUBLISHED``
     */
    readonly publishStatus: pulumi.Output<enums.connect.RulePublishStatus>;
    /**
     * The Amazon Resource Name (ARN) of the rule.
     */
    readonly ruleArn: pulumi.Output<string>;
    /**
     * The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The event source to trigger the rule.
     */
    readonly triggerEventSource: pulumi.Output<outputs.connect.RuleTriggerEventSource>;
    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * A list of actions to be run when the rule is triggered.
     */
    actions: pulumi.Input<inputs.connect.RuleActionsArgs>;
    /**
     * The conditions of the rule.
     */
    function: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the instance.
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The publish status of the rule.
     *   *Allowed values*: ``DRAFT`` | ``PUBLISHED``
     */
    publishStatus: pulumi.Input<enums.connect.RulePublishStatus>;
    /**
     * The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The event source to trigger the rule.
     */
    triggerEventSource: pulumi.Input<inputs.connect.RuleTriggerEventSourceArgs>;
}
