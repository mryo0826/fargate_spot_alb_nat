import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::Connect::Instance
 */
export declare class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Instance;
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Instance;
    /**
     * An instanceArn is automatically generated on creation based on instanceId.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The attributes for the instance.
     */
    readonly attributes: pulumi.Output<outputs.connect.InstanceAttributes>;
    /**
     * An instanceId is automatically generated on creation and assigned as the unique identifier.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * Timestamp of instance creation logged as part of instance creation.
     */
    readonly createdTime: pulumi.Output<string>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    readonly directoryId: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    readonly identityManagementType: pulumi.Output<enums.connect.InstanceIdentityManagementType>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    readonly instanceAlias: pulumi.Output<string | undefined>;
    /**
     * Specifies the creation status of new instance.
     */
    readonly instanceStatus: pulumi.Output<enums.connect.InstanceStatus>;
    /**
     * Service linked role created as part of instance creation.
     */
    readonly serviceRole: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The attributes for the instance.
     */
    attributes: pulumi.Input<inputs.connect.InstanceAttributesArgs>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    identityManagementType: pulumi.Input<enums.connect.InstanceIdentityManagementType>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    instanceAlias?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
