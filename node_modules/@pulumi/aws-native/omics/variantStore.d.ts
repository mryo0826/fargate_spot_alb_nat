import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Omics::VariantStore Resource Type
 */
export declare class VariantStore extends pulumi.CustomResource {
    /**
     * Get an existing VariantStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VariantStore;
    /**
     * Returns true if the given object is an instance of VariantStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is VariantStore;
    /**
     * The store's ID.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * When the store was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * A description for the store.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A name for the store.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The genome reference for the store's variants.
     */
    readonly reference: pulumi.Output<outputs.omics.VariantStoreReferenceItem>;
    /**
     * Server-side encryption (SSE) settings for the store.
     */
    readonly sseConfig: pulumi.Output<outputs.omics.VariantStoreSseConfig | undefined>;
    /**
     * The store's status.
     */
    readonly status: pulumi.Output<enums.omics.VariantStoreStoreStatus>;
    /**
     * The store's status message.
     */
    readonly statusMessage: pulumi.Output<string>;
    /**
     * The store's ARN.
     */
    readonly storeArn: pulumi.Output<string>;
    /**
     * The store's size in bytes.
     */
    readonly storeSizeBytes: pulumi.Output<number>;
    /**
     * Tags for the store.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * When the store was updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a VariantStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariantStoreArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a VariantStore resource.
 */
export interface VariantStoreArgs {
    /**
     * A description for the store.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the store.
     */
    name?: pulumi.Input<string>;
    /**
     * The genome reference for the store's variants.
     */
    reference: pulumi.Input<inputs.omics.VariantStoreReferenceItemArgs>;
    /**
     * Server-side encryption (SSE) settings for the store.
     */
    sseConfig?: pulumi.Input<inputs.omics.VariantStoreSseConfigArgs>;
    /**
     * Tags for the store.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
