import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Omics::AnnotationStore Resource Type
 */
export declare class AnnotationStore extends pulumi.CustomResource {
    /**
     * Get an existing AnnotationStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AnnotationStore;
    /**
     * Returns true if the given object is an instance of AnnotationStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AnnotationStore;
    /**
     * The store's ID.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * When the store was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * A description for the store.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the Annotation Store.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The genome reference for the store's annotations.
     */
    readonly reference: pulumi.Output<outputs.omics.AnnotationStoreReferenceItem | undefined>;
    /**
     * The store's server-side encryption (SSE) settings.
     */
    readonly sseConfig: pulumi.Output<outputs.omics.AnnotationStoreSseConfig | undefined>;
    /**
     * The store's status.
     */
    readonly status: pulumi.Output<enums.omics.AnnotationStoreStoreStatus>;
    /**
     * The store's status message.
     */
    readonly statusMessage: pulumi.Output<string>;
    /**
     * The store's ARN.
     */
    readonly storeArn: pulumi.Output<string>;
    /**
     * The annotation file format of the store.
     */
    readonly storeFormat: pulumi.Output<enums.omics.AnnotationStoreStoreFormat>;
    /**
     * File parsing options for the annotation store.
     */
    readonly storeOptions: pulumi.Output<outputs.omics.AnnotationStoreStoreOptionsProperties | undefined>;
    /**
     * The store's size in bytes.
     */
    readonly storeSizeBytes: pulumi.Output<number>;
    /**
     * Tags for the store.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * When the store was updated.
     */
    readonly updateTime: pulumi.Output<string>;
    /**
     * Create a AnnotationStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnnotationStoreArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a AnnotationStore resource.
 */
export interface AnnotationStoreArgs {
    /**
     * A description for the store.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Annotation Store.
     */
    name?: pulumi.Input<string>;
    /**
     * The genome reference for the store's annotations.
     */
    reference?: pulumi.Input<inputs.omics.AnnotationStoreReferenceItemArgs>;
    /**
     * The store's server-side encryption (SSE) settings.
     */
    sseConfig?: pulumi.Input<inputs.omics.AnnotationStoreSseConfigArgs>;
    /**
     * The annotation file format of the store.
     */
    storeFormat: pulumi.Input<enums.omics.AnnotationStoreStoreFormat>;
    /**
     * File parsing options for the annotation store.
     */
    storeOptions?: pulumi.Input<inputs.omics.AnnotationStoreStoreOptionsPropertiesArgs>;
    /**
     * Tags for the store.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
