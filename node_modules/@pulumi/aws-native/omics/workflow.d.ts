import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of AWS::Omics::Workflow Resource Type
 */
export declare class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workflow;
    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Workflow;
    readonly accelerators: pulumi.Output<enums.omics.WorkflowAccelerators | undefined>;
    /**
     * The ARN for the workflow.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The workflow's ID.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * When the workflow was created.
     */
    readonly creationTime: pulumi.Output<string>;
    /**
     * The URI of a definition for the workflow.
     */
    readonly definitionUri: pulumi.Output<string | undefined>;
    /**
     * The parameter's description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * An engine for the workflow.
     */
    readonly engine: pulumi.Output<enums.omics.WorkflowEngine | undefined>;
    /**
     * The path of the main definition file for the workflow.
     */
    readonly main: pulumi.Output<string | undefined>;
    /**
     * The workflow's name.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The workflow's parameter template.
     */
    readonly parameterTemplate: pulumi.Output<{
        [key: string]: outputs.omics.WorkflowParameter;
    } | undefined>;
    /**
     * The workflow's status.
     */
    readonly status: pulumi.Output<enums.omics.WorkflowStatus>;
    /**
     * The default storage capacity for the workflow runs, in gibibytes.
     */
    readonly storageCapacity: pulumi.Output<number | undefined>;
    /**
     * Tags for the workflow.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The workflow's type.
     */
    readonly type: pulumi.Output<enums.omics.WorkflowType>;
    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    accelerators?: pulumi.Input<enums.omics.WorkflowAccelerators>;
    /**
     * The URI of a definition for the workflow.
     */
    definitionUri?: pulumi.Input<string>;
    /**
     * The parameter's description.
     */
    description?: pulumi.Input<string>;
    /**
     * An engine for the workflow.
     */
    engine?: pulumi.Input<enums.omics.WorkflowEngine>;
    /**
     * The path of the main definition file for the workflow.
     */
    main?: pulumi.Input<string>;
    /**
     * The workflow's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The workflow's parameter template.
     */
    parameterTemplate?: pulumi.Input<{
        [key: string]: pulumi.Input<inputs.omics.WorkflowParameterArgs>;
    }>;
    /**
     * The default storage capacity for the workflow runs, in gibibytes.
     */
    storageCapacity?: pulumi.Input<number>;
    /**
     * Tags for the workflow.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
