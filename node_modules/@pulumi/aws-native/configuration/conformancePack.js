"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConformancePack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * A conformance pack is a collection of AWS Config rules and remediation actions that can be easily deployed as a single entity in an account and a region or across an entire AWS Organization.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const conformancePack = new aws_native.configuration.ConformancePack("conformancePack", {
 *     conformancePackName: "ConformancePackName",
 *     deliveryS3Bucket: "DeliveryS3Bucket",
 *     templateS3Uri: "s3://bucketname/prefix",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const cloudFormationCanaryPack = new aws_native.configuration.ConformancePack("cloudFormationCanaryPack", {
 *     conformancePackName: "ConformancePackName",
 *     deliveryS3Bucket: "DeliveryS3Bucket",
 *     templateS3Uri: "s3://bucketname/prefix",
 * });
 *
 * ```
 */
class ConformancePack extends pulumi.CustomResource {
    /**
     * Get an existing ConformancePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ConformancePack(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConformancePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConformancePack.__pulumiType;
    }
    /**
     * Create a ConformancePack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["conformancePackInputParameters"] = args ? args.conformancePackInputParameters : undefined;
            resourceInputs["conformancePackName"] = args ? args.conformancePackName : undefined;
            resourceInputs["deliveryS3Bucket"] = args ? args.deliveryS3Bucket : undefined;
            resourceInputs["deliveryS3KeyPrefix"] = args ? args.deliveryS3KeyPrefix : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateS3Uri"] = args ? args.templateS3Uri : undefined;
            resourceInputs["templateSsmDocumentDetails"] = args ? args.templateSsmDocumentDetails : undefined;
        }
        else {
            resourceInputs["conformancePackInputParameters"] = undefined /*out*/;
            resourceInputs["conformancePackName"] = undefined /*out*/;
            resourceInputs["deliveryS3Bucket"] = undefined /*out*/;
            resourceInputs["deliveryS3KeyPrefix"] = undefined /*out*/;
            resourceInputs["templateBody"] = undefined /*out*/;
            resourceInputs["templateS3Uri"] = undefined /*out*/;
            resourceInputs["templateSsmDocumentDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["conformancePackName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConformancePack.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ConformancePack = ConformancePack;
/** @internal */
ConformancePack.__pulumiType = 'aws-native:configuration:ConformancePack';
//# sourceMappingURL=conformancePack.js.map