"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoredQuery = exports.OrganizationConformancePack = exports.getStoredQueryOutput = exports.getStoredQuery = exports.getOrganizationConformancePackOutput = exports.getOrganizationConformancePack = exports.getConformancePackOutput = exports.getConformancePack = exports.getConfigurationAggregatorOutput = exports.getConfigurationAggregator = exports.getConfigRuleOutput = exports.getConfigRule = exports.getAggregationAuthorizationOutput = exports.getAggregationAuthorization = exports.ConformancePack = exports.ConfigurationAggregator = exports.ConfigRule = exports.AggregationAuthorization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.AggregationAuthorization = null;
utilities.lazyLoad(exports, ["AggregationAuthorization"], () => require("./aggregationAuthorization"));
exports.ConfigRule = null;
utilities.lazyLoad(exports, ["ConfigRule"], () => require("./configRule"));
exports.ConfigurationAggregator = null;
utilities.lazyLoad(exports, ["ConfigurationAggregator"], () => require("./configurationAggregator"));
exports.ConformancePack = null;
utilities.lazyLoad(exports, ["ConformancePack"], () => require("./conformancePack"));
exports.getAggregationAuthorization = null;
exports.getAggregationAuthorizationOutput = null;
utilities.lazyLoad(exports, ["getAggregationAuthorization", "getAggregationAuthorizationOutput"], () => require("./getAggregationAuthorization"));
exports.getConfigRule = null;
exports.getConfigRuleOutput = null;
utilities.lazyLoad(exports, ["getConfigRule", "getConfigRuleOutput"], () => require("./getConfigRule"));
exports.getConfigurationAggregator = null;
exports.getConfigurationAggregatorOutput = null;
utilities.lazyLoad(exports, ["getConfigurationAggregator", "getConfigurationAggregatorOutput"], () => require("./getConfigurationAggregator"));
exports.getConformancePack = null;
exports.getConformancePackOutput = null;
utilities.lazyLoad(exports, ["getConformancePack", "getConformancePackOutput"], () => require("./getConformancePack"));
exports.getOrganizationConformancePack = null;
exports.getOrganizationConformancePackOutput = null;
utilities.lazyLoad(exports, ["getOrganizationConformancePack", "getOrganizationConformancePackOutput"], () => require("./getOrganizationConformancePack"));
exports.getStoredQuery = null;
exports.getStoredQueryOutput = null;
utilities.lazyLoad(exports, ["getStoredQuery", "getStoredQueryOutput"], () => require("./getStoredQuery"));
exports.OrganizationConformancePack = null;
utilities.lazyLoad(exports, ["OrganizationConformancePack"], () => require("./organizationConformancePack"));
exports.StoredQuery = null;
utilities.lazyLoad(exports, ["StoredQuery"], () => require("./storedQuery"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:configuration:AggregationAuthorization":
                return new exports.AggregationAuthorization(name, undefined, { urn });
            case "aws-native:configuration:ConfigRule":
                return new exports.ConfigRule(name, undefined, { urn });
            case "aws-native:configuration:ConfigurationAggregator":
                return new exports.ConfigurationAggregator(name, undefined, { urn });
            case "aws-native:configuration:ConformancePack":
                return new exports.ConformancePack(name, undefined, { urn });
            case "aws-native:configuration:OrganizationConformancePack":
                return new exports.OrganizationConformancePack(name, undefined, { urn });
            case "aws-native:configuration:StoredQuery":
                return new exports.StoredQuery(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "configuration", _module);
//# sourceMappingURL=index.js.map