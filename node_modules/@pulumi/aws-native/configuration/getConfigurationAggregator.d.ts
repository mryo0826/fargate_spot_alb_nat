import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::Config::ConfigurationAggregator
 */
export declare function getConfigurationAggregator(args: GetConfigurationAggregatorArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationAggregatorResult>;
export interface GetConfigurationAggregatorArgs {
    /**
     * The name of the aggregator.
     */
    configurationAggregatorName: string;
}
export interface GetConfigurationAggregatorResult {
    /**
     * Provides a list of source accounts and regions to be aggregated.
     */
    readonly accountAggregationSources?: outputs.configuration.ConfigurationAggregatorAccountAggregationSource[];
    /**
     * The Amazon Resource Name (ARN) of the aggregator.
     */
    readonly configurationAggregatorArn?: string;
    /**
     * Provides an organization and list of regions to be aggregated.
     */
    readonly organizationAggregationSource?: outputs.configuration.ConfigurationAggregatorOrganizationAggregationSource;
    /**
     * The tags for the configuration aggregator.
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Resource Type definition for AWS::Config::ConfigurationAggregator
 */
export declare function getConfigurationAggregatorOutput(args: GetConfigurationAggregatorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConfigurationAggregatorResult>;
export interface GetConfigurationAggregatorOutputArgs {
    /**
     * The name of the aggregator.
     */
    configurationAggregatorName: pulumi.Input<string>;
}
