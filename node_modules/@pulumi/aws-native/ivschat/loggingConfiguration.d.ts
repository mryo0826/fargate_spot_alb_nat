import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource type definition for AWS::IVSChat::LoggingConfiguration.
 */
export declare class LoggingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LoggingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LoggingConfiguration;
    /**
     * Returns true if the given object is an instance of LoggingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoggingConfiguration;
    /**
     * LoggingConfiguration ARN is automatically generated on creation and assigned as the unique identifier.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The system-generated ID of the logging configuration.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * The DestinationConfiguration is a complex type that contains information about where chat content will be logged.
     */
    readonly destinationConfiguration: pulumi.Output<outputs.ivschat.LoggingConfigurationDestinationConfiguration>;
    /**
     * The name of the logging configuration. The value does not need to be unique.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The state of the logging configuration. When the state is ACTIVE, the configuration is ready to log chat content.
     */
    readonly state: pulumi.Output<enums.ivschat.LoggingConfigurationState>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a LoggingConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoggingConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LoggingConfiguration resource.
 */
export interface LoggingConfigurationArgs {
    /**
     * The DestinationConfiguration is a complex type that contains information about where chat content will be logged.
     */
    destinationConfiguration: pulumi.Input<inputs.ivschat.LoggingConfigurationDestinationConfigurationArgs>;
    /**
     * The name of the logging configuration. The value does not need to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
