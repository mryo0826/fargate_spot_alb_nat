import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::Evidently::Launch.
 */
export declare class Launch extends pulumi.CustomResource {
    /**
     * Get an existing Launch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Launch;
    /**
     * Returns true if the given object is an instance of Launch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Launch;
    /**
     * The ARN of the launch. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/launch/myLaunch`
     */
    readonly arn: pulumi.Output<string>;
    /**
     * An optional description for the launch.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Start or Stop Launch Launch. Default is not started.
     */
    readonly executionStatus: pulumi.Output<outputs.evidently.LaunchExecutionStatusObject | undefined>;
    /**
     * An array of structures that contains the feature and variations that are to be used for the launch. You can up to five launch groups in a launch.
     */
    readonly groups: pulumi.Output<outputs.evidently.LaunchGroupObject[]>;
    /**
     * An array of structures that define the metrics that will be used to monitor the launch performance. You can have up to three metric monitors in the array.
     */
    readonly metricMonitors: pulumi.Output<outputs.evidently.LaunchMetricDefinitionObject[] | undefined>;
    /**
     * The name for the launch. It can include up to 127 characters.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The name or ARN of the project that you want to create the launch in.
     */
    readonly project: pulumi.Output<string>;
    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the launch name as the `randomizationsSalt` .
     */
    readonly randomizationSalt: pulumi.Output<string | undefined>;
    /**
     * An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.
     */
    readonly scheduledSplitsConfig: pulumi.Output<outputs.evidently.LaunchStepConfig[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Launch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Launch resource.
 */
export interface LaunchArgs {
    /**
     * An optional description for the launch.
     */
    description?: pulumi.Input<string>;
    /**
     * Start or Stop Launch Launch. Default is not started.
     */
    executionStatus?: pulumi.Input<inputs.evidently.LaunchExecutionStatusObjectArgs>;
    /**
     * An array of structures that contains the feature and variations that are to be used for the launch. You can up to five launch groups in a launch.
     */
    groups: pulumi.Input<pulumi.Input<inputs.evidently.LaunchGroupObjectArgs>[]>;
    /**
     * An array of structures that define the metrics that will be used to monitor the launch performance. You can have up to three metric monitors in the array.
     */
    metricMonitors?: pulumi.Input<pulumi.Input<inputs.evidently.LaunchMetricDefinitionObjectArgs>[]>;
    /**
     * The name for the launch. It can include up to 127 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The name or ARN of the project that you want to create the launch in.
     */
    project: pulumi.Input<string>;
    /**
     * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the launch name as the `randomizationsSalt` .
     */
    randomizationSalt?: pulumi.Input<string>;
    /**
     * An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.
     */
    scheduledSplitsConfig: pulumi.Input<pulumi.Input<inputs.evidently.LaunchStepConfigArgs>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
