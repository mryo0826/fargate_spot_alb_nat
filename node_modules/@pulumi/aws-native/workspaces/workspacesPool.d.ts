import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::WorkSpaces::WorkspacesPool
 */
export declare class WorkspacesPool extends pulumi.CustomResource {
    /**
     * Get an existing WorkspacesPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkspacesPool;
    /**
     * Returns true if the given object is an instance of WorkspacesPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is WorkspacesPool;
    /**
     * The persistent application settings for users of the pool.
     */
    readonly applicationSettings: pulumi.Output<outputs.workspaces.WorkspacesPoolApplicationSettings | undefined>;
    /**
     * The identifier of the bundle used by the pool.
     */
    readonly bundleId: pulumi.Output<string>;
    /**
     * Describes the user capacity for the pool.
     */
    readonly capacity: pulumi.Output<outputs.workspaces.WorkspacesPoolCapacity>;
    /**
     * The time the pool was created.
     */
    readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the pool.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The identifier of the directory used by the pool.
     */
    readonly directoryId: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) for the pool.
     */
    readonly poolArn: pulumi.Output<string>;
    /**
     * The identifier of the pool.
     */
    readonly poolId: pulumi.Output<string>;
    /**
     * The name of the pool.
     */
    readonly poolName: pulumi.Output<string>;
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.
     */
    readonly timeoutSettings: pulumi.Output<outputs.workspaces.WorkspacesPoolTimeoutSettings | undefined>;
    /**
     * Create a WorkspacesPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspacesPoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a WorkspacesPool resource.
 */
export interface WorkspacesPoolArgs {
    /**
     * The persistent application settings for users of the pool.
     */
    applicationSettings?: pulumi.Input<inputs.workspaces.WorkspacesPoolApplicationSettingsArgs>;
    /**
     * The identifier of the bundle used by the pool.
     */
    bundleId: pulumi.Input<string>;
    /**
     * Describes the user capacity for the pool.
     */
    capacity: pulumi.Input<inputs.workspaces.WorkspacesPoolCapacityArgs>;
    /**
     * The description of the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier of the directory used by the pool.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The name of the pool.
     */
    poolName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The amount of time that a pool session remains active after users disconnect. If they try to reconnect to the pool session after a disconnection or network interruption within this time interval, they are connected to their previous session. Otherwise, they are connected to a new session with a new pool instance.
     */
    timeoutSettings?: pulumi.Input<inputs.workspaces.WorkspacesPoolTimeoutSettingsArgs>;
}
