"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSettings = exports.UserAccessLoggingSettings = exports.TrustStore = exports.Portal = exports.NetworkSettings = exports.IpAccessSettings = exports.IdentityProvider = exports.getUserSettingsOutput = exports.getUserSettings = exports.getUserAccessLoggingSettingsOutput = exports.getUserAccessLoggingSettings = exports.getTrustStoreOutput = exports.getTrustStore = exports.getPortalOutput = exports.getPortal = exports.getNetworkSettingsOutput = exports.getNetworkSettings = exports.getIpAccessSettingsOutput = exports.getIpAccessSettings = exports.getIdentityProviderOutput = exports.getIdentityProvider = exports.getDataProtectionSettingsOutput = exports.getDataProtectionSettings = exports.getBrowserSettingsOutput = exports.getBrowserSettings = exports.DataProtectionSettings = exports.BrowserSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.BrowserSettings = null;
utilities.lazyLoad(exports, ["BrowserSettings"], () => require("./browserSettings"));
exports.DataProtectionSettings = null;
utilities.lazyLoad(exports, ["DataProtectionSettings"], () => require("./dataProtectionSettings"));
exports.getBrowserSettings = null;
exports.getBrowserSettingsOutput = null;
utilities.lazyLoad(exports, ["getBrowserSettings", "getBrowserSettingsOutput"], () => require("./getBrowserSettings"));
exports.getDataProtectionSettings = null;
exports.getDataProtectionSettingsOutput = null;
utilities.lazyLoad(exports, ["getDataProtectionSettings", "getDataProtectionSettingsOutput"], () => require("./getDataProtectionSettings"));
exports.getIdentityProvider = null;
exports.getIdentityProviderOutput = null;
utilities.lazyLoad(exports, ["getIdentityProvider", "getIdentityProviderOutput"], () => require("./getIdentityProvider"));
exports.getIpAccessSettings = null;
exports.getIpAccessSettingsOutput = null;
utilities.lazyLoad(exports, ["getIpAccessSettings", "getIpAccessSettingsOutput"], () => require("./getIpAccessSettings"));
exports.getNetworkSettings = null;
exports.getNetworkSettingsOutput = null;
utilities.lazyLoad(exports, ["getNetworkSettings", "getNetworkSettingsOutput"], () => require("./getNetworkSettings"));
exports.getPortal = null;
exports.getPortalOutput = null;
utilities.lazyLoad(exports, ["getPortal", "getPortalOutput"], () => require("./getPortal"));
exports.getTrustStore = null;
exports.getTrustStoreOutput = null;
utilities.lazyLoad(exports, ["getTrustStore", "getTrustStoreOutput"], () => require("./getTrustStore"));
exports.getUserAccessLoggingSettings = null;
exports.getUserAccessLoggingSettingsOutput = null;
utilities.lazyLoad(exports, ["getUserAccessLoggingSettings", "getUserAccessLoggingSettingsOutput"], () => require("./getUserAccessLoggingSettings"));
exports.getUserSettings = null;
exports.getUserSettingsOutput = null;
utilities.lazyLoad(exports, ["getUserSettings", "getUserSettingsOutput"], () => require("./getUserSettings"));
exports.IdentityProvider = null;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));
exports.IpAccessSettings = null;
utilities.lazyLoad(exports, ["IpAccessSettings"], () => require("./ipAccessSettings"));
exports.NetworkSettings = null;
utilities.lazyLoad(exports, ["NetworkSettings"], () => require("./networkSettings"));
exports.Portal = null;
utilities.lazyLoad(exports, ["Portal"], () => require("./portal"));
exports.TrustStore = null;
utilities.lazyLoad(exports, ["TrustStore"], () => require("./trustStore"));
exports.UserAccessLoggingSettings = null;
utilities.lazyLoad(exports, ["UserAccessLoggingSettings"], () => require("./userAccessLoggingSettings"));
exports.UserSettings = null;
utilities.lazyLoad(exports, ["UserSettings"], () => require("./userSettings"));
// Export enums:
__exportStar(require("../types/enums/workspacesweb"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:workspacesweb:BrowserSettings":
                return new exports.BrowserSettings(name, undefined, { urn });
            case "aws-native:workspacesweb:DataProtectionSettings":
                return new exports.DataProtectionSettings(name, undefined, { urn });
            case "aws-native:workspacesweb:IdentityProvider":
                return new exports.IdentityProvider(name, undefined, { urn });
            case "aws-native:workspacesweb:IpAccessSettings":
                return new exports.IpAccessSettings(name, undefined, { urn });
            case "aws-native:workspacesweb:NetworkSettings":
                return new exports.NetworkSettings(name, undefined, { urn });
            case "aws-native:workspacesweb:Portal":
                return new exports.Portal(name, undefined, { urn });
            case "aws-native:workspacesweb:TrustStore":
                return new exports.TrustStore(name, undefined, { urn });
            case "aws-native:workspacesweb:UserAccessLoggingSettings":
                return new exports.UserAccessLoggingSettings(name, undefined, { urn });
            case "aws-native:workspacesweb:UserSettings":
                return new exports.UserSettings(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "workspacesweb", _module);
//# sourceMappingURL=index.js.map