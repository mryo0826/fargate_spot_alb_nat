import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::Rbin::Rule
 */
export declare class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Rule;
    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Rule;
    /**
     * Rule Arn is unique for each rule.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The description of the retention rule.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
     */
    readonly excludeResourceTags: pulumi.Output<outputs.rbin.RuleResourceTag[] | undefined>;
    /**
     * The unique ID of the retention rule.
     */
    readonly identifier: pulumi.Output<string>;
    /**
     * Information about the retention rule lock configuration.
     */
    readonly lockConfiguration: pulumi.Output<outputs.rbin.RuleUnlockDelay | undefined>;
    /**
     * The lock state for the retention rule.
     */
    readonly lockState: pulumi.Output<string>;
    /**
     * Information about the resource tags used to identify resources that are retained by the retention rule.
     */
    readonly resourceTags: pulumi.Output<outputs.rbin.RuleResourceTag[] | undefined>;
    /**
     * The resource type retained by the retention rule.
     */
    readonly resourceType: pulumi.Output<enums.rbin.RuleResourceType>;
    /**
     * Information about the retention period for which the retention rule is to retain resources.
     */
    readonly retentionPeriod: pulumi.Output<outputs.rbin.RuleRetentionPeriod>;
    /**
     * The state of the retention rule. Only retention rules that are in the available state retain resources.
     */
    readonly status: pulumi.Output<string | undefined>;
    /**
     * Information about the tags assigned to the retention rule.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The description of the retention rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
     */
    excludeResourceTags?: pulumi.Input<pulumi.Input<inputs.rbin.RuleResourceTagArgs>[]>;
    /**
     * Information about the retention rule lock configuration.
     */
    lockConfiguration?: pulumi.Input<inputs.rbin.RuleUnlockDelayArgs>;
    /**
     * Information about the resource tags used to identify resources that are retained by the retention rule.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.rbin.RuleResourceTagArgs>[]>;
    /**
     * The resource type retained by the retention rule.
     */
    resourceType: pulumi.Input<enums.rbin.RuleResourceType>;
    /**
     * Information about the retention period for which the retention rule is to retain resources.
     */
    retentionPeriod: pulumi.Input<inputs.rbin.RuleRetentionPeriodArgs>;
    /**
     * The state of the retention rule. Only retention rules that are in the available state retain resources.
     */
    status?: pulumi.Input<string>;
    /**
     * Information about the tags assigned to the retention rule.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
