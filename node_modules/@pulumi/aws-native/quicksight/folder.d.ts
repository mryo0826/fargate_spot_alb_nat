import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Definition of the AWS::QuickSight::Folder Resource Type.
 */
export declare class Folder extends pulumi.CustomResource {
    /**
     * Get an existing Folder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Folder;
    /**
     * Returns true if the given object is an instance of Folder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Folder;
    /**
     * <p>The Amazon Resource Name (ARN) for the folder.</p>
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The ID for the AWS account where you want to create the folder.
     */
    readonly awsAccountId: pulumi.Output<string | undefined>;
    /**
     * <p>The time that the folder was created.</p>
     */
    readonly createdTime: pulumi.Output<string>;
    /**
     * The ID of the folder.
     */
    readonly folderId: pulumi.Output<string | undefined>;
    /**
     * The type of folder it is.
     */
    readonly folderType: pulumi.Output<enums.quicksight.FolderType | undefined>;
    /**
     * <p>The time that the folder was last updated.</p>
     */
    readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * A display name for the folder.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) for the folder.
     */
    readonly parentFolderArn: pulumi.Output<string | undefined>;
    /**
     * A structure that describes the principals and the resource-level permissions of a folder.
     *
     * To specify no permissions, omit `Permissions` .
     */
    readonly permissions: pulumi.Output<outputs.quicksight.FolderResourcePermission[] | undefined>;
    /**
     * The sharing scope of the folder.
     */
    readonly sharingModel: pulumi.Output<enums.quicksight.FolderSharingModel | undefined>;
    /**
     * A list of tags for the folders that you want to apply overrides to.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Folder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FolderArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Folder resource.
 */
export interface FolderArgs {
    /**
     * The ID for the AWS account where you want to create the folder.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * The ID of the folder.
     */
    folderId?: pulumi.Input<string>;
    /**
     * The type of folder it is.
     */
    folderType?: pulumi.Input<enums.quicksight.FolderType>;
    /**
     * A display name for the folder.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the folder.
     */
    parentFolderArn?: pulumi.Input<string>;
    /**
     * A structure that describes the principals and the resource-level permissions of a folder.
     *
     * To specify no permissions, omit `Permissions` .
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.FolderResourcePermissionArgs>[]>;
    /**
     * The sharing scope of the folder.
     */
    sharingModel?: pulumi.Input<enums.quicksight.FolderSharingModel>;
    /**
     * A list of tags for the folders that you want to apply overrides to.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
