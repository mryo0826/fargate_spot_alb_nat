import * as pulumi from "@pulumi/pulumi";
import * as enums from "../types/enums";
/**
 * Registers a package version.
 */
export declare class PackageVersion extends pulumi.CustomResource {
    /**
     * Get an existing PackageVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PackageVersion;
    /**
     * Returns true if the given object is an instance of PackageVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PackageVersion;
    /**
     * Whether the package version is the latest version.
     */
    readonly isLatestPatch: pulumi.Output<boolean>;
    /**
     * Whether to mark the new version as the latest version.
     */
    readonly markLatest: pulumi.Output<boolean | undefined>;
    /**
     * An owner account.
     */
    readonly ownerAccount: pulumi.Output<string | undefined>;
    /**
     * The package version's ARN.
     */
    readonly packageArn: pulumi.Output<string>;
    /**
     * A package ID.
     */
    readonly packageId: pulumi.Output<string>;
    /**
     * The package version's name.
     */
    readonly packageName: pulumi.Output<string>;
    /**
     * A package version.
     */
    readonly packageVersion: pulumi.Output<string>;
    /**
     * A patch version.
     */
    readonly patchVersion: pulumi.Output<string>;
    /**
     * The package version's registered time.
     */
    readonly registeredTime: pulumi.Output<number>;
    /**
     * The package version's status.
     */
    readonly status: pulumi.Output<enums.panorama.PackageVersionStatus>;
    /**
     * The package version's status description.
     */
    readonly statusDescription: pulumi.Output<string>;
    /**
     * If the version was marked latest, the new version to maker as latest.
     */
    readonly updatedLatestPatchVersion: pulumi.Output<string | undefined>;
    /**
     * Create a PackageVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageVersionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a PackageVersion resource.
 */
export interface PackageVersionArgs {
    /**
     * Whether to mark the new version as the latest version.
     */
    markLatest?: pulumi.Input<boolean>;
    /**
     * An owner account.
     */
    ownerAccount?: pulumi.Input<string>;
    /**
     * A package ID.
     */
    packageId: pulumi.Input<string>;
    /**
     * A package version.
     */
    packageVersion: pulumi.Input<string>;
    /**
     * A patch version.
     */
    patchVersion: pulumi.Input<string>;
    /**
     * If the version was marked latest, the new version to maker as latest.
     */
    updatedLatestPatchVersion?: pulumi.Input<string>;
}
