import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::AppConfig::Application
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const dependentApplication = new aws_native.appconfig.Application("dependentApplication", {name: "MyApplication"});
 * const dependentConfigurationProfile = new aws_native.appconfig.ConfigurationProfile("dependentConfigurationProfile", {
 *     applicationId: "DependentApplication",
 *     name: "MyTestProfile",
 *     locationUri: "hosted",
 * });
 * const basicHostedConfigurationVersion = new aws_native.appconfig.HostedConfigurationVersion("basicHostedConfigurationVersion", {
 *     applicationId: "DependentApplication",
 *     configurationProfileId: "DependentConfigurationProfile",
 *     description: "A sample hosted configuration version",
 *     content: "My hosted configuration content",
 *     contentType: "text/plain",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const dependentApplication = new aws_native.appconfig.Application("dependentApplication", {name: "MyApplication"});
 * const dependentConfigurationProfile = new aws_native.appconfig.ConfigurationProfile("dependentConfigurationProfile", {
 *     applicationId: dependentApplication.id,
 *     name: "MyTestProfile",
 *     locationUri: "hosted",
 * });
 * const basicHostedConfigurationVersion = new aws_native.appconfig.HostedConfigurationVersion("basicHostedConfigurationVersion", {
 *     applicationId: dependentApplication.id,
 *     configurationProfileId: dependentConfigurationProfile.id,
 *     description: "A sample hosted configuration version",
 *     content: "My hosted configuration content",
 *     contentType: "text/plain",
 * });
 *
 * ```
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    /**
     * The application Id
     */
    readonly applicationId: pulumi.Output<string>;
    /**
     * A description of the application.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * A name for the application.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * A description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the application.
     */
    name?: pulumi.Input<string>;
    /**
     * Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
