import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::AppConfig::Environment
 */
export declare class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Environment;
    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Environment;
    /**
     * The application ID.
     */
    readonly applicationId: pulumi.Output<string>;
    /**
     * On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
     */
    readonly deletionProtectionCheck: pulumi.Output<enums.appconfig.EnvironmentDeletionProtectionCheck | undefined>;
    /**
     * A description of the environment.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The environment ID.
     */
    readonly environmentId: pulumi.Output<string>;
    /**
     * Amazon CloudWatch alarms to monitor during the deployment process.
     */
    readonly monitors: pulumi.Output<outputs.appconfig.EnvironmentMonitor[] | undefined>;
    /**
     * A name for the environment.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * The application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * On resource deletion this controls whether the Deletion Protection check should be applied, bypassed, or (the default) whether the behavior should be controlled by the account-level Deletion Protection setting. See https://docs.aws.amazon.com/appconfig/latest/userguide/deletion-protection.html
     */
    deletionProtectionCheck?: pulumi.Input<enums.appconfig.EnvironmentDeletionProtectionCheck>;
    /**
     * A description of the environment.
     */
    description?: pulumi.Input<string>;
    /**
     * Amazon CloudWatch alarms to monitor during the deployment process.
     */
    monitors?: pulumi.Input<pulumi.Input<inputs.appconfig.EnvironmentMonitorArgs>[]>;
    /**
     * A name for the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
