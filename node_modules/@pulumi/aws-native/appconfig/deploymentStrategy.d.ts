import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::AppConfig::DeploymentStrategy
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicDeploymentStrategy = new aws_native.appconfig.DeploymentStrategy("basicDeploymentStrategy", {
 *     name: "MyTestDeploymentStrategy",
 *     description: "A sample test deployment strategy.",
 *     deploymentDurationInMinutes: 3,
 *     finalBakeTimeInMinutes: 4,
 *     growthFactor: 10,
 *     growthType: aws_native.appconfig.DeploymentStrategyGrowthType.Linear,
 *     replicateTo: aws_native.appconfig.DeploymentStrategyReplicateTo.None,
 *     tags: [{
 *         key: "Env",
 *         value: "test",
 *     }],
 * });
 *
 * ```
 */
export declare class DeploymentStrategy extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentStrategy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DeploymentStrategy;
    /**
     * Returns true if the given object is an instance of DeploymentStrategy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DeploymentStrategy;
    /**
     * The deployment strategy ID.
     */
    readonly awsId: pulumi.Output<string>;
    /**
     * Total amount of time for a deployment to last.
     */
    readonly deploymentDurationInMinutes: pulumi.Output<number>;
    /**
     * A description of the deployment strategy.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
     */
    readonly finalBakeTimeInMinutes: pulumi.Output<number | undefined>;
    /**
     * The percentage of targets to receive a deployed configuration during each interval.
     */
    readonly growthFactor: pulumi.Output<number>;
    /**
     * The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
     *
     * Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
     *
     * Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
     *
     * 2*(2^0)
     *
     * 2*(2^1)
     *
     * 2*(2^2)
     *
     * Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
     */
    readonly growthType: pulumi.Output<enums.appconfig.DeploymentStrategyGrowthType | undefined>;
    /**
     * A name for the deployment strategy.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Save the deployment strategy to a Systems Manager (SSM) document.
     */
    readonly replicateTo: pulumi.Output<enums.appconfig.DeploymentStrategyReplicateTo>;
    /**
     * Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a DeploymentStrategy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentStrategyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a DeploymentStrategy resource.
 */
export interface DeploymentStrategyArgs {
    /**
     * Total amount of time for a deployment to last.
     */
    deploymentDurationInMinutes: pulumi.Input<number>;
    /**
     * A description of the deployment strategy.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the amount of time AWS AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AWS AppConfig rolls back the deployment. You must configure permissions for AWS AppConfig to roll back based on CloudWatch alarms. For more information, see Configuring permissions for rollback based on Amazon CloudWatch alarms in the AWS AppConfig User Guide.
     */
    finalBakeTimeInMinutes?: pulumi.Input<number>;
    /**
     * The percentage of targets to receive a deployed configuration during each interval.
     */
    growthFactor: pulumi.Input<number>;
    /**
     * The algorithm used to define how percentage grows over time. AWS AppConfig supports the following growth types:
     *
     * Linear: For this type, AWS AppConfig processes the deployment by dividing the total number of targets by the value specified for Step percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.
     *
     * Exponential: For this type, AWS AppConfig processes the deployment exponentially using the following formula: G*(2^N). In this formula, G is the growth factor specified by the user and N is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:
     *
     * 2*(2^0)
     *
     * 2*(2^1)
     *
     * 2*(2^2)
     *
     * Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.
     */
    growthType?: pulumi.Input<enums.appconfig.DeploymentStrategyGrowthType>;
    /**
     * A name for the deployment strategy.
     */
    name?: pulumi.Input<string>;
    /**
     * Save the deployment strategy to a Systems Manager (SSM) document.
     */
    replicateTo: pulumi.Input<enums.appconfig.DeploymentStrategyReplicateTo>;
    /**
     * Assigns metadata to an AWS AppConfig resource. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define. You can specify a maximum of 50 tags for a resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
