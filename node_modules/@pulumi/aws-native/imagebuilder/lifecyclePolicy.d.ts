import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::ImageBuilder::LifecyclePolicy
 */
export declare class LifecyclePolicy extends pulumi.CustomResource {
    /**
     * Get an existing LifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LifecyclePolicy;
    /**
     * Returns true if the given object is an instance of LifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LifecyclePolicy;
    /**
     * The Amazon Resource Name (ARN) of the lifecycle policy.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The description of the lifecycle policy.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The execution role of the lifecycle policy.
     */
    readonly executionRole: pulumi.Output<string>;
    /**
     * The name of the lifecycle policy.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    readonly policyDetails: pulumi.Output<outputs.imagebuilder.LifecyclePolicyPolicyDetail[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    readonly resourceSelection: pulumi.Output<outputs.imagebuilder.LifecyclePolicyResourceSelection>;
    /**
     * The resource type of the lifecycle policy.
     */
    readonly resourceType: pulumi.Output<enums.imagebuilder.LifecyclePolicyResourceType>;
    /**
     * The status of the lifecycle policy.
     */
    readonly status: pulumi.Output<enums.imagebuilder.LifecyclePolicyStatus | undefined>;
    /**
     * The tags associated with the lifecycle policy.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a LifecyclePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LifecyclePolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a LifecyclePolicy resource.
 */
export interface LifecyclePolicyArgs {
    /**
     * The description of the lifecycle policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The execution role of the lifecycle policy.
     */
    executionRole: pulumi.Input<string>;
    /**
     * The name of the lifecycle policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    policyDetails: pulumi.Input<pulumi.Input<inputs.imagebuilder.LifecyclePolicyPolicyDetailArgs>[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    resourceSelection: pulumi.Input<inputs.imagebuilder.LifecyclePolicyResourceSelectionArgs>;
    /**
     * The resource type of the lifecycle policy.
     */
    resourceType: pulumi.Input<enums.imagebuilder.LifecyclePolicyResourceType>;
    /**
     * The status of the lifecycle policy.
     */
    status?: pulumi.Input<enums.imagebuilder.LifecyclePolicyStatus>;
    /**
     * The tags associated with the lifecycle policy.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
