"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::ImageBuilder::Component
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const componentAllParameters = new aws_native.imagebuilder.Component("componentAllParameters", {
 *     name: "component-name",
 *     platform: aws_native.imagebuilder.ComponentPlatform.Linux,
 *     version: "1.0.0",
 *     description: "description",
 *     changeDescription: "change-description",
 *     kmsKeyId: "customer-kms-key-id",
 *     supportedOsVersions: ["Amazon Linux 2"],
 *     tags: {
 *         customerComponentTagKey1: "CustomerComponentTagValue1",
 *         customerComponentTagKey2: "CustomerComponentTagValue2",
 *     },
 *     data: `name: HelloWorldTestingLinuxDoc - InlineData
 * description: This is hello world testing doc
 * schemaVersion: 1.0
 *
 * phases:
 *   - name: build
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Build."
 *   - name: validate
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Validate."
 *   - name: test
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Test."
 * `,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const componentAllParameters = new aws_native.imagebuilder.Component("componentAllParameters", {
 *     name: "component-name",
 *     platform: aws_native.imagebuilder.ComponentPlatform.Linux,
 *     version: "1.0.0",
 *     description: "description",
 *     changeDescription: "change-description",
 *     kmsKeyId: "customer-kms-key-id",
 *     supportedOsVersions: ["Amazon Linux 2"],
 *     tags: {
 *         customerComponentTagKey1: "CustomerComponentTagValue1",
 *         customerComponentTagKey2: "CustomerComponentTagValue2",
 *     },
 *     data: `name: HelloWorldTestingLinuxDoc - InlineData
 * description: This is hello world testing doc
 * schemaVersion: 1.0
 *
 * phases:
 *   - name: build
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Build."
 *   - name: validate
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Validate."
 *   - name: test
 *     steps:
 *       - name: HelloWorldStep
 *         action: ExecuteBash
 *         inputs:
 *           commands:
 *             - echo "Hello World! Test."
 * `,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const componentAllParameters = new aws_native.imagebuilder.Component("componentAllParameters", {
 *     name: "component-name",
 *     platform: aws_native.imagebuilder.ComponentPlatform.Linux,
 *     version: "1.0.0",
 *     uri: "s3://imagebuilder/component_document.yml",
 *     description: "description",
 *     changeDescription: "change-description",
 *     kmsKeyId: "customer-kms-key-id",
 *     supportedOsVersions: [
 *         "CentOS",
 *         "Red Hat Enterprise Linux",
 *     ],
 *     tags: {
 *         customerComponentTagKey1: "CustomerComponentTagValue1",
 *         customerComponentTagKey2: "CustomerComponentTagValue2",
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const componentAllParameters = new aws_native.imagebuilder.Component("componentAllParameters", {
 *     name: "component-name",
 *     platform: aws_native.imagebuilder.ComponentPlatform.Linux,
 *     version: "1.0.0",
 *     uri: "s3://imagebuilder/component_document.yml",
 *     description: "description",
 *     changeDescription: "change-description",
 *     kmsKeyId: "customer-kms-key-id",
 *     supportedOsVersions: [
 *         "CentOS",
 *         "Red Hat Enterprise Linux",
 *     ],
 *     tags: {
 *         customerComponentTagKey1: "CustomerComponentTagValue1",
 *         customerComponentTagKey2: "CustomerComponentTagValue2",
 *     },
 * });
 *
 * ```
 */
class Component extends pulumi.CustomResource {
    /**
     * Get an existing Component resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Component(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Component.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Component.__pulumiType;
    }
    /**
     * Create a Component resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.platform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platform'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["changeDescription"] = args ? args.changeDescription : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["supportedOsVersions"] = args ? args.supportedOsVersions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["changeDescription"] = undefined /*out*/;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["supportedOsVersions"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["changeDescription", "data", "description", "kmsKeyId", "name", "platform", "supportedOsVersions[*]", "tags.*", "uri", "version"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Component.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Component = Component;
/** @internal */
Component.__pulumiType = 'aws-native:imagebuilder:Component';
//# sourceMappingURL=component.js.map