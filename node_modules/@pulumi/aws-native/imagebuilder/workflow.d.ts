import * as pulumi from "@pulumi/pulumi";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::ImageBuilder::Workflow
 */
export declare class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workflow;
    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Workflow;
    /**
     * The Amazon Resource Name (ARN) of the workflow.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The change description of the workflow.
     */
    readonly changeDescription: pulumi.Output<string | undefined>;
    /**
     * The data of the workflow.
     */
    readonly data: pulumi.Output<string | undefined>;
    /**
     * The description of the workflow.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The KMS key identifier used to encrypt the workflow.
     */
    readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * The name of the workflow.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The tags associated with the workflow.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The type of the workflow denotes whether the workflow is used to build, test, or distribute.
     */
    readonly type: pulumi.Output<enums.imagebuilder.WorkflowType>;
    /**
     * The uri of the workflow.
     */
    readonly uri: pulumi.Output<string | undefined>;
    /**
     * The version of the workflow.
     */
    readonly version: pulumi.Output<string>;
    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * The change description of the workflow.
     */
    changeDescription?: pulumi.Input<string>;
    /**
     * The data of the workflow.
     */
    data?: pulumi.Input<string>;
    /**
     * The description of the workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * The KMS key identifier used to encrypt the workflow.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags associated with the workflow.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The type of the workflow denotes whether the workflow is used to build, test, or distribute.
     */
    type: pulumi.Input<enums.imagebuilder.WorkflowType>;
    /**
     * The uri of the workflow.
     */
    uri?: pulumi.Input<string>;
    /**
     * The version of the workflow.
     */
    version: pulumi.Input<string>;
}
