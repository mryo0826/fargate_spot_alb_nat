"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Solution = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::Personalize::Solution.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const mySolution = new aws_native.personalize.Solution("mySolution", {
 *     name: "my-solution-name",
 *     datasetGroupArn: "arn:aws:personalize:us-west-2:123456789012:dataset-group/my-dataset-group-name",
 *     recipeArn: "arn:aws:personalize:::recipe/aws-user-personalization",
 *     solutionConfig: {
 *         eventValueThreshold: ".05",
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const mySolution = new aws_native.personalize.Solution("mySolution", {
 *     name: "my-solution-name",
 *     datasetGroupArn: "arn:aws:personalize:us-west-2:123456789012:dataset-group/my-dataset-group-name",
 *     recipeArn: "arn:aws:personalize:::recipe/aws-user-personalization",
 *     solutionConfig: {
 *         eventValueThreshold: ".05",
 *     },
 * });
 *
 * ```
 */
class Solution extends pulumi.CustomResource {
    /**
     * Get an existing Solution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Solution(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Solution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Solution.__pulumiType;
    }
    /**
     * Create a Solution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.datasetGroupArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetGroupArn'");
            }
            resourceInputs["datasetGroupArn"] = args ? args.datasetGroupArn : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performAutoMl"] = args ? args.performAutoMl : undefined;
            resourceInputs["performHpo"] = args ? args.performHpo : undefined;
            resourceInputs["recipeArn"] = args ? args.recipeArn : undefined;
            resourceInputs["solutionConfig"] = args ? args.solutionConfig : undefined;
            resourceInputs["solutionArn"] = undefined /*out*/;
        }
        else {
            resourceInputs["datasetGroupArn"] = undefined /*out*/;
            resourceInputs["eventType"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["performAutoMl"] = undefined /*out*/;
            resourceInputs["performHpo"] = undefined /*out*/;
            resourceInputs["recipeArn"] = undefined /*out*/;
            resourceInputs["solutionArn"] = undefined /*out*/;
            resourceInputs["solutionConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["datasetGroupArn", "eventType", "name", "performAutoMl", "performHpo", "recipeArn", "solutionConfig"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Solution.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Solution = Solution;
/** @internal */
Solution.__pulumiType = 'aws-native:personalize:Solution';
//# sourceMappingURL=solution.js.map