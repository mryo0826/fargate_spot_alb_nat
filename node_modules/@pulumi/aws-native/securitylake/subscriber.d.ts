import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource Type definition for AWS::SecurityLake::Subscriber
 */
export declare class Subscriber extends pulumi.CustomResource {
    /**
     * Get an existing Subscriber resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Subscriber;
    /**
     * Returns true if the given object is an instance of Subscriber.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Subscriber;
    /**
     * You can choose to notify subscribers of new objects with an Amazon Simple Queue Service (Amazon SQS) queue or through messaging to an HTTPS endpoint provided by the subscriber.
     *
     * Subscribers can consume data by directly querying AWS Lake Formation tables in your Amazon S3 bucket through services like Amazon Athena. This subscription type is defined as `LAKEFORMATION` .
     */
    readonly accessTypes: pulumi.Output<enums.securitylake.SubscriberAccessTypesItem[]>;
    /**
     * The ARN for the data lake.
     */
    readonly dataLakeArn: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Security Lake subscriber.
     */
    readonly resourceShareArn: pulumi.Output<string>;
    /**
     * The ARN name of the Amazon Security Lake subscriber.
     */
    readonly resourceShareName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the S3 bucket.
     */
    readonly s3BucketArn: pulumi.Output<string>;
    /**
     * The supported AWS services from which logs and events are collected.
     */
    readonly sources: pulumi.Output<outputs.securitylake.SubscriberSource[]>;
    /**
     * The Amazon Resource Name (ARN) of the Security Lake subscriber.
     */
    readonly subscriberArn: pulumi.Output<string>;
    /**
     * The description for your subscriber account in Security Lake.
     */
    readonly subscriberDescription: pulumi.Output<string | undefined>;
    /**
     * The AWS identity used to access your data.
     */
    readonly subscriberIdentity: pulumi.Output<outputs.securitylake.SubscriberIdentityProperties>;
    /**
     * The name of your Security Lake subscriber account.
     */
    readonly subscriberName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the role used to create the Security Lake subscriber.
     */
    readonly subscriberRoleArn: pulumi.Output<string>;
    /**
     * An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Create a Subscriber resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriberArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Subscriber resource.
 */
export interface SubscriberArgs {
    /**
     * You can choose to notify subscribers of new objects with an Amazon Simple Queue Service (Amazon SQS) queue or through messaging to an HTTPS endpoint provided by the subscriber.
     *
     * Subscribers can consume data by directly querying AWS Lake Formation tables in your Amazon S3 bucket through services like Amazon Athena. This subscription type is defined as `LAKEFORMATION` .
     */
    accessTypes: pulumi.Input<pulumi.Input<enums.securitylake.SubscriberAccessTypesItem>[]>;
    /**
     * The ARN for the data lake.
     */
    dataLakeArn: pulumi.Input<string>;
    /**
     * The supported AWS services from which logs and events are collected.
     */
    sources: pulumi.Input<pulumi.Input<inputs.securitylake.SubscriberSourceArgs>[]>;
    /**
     * The description for your subscriber account in Security Lake.
     */
    subscriberDescription?: pulumi.Input<string>;
    /**
     * The AWS identity used to access your data.
     */
    subscriberIdentity: pulumi.Input<inputs.securitylake.SubscriberIdentityPropertiesArgs>;
    /**
     * The name of your Security Lake subscriber account.
     */
    subscriberName?: pulumi.Input<string>;
    /**
     * An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
