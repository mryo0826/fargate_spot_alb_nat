"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CostCategory = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Cost Category enables you to map your cost and usage into meaningful categories. You can use Cost Category to organize your costs using a rule-based engine.
 */
class CostCategory extends pulumi.CustomResource {
    /**
     * Get an existing CostCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new CostCategory(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CostCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostCategory.__pulumiType;
    }
    /**
     * Create a CostCategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ruleVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleVersion'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["defaultValue"] = args ? args.defaultValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleVersion"] = args ? args.ruleVersion : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["splitChargeRules"] = args ? args.splitChargeRules : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultValue"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ruleVersion"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["splitChargeRules"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CostCategory.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CostCategory = CostCategory;
/** @internal */
CostCategory.__pulumiType = 'aws-native:ce:CostCategory';
//# sourceMappingURL=costCategory.js.map