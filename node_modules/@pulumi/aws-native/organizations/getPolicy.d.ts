import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Policies in AWS Organizations enable you to manage different features of the AWS accounts in your organization.  You can use policies when all features are enabled in your organization.
 */
export declare function getPolicy(args: GetPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyResult>;
export interface GetPolicyArgs {
    /**
     * Id of the Policy
     */
    id: string;
}
export interface GetPolicyResult {
    /**
     * ARN of the Policy
     */
    readonly arn?: string;
    /**
     * A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
     */
    readonly awsManaged?: boolean;
    /**
     * The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Organizations::Policy` for more information about the expected schema for this property.
     */
    readonly content?: any;
    /**
     * Human readable description of the policy
     */
    readonly description?: string;
    /**
     * Id of the Policy
     */
    readonly id?: string;
    /**
     * Name of the Policy
     */
    readonly name?: string;
    /**
     * A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null.
     */
    readonly tags?: outputs.Tag[];
    /**
     * List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
     */
    readonly targetIds?: string[];
}
/**
 * Policies in AWS Organizations enable you to manage different features of the AWS accounts in your organization.  You can use policies when all features are enabled in your organization.
 */
export declare function getPolicyOutput(args: GetPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPolicyResult>;
export interface GetPolicyOutputArgs {
    /**
     * Id of the Policy
     */
    id: pulumi.Input<string>;
}
