import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * You can use AWS::Organizations::ResourcePolicy to delegate policy management for AWS Organizations to specified member accounts to perform policy actions that are by default available only to the management account.
 */
export declare function getResourcePolicy(args: GetResourcePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetResourcePolicyResult>;
export interface GetResourcePolicyArgs {
    /**
     * The unique identifier (ID) associated with this resource policy.
     */
    id: string;
}
export interface GetResourcePolicyResult {
    /**
     * The Amazon Resource Name (ARN) of the resource policy.
     */
    readonly arn?: string;
    /**
     * The policy document. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Organizations::ResourcePolicy` for more information about the expected schema for this property.
     */
    readonly content?: any;
    /**
     * The unique identifier (ID) associated with this resource policy.
     */
    readonly id?: string;
    /**
     * A list of tags that you want to attach to the resource policy
     */
    readonly tags?: outputs.Tag[];
}
/**
 * You can use AWS::Organizations::ResourcePolicy to delegate policy management for AWS Organizations to specified member accounts to perform policy actions that are by default available only to the management account.
 */
export declare function getResourcePolicyOutput(args: GetResourcePolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetResourcePolicyResult>;
export interface GetResourcePolicyOutputArgs {
    /**
     * The unique identifier (ID) associated with this resource policy.
     */
    id: pulumi.Input<string>;
}
