"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrganizationalUnitOutput = exports.getOrganizationalUnit = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must be unique within a parent OU or root.
 */
function getOrganizationalUnit(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:organizations:getOrganizationalUnit", {
        "id": args.id,
    }, opts);
}
exports.getOrganizationalUnit = getOrganizationalUnit;
/**
 * You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must be unique within a parent OU or root.
 */
function getOrganizationalUnitOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:organizations:getOrganizationalUnit", {
        "id": args.id,
    }, opts);
}
exports.getOrganizationalUnitOutput = getOrganizationalUnitOutput;
//# sourceMappingURL=getOrganizationalUnit.js.map