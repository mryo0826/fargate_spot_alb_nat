"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationalUnit = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must be unique within a parent OU or root.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const organizationRootId = config.require("organizationRootId");
 * const testTemplateOU = new aws_native.organizations.OrganizationalUnit("testTemplateOU", {
 *     name: "TestTemplateOU",
 *     parentId: organizationRootId,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const organizationRootId = config.require("organizationRootId");
 * const testTemplateOU = new aws_native.organizations.OrganizationalUnit("testTemplateOU", {
 *     name: "TestTemplateOU",
 *     parentId: organizationRootId,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const organizationRootId = config.require("organizationRootId");
 * const parentOU = new aws_native.organizations.OrganizationalUnit("parentOU", {
 *     name: "ParentOU",
 *     parentId: organizationRootId,
 * });
 * const childOU = new aws_native.organizations.OrganizationalUnit("childOU", {
 *     name: "ChildOU",
 *     parentId: parentOU.id,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const organizationRootId = config.require("organizationRootId");
 * const parentOU = new aws_native.organizations.OrganizationalUnit("parentOU", {
 *     name: "ParentOU",
 *     parentId: organizationRootId,
 * });
 * const childOU = new aws_native.organizations.OrganizationalUnit("childOU", {
 *     name: "ChildOU",
 *     parentId: parentOU.id,
 * });
 *
 * ```
 */
class OrganizationalUnit extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationalUnit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new OrganizationalUnit(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OrganizationalUnit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationalUnit.__pulumiType;
    }
    /**
     * Create a OrganizationalUnit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["parentId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(OrganizationalUnit.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OrganizationalUnit = OrganizationalUnit;
/** @internal */
OrganizationalUnit.__pulumiType = 'aws-native:organizations:OrganizationalUnit';
//# sourceMappingURL=organizationalUnit.js.map