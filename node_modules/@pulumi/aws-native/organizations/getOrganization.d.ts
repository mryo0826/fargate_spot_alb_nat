import * as pulumi from "@pulumi/pulumi";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::Organizations::Organization
 */
export declare function getOrganization(args: GetOrganizationArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationResult>;
export interface GetOrganizationArgs {
    /**
     * The unique identifier (ID) of an organization.
     */
    id: string;
}
export interface GetOrganizationResult {
    /**
     * The Amazon Resource Name (ARN) of an organization.
     */
    readonly arn?: string;
    /**
     * Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
     */
    readonly featureSet?: enums.organizations.OrganizationFeatureSet;
    /**
     * The unique identifier (ID) of an organization.
     */
    readonly id?: string;
    /**
     * The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.
     */
    readonly managementAccountArn?: string;
    /**
     * The email address that is associated with the AWS account that is designated as the management account for the organization.
     */
    readonly managementAccountEmail?: string;
    /**
     * The unique identifier (ID) of the management account of an organization.
     */
    readonly managementAccountId?: string;
    /**
     * The unique identifier (ID) for the root.
     */
    readonly rootId?: string;
}
/**
 * Resource schema for AWS::Organizations::Organization
 */
export declare function getOrganizationOutput(args: GetOrganizationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrganizationResult>;
export interface GetOrganizationOutputArgs {
    /**
     * The unique identifier (ID) of an organization.
     */
    id: pulumi.Input<string>;
}
