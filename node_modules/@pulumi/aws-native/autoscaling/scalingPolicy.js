"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::AutoScaling::ScalingPolicy resource specifies an Amazon EC2 Auto Scaling scaling policy so that the Auto Scaling group can scale the number of instances available for your application.
 */
class ScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ScalingPolicy(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScalingPolicy.__pulumiType;
    }
    /**
     * Create a ScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.autoScalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupName'");
            }
            resourceInputs["adjustmentType"] = args ? args.adjustmentType : undefined;
            resourceInputs["autoScalingGroupName"] = args ? args.autoScalingGroupName : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["estimatedInstanceWarmup"] = args ? args.estimatedInstanceWarmup : undefined;
            resourceInputs["metricAggregationType"] = args ? args.metricAggregationType : undefined;
            resourceInputs["minAdjustmentMagnitude"] = args ? args.minAdjustmentMagnitude : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["predictiveScalingConfiguration"] = args ? args.predictiveScalingConfiguration : undefined;
            resourceInputs["scalingAdjustment"] = args ? args.scalingAdjustment : undefined;
            resourceInputs["stepAdjustments"] = args ? args.stepAdjustments : undefined;
            resourceInputs["targetTrackingConfiguration"] = args ? args.targetTrackingConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
        }
        else {
            resourceInputs["adjustmentType"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["autoScalingGroupName"] = undefined /*out*/;
            resourceInputs["cooldown"] = undefined /*out*/;
            resourceInputs["estimatedInstanceWarmup"] = undefined /*out*/;
            resourceInputs["metricAggregationType"] = undefined /*out*/;
            resourceInputs["minAdjustmentMagnitude"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
            resourceInputs["predictiveScalingConfiguration"] = undefined /*out*/;
            resourceInputs["scalingAdjustment"] = undefined /*out*/;
            resourceInputs["stepAdjustments"] = undefined /*out*/;
            resourceInputs["targetTrackingConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["autoScalingGroupName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ScalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ScalingPolicy = ScalingPolicy;
/** @internal */
ScalingPolicy.__pulumiType = 'aws-native:autoscaling:ScalingPolicy';
//# sourceMappingURL=scalingPolicy.js.map