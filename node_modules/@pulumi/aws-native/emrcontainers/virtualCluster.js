"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Schema of AWS::EMRContainers::VirtualCluster Type
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testVirtualCluster = new aws_native.emrcontainers.VirtualCluster("testVirtualCluster", {
 *     name: "VirtualClusterName",
 *     containerProvider: {
 *         type: "EKS",
 *         id: "EKSClusterName",
 *         info: {
 *             eksInfo: {
 *                 namespace: "EKSNamespace",
 *             },
 *         },
 *     },
 *     tags: [{
 *         key: "Key1",
 *         value: "Value1",
 *     }],
 * });
 * export const primaryId = undefined;
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testVirtualCluster = new aws_native.emrcontainers.VirtualCluster("testVirtualCluster", {
 *     name: "VirtualClusterName",
 *     containerProvider: {
 *         type: "EKS",
 *         id: "EKSClusterName",
 *         info: {
 *             eksInfo: {
 *                 namespace: "EKSNamespace",
 *             },
 *         },
 *     },
 *     tags: [{
 *         key: "Key1",
 *         value: "Value1",
 *     }],
 * });
 * export const primaryId = testVirtualCluster.id;
 *
 * ```
 */
class VirtualCluster extends pulumi.CustomResource {
    /**
     * Get an existing VirtualCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new VirtualCluster(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualCluster.__pulumiType;
    }
    /**
     * Create a VirtualCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.containerProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerProvider'");
            }
            resourceInputs["containerProvider"] = args ? args.containerProvider : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["containerProvider"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["containerProvider", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VirtualCluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VirtualCluster = VirtualCluster;
/** @internal */
VirtualCluster.__pulumiType = 'aws-native:emrcontainers:VirtualCluster';
//# sourceMappingURL=virtualCluster.js.map