"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowSource = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource schema for AWS::MediaConnect::FlowSource
 */
class FlowSource extends pulumi.CustomResource {
    /**
     * Get an existing FlowSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new FlowSource(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FlowSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowSource.__pulumiType;
    }
    /**
     * Create a FlowSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["decryption"] = args ? args.decryption : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entitlementArn"] = args ? args.entitlementArn : undefined;
            resourceInputs["flowArn"] = args ? args.flowArn : undefined;
            resourceInputs["gatewayBridgeSource"] = args ? args.gatewayBridgeSource : undefined;
            resourceInputs["ingestPort"] = args ? args.ingestPort : undefined;
            resourceInputs["maxBitrate"] = args ? args.maxBitrate : undefined;
            resourceInputs["maxLatency"] = args ? args.maxLatency : undefined;
            resourceInputs["minLatency"] = args ? args.minLatency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["senderControlPort"] = args ? args.senderControlPort : undefined;
            resourceInputs["senderIpAddress"] = args ? args.senderIpAddress : undefined;
            resourceInputs["sourceListenerAddress"] = args ? args.sourceListenerAddress : undefined;
            resourceInputs["sourceListenerPort"] = args ? args.sourceListenerPort : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["vpcInterfaceName"] = args ? args.vpcInterfaceName : undefined;
            resourceInputs["whitelistCidr"] = args ? args.whitelistCidr : undefined;
            resourceInputs["ingestIp"] = undefined /*out*/;
            resourceInputs["sourceArn"] = undefined /*out*/;
            resourceInputs["sourceIngestPort"] = undefined /*out*/;
        }
        else {
            resourceInputs["decryption"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["entitlementArn"] = undefined /*out*/;
            resourceInputs["flowArn"] = undefined /*out*/;
            resourceInputs["gatewayBridgeSource"] = undefined /*out*/;
            resourceInputs["ingestIp"] = undefined /*out*/;
            resourceInputs["ingestPort"] = undefined /*out*/;
            resourceInputs["maxBitrate"] = undefined /*out*/;
            resourceInputs["maxLatency"] = undefined /*out*/;
            resourceInputs["minLatency"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["senderControlPort"] = undefined /*out*/;
            resourceInputs["senderIpAddress"] = undefined /*out*/;
            resourceInputs["sourceArn"] = undefined /*out*/;
            resourceInputs["sourceIngestPort"] = undefined /*out*/;
            resourceInputs["sourceListenerAddress"] = undefined /*out*/;
            resourceInputs["sourceListenerPort"] = undefined /*out*/;
            resourceInputs["streamId"] = undefined /*out*/;
            resourceInputs["vpcInterfaceName"] = undefined /*out*/;
            resourceInputs["whitelistCidr"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FlowSource.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FlowSource = FlowSource;
/** @internal */
FlowSource.__pulumiType = 'aws-native:mediaconnect:FlowSource';
//# sourceMappingURL=flowSource.js.map