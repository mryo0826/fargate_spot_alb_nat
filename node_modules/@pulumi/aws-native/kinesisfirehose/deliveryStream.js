"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryStream = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::KinesisFirehose::DeliveryStream
 */
class DeliveryStream extends pulumi.CustomResource {
    /**
     * Get an existing DeliveryStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new DeliveryStream(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DeliveryStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeliveryStream.__pulumiType;
    }
    /**
     * Create a DeliveryStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["amazonOpenSearchServerlessDestinationConfiguration"] = args ? args.amazonOpenSearchServerlessDestinationConfiguration : undefined;
            resourceInputs["amazonopensearchserviceDestinationConfiguration"] = args ? args.amazonopensearchserviceDestinationConfiguration : undefined;
            resourceInputs["databaseSourceConfiguration"] = args ? args.databaseSourceConfiguration : undefined;
            resourceInputs["deliveryStreamEncryptionConfigurationInput"] = args ? args.deliveryStreamEncryptionConfigurationInput : undefined;
            resourceInputs["deliveryStreamName"] = args ? args.deliveryStreamName : undefined;
            resourceInputs["deliveryStreamType"] = args ? args.deliveryStreamType : undefined;
            resourceInputs["elasticsearchDestinationConfiguration"] = args ? args.elasticsearchDestinationConfiguration : undefined;
            resourceInputs["extendedS3DestinationConfiguration"] = args ? args.extendedS3DestinationConfiguration : undefined;
            resourceInputs["httpEndpointDestinationConfiguration"] = args ? args.httpEndpointDestinationConfiguration : undefined;
            resourceInputs["icebergDestinationConfiguration"] = args ? args.icebergDestinationConfiguration : undefined;
            resourceInputs["kinesisStreamSourceConfiguration"] = args ? args.kinesisStreamSourceConfiguration : undefined;
            resourceInputs["mskSourceConfiguration"] = args ? args.mskSourceConfiguration : undefined;
            resourceInputs["redshiftDestinationConfiguration"] = args ? args.redshiftDestinationConfiguration : undefined;
            resourceInputs["s3DestinationConfiguration"] = args ? args.s3DestinationConfiguration : undefined;
            resourceInputs["snowflakeDestinationConfiguration"] = args ? args.snowflakeDestinationConfiguration : undefined;
            resourceInputs["splunkDestinationConfiguration"] = args ? args.splunkDestinationConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        else {
            resourceInputs["amazonOpenSearchServerlessDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["amazonopensearchserviceDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["databaseSourceConfiguration"] = undefined /*out*/;
            resourceInputs["deliveryStreamEncryptionConfigurationInput"] = undefined /*out*/;
            resourceInputs["deliveryStreamName"] = undefined /*out*/;
            resourceInputs["deliveryStreamType"] = undefined /*out*/;
            resourceInputs["elasticsearchDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["extendedS3DestinationConfiguration"] = undefined /*out*/;
            resourceInputs["httpEndpointDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["icebergDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["kinesisStreamSourceConfiguration"] = undefined /*out*/;
            resourceInputs["mskSourceConfiguration"] = undefined /*out*/;
            resourceInputs["redshiftDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["s3DestinationConfiguration"] = undefined /*out*/;
            resourceInputs["snowflakeDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["splunkDestinationConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["amazonOpenSearchServerlessDestinationConfiguration.vpcConfiguration", "amazonopensearchserviceDestinationConfiguration.vpcConfiguration", "databaseSourceConfiguration", "deliveryStreamName", "deliveryStreamType", "elasticsearchDestinationConfiguration.vpcConfiguration", "icebergDestinationConfiguration", "kinesisStreamSourceConfiguration", "mskSourceConfiguration", "snowflakeDestinationConfiguration.snowflakeVpcConfiguration"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DeliveryStream.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DeliveryStream = DeliveryStream;
/** @internal */
DeliveryStream.__pulumiType = 'aws-native:kinesisfirehose:DeliveryStream';
//# sourceMappingURL=deliveryStream.js.map