"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new instance profile. For information about instance profiles, see [Using instance profiles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html).
 *   For information about the number of instance profiles you can create, see [object quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *User Guide*.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myIamInstanceProfile = new aws_native.iam.InstanceProfile("myIamInstanceProfile", {
 *     instanceProfileName: "MyIamInstanceProfile",
 *     path: "/",
 *     roles: ["MyAdminRole"],
 * });
 * const myLaunchTemplate = new aws_native.ec2.LaunchTemplate("myLaunchTemplate", {
 *     launchTemplateName: "MyLaunchTemplate",
 *     launchTemplateData: {
 *         iamInstanceProfile: {
 *             arn: myIamInstanceProfile.arn,
 *         },
 *         disableApiTermination: true,
 *         imageId: "ami-04d5cc9b88example",
 *         instanceType: "t2.micro",
 *         keyName: "MyKeyPair",
 *         securityGroupIds: ["sg-083cd3bfb8example"],
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myIamInstanceProfile = new aws_native.iam.InstanceProfile("myIamInstanceProfile", {
 *     instanceProfileName: "MyIamInstanceProfile",
 *     path: "/",
 *     roles: ["MyAdminRole"],
 * });
 * const myLaunchTemplate = new aws_native.ec2.LaunchTemplate("myLaunchTemplate", {
 *     launchTemplateName: "MyLaunchTemplate",
 *     launchTemplateData: {
 *         iamInstanceProfile: {
 *             arn: myIamInstanceProfile.arn,
 *         },
 *         disableApiTermination: true,
 *         imageId: "ami-04d5cc9b88example",
 *         instanceType: "t2.micro",
 *         keyName: "MyKeyPair",
 *         securityGroupIds: ["sg-083cd3bfb8example"],
 *     },
 * });
 *
 * ```
 */
class InstanceProfile extends pulumi.CustomResource {
    /**
     * Get an existing InstanceProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new InstanceProfile(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InstanceProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceProfile.__pulumiType;
    }
    /**
     * Create a InstanceProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["instanceProfileName"] = args ? args.instanceProfileName : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["instanceProfileName"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["roles"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["instanceProfileName", "path"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(InstanceProfile.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InstanceProfile = InstanceProfile;
/** @internal */
InstanceProfile.__pulumiType = 'aws-native:iam:InstanceProfile';
//# sourceMappingURL=instanceProfile.js.map