"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorizer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ``AWS::ApiGatewayV2::Authorizer`` resource creates an authorizer for a WebSocket API or an HTTP API. To learn more, see [Controlling and managing access to a WebSocket API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-control-access.html) and [Controlling and managing access to an HTTP API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html) in the *API Gateway Developer Guide*.
 */
class Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Authorizer(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }
    /**
     * Create a Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.authorizerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerType'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["authorizerCredentialsArn"] = args ? args.authorizerCredentialsArn : undefined;
            resourceInputs["authorizerPayloadFormatVersion"] = args ? args.authorizerPayloadFormatVersion : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerType"] = args ? args.authorizerType : undefined;
            resourceInputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            resourceInputs["enableSimpleResponses"] = args ? args.enableSimpleResponses : undefined;
            resourceInputs["identitySource"] = args ? args.identitySource : undefined;
            resourceInputs["identityValidationExpression"] = args ? args.identityValidationExpression : undefined;
            resourceInputs["jwtConfiguration"] = args ? args.jwtConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["authorizerId"] = undefined /*out*/;
        }
        else {
            resourceInputs["apiId"] = undefined /*out*/;
            resourceInputs["authorizerCredentialsArn"] = undefined /*out*/;
            resourceInputs["authorizerId"] = undefined /*out*/;
            resourceInputs["authorizerPayloadFormatVersion"] = undefined /*out*/;
            resourceInputs["authorizerResultTtlInSeconds"] = undefined /*out*/;
            resourceInputs["authorizerType"] = undefined /*out*/;
            resourceInputs["authorizerUri"] = undefined /*out*/;
            resourceInputs["enableSimpleResponses"] = undefined /*out*/;
            resourceInputs["identitySource"] = undefined /*out*/;
            resourceInputs["identityValidationExpression"] = undefined /*out*/;
            resourceInputs["jwtConfiguration"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["apiId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Authorizer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Authorizer = Authorizer;
/** @internal */
Authorizer.__pulumiType = 'aws-native:apigatewayv2:Authorizer';
//# sourceMappingURL=authorizer.js.map