import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
 */
export declare class ScheduledQuery extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ScheduledQuery;
    /**
     * Returns true if the given object is an instance of ScheduledQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ScheduledQuery;
    /**
     * The `ARN` of the scheduled query.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request.
     *
     * - If CreateScheduledQuery is called without a `ClientToken` , the Query SDK generates a `ClientToken` on your behalf.
     * - After 8 hours, any request with the same `ClientToken` is treated as a new request.
     */
    readonly clientToken: pulumi.Output<string | undefined>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     */
    readonly errorReportConfiguration: pulumi.Output<outputs.timestream.ScheduledQueryErrorReportConfiguration>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with *alias/*
     *
     * If ErrorReportConfiguration uses `SSE_KMS` as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     */
    readonly notificationConfiguration: pulumi.Output<outputs.timestream.ScheduledQueryNotificationConfiguration>;
    /**
     * The query string to run. Parameter names can be specified in the query string `@` character followed by an identifier. The named Parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run.
     *
     * The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     */
    readonly queryString: pulumi.Output<string>;
    /**
     * Schedule configuration.
     */
    readonly scheduleConfiguration: pulumi.Output<outputs.timestream.ScheduledQueryScheduleConfiguration>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    readonly scheduledQueryExecutionRoleArn: pulumi.Output<string>;
    /**
     * A name for the query. Scheduled query names must be unique within each Region.
     */
    readonly scheduledQueryName: pulumi.Output<string | undefined>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     */
    readonly sqErrorReportConfiguration: pulumi.Output<string>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    readonly sqKmsKeyId: pulumi.Output<string>;
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     */
    readonly sqName: pulumi.Output<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     */
    readonly sqNotificationConfiguration: pulumi.Output<string>;
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     */
    readonly sqQueryString: pulumi.Output<string>;
    /**
     * Configuration for when the scheduled query is executed.
     */
    readonly sqScheduleConfiguration: pulumi.Output<string>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    readonly sqScheduledQueryExecutionRoleArn: pulumi.Output<string>;
    /**
     * Configuration of target store where scheduled query results are written to.
     */
    readonly sqTargetConfiguration: pulumi.Output<string>;
    /**
     * A list of key-value pairs to label the scheduled query.
     */
    readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Scheduled query target store configuration.
     */
    readonly targetConfiguration: pulumi.Output<outputs.timestream.ScheduledQueryTargetConfiguration | undefined>;
    /**
     * Create a ScheduledQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledQueryArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a ScheduledQuery resource.
 */
export interface ScheduledQueryArgs {
    /**
     * Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request.
     *
     * - If CreateScheduledQuery is called without a `ClientToken` , the Query SDK generates a `ClientToken` on your behalf.
     * - After 8 hours, any request with the same `ClientToken` is treated as a new request.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     */
    errorReportConfiguration: pulumi.Input<inputs.timestream.ScheduledQueryErrorReportConfigurationArgs>;
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with *alias/*
     *
     * If ErrorReportConfiguration uses `SSE_KMS` as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     */
    notificationConfiguration: pulumi.Input<inputs.timestream.ScheduledQueryNotificationConfigurationArgs>;
    /**
     * The query string to run. Parameter names can be specified in the query string `@` character followed by an identifier. The named Parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run.
     *
     * The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     */
    queryString: pulumi.Input<string>;
    /**
     * Schedule configuration.
     */
    scheduleConfiguration: pulumi.Input<inputs.timestream.ScheduledQueryScheduleConfigurationArgs>;
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     */
    scheduledQueryExecutionRoleArn: pulumi.Input<string>;
    /**
     * A name for the query. Scheduled query names must be unique within each Region.
     */
    scheduledQueryName?: pulumi.Input<string>;
    /**
     * A list of key-value pairs to label the scheduled query.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Scheduled query target store configuration.
     */
    targetConfiguration?: pulumi.Input<inputs.timestream.ScheduledQueryTargetConfigurationArgs>;
}
